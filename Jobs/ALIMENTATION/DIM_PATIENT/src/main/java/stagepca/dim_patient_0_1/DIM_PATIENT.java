// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.dim_patient_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.DateHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DIM_PATIENT Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class DIM_PATIENT implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EXCEL_CLIN_1_RILUZ_Encoding != null){
				
					this.setProperty("EXCEL_CLIN_1_RILUZ_Encoding", EXCEL_CLIN_1_RILUZ_Encoding.toString());
				
			}
			
			if(EXCEL_CLIN_1_RILUZ_FieldSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_RILUZ_FieldSeparator", EXCEL_CLIN_1_RILUZ_FieldSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_1_RILUZ_File != null){
				
					this.setProperty("EXCEL_CLIN_1_RILUZ_File", EXCEL_CLIN_1_RILUZ_File.toString());
				
			}
			
			if(EXCEL_CLIN_1_RILUZ_Header != null){
				
					this.setProperty("EXCEL_CLIN_1_RILUZ_Header", EXCEL_CLIN_1_RILUZ_Header.toString());
				
			}
			
			if(EXCEL_CLIN_1_RILUZ_RowSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_RILUZ_RowSeparator", EXCEL_CLIN_1_RILUZ_RowSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_DECES_Encoding != null){
				
					this.setProperty("EXCEL_CLIN_DECES_Encoding", EXCEL_CLIN_DECES_Encoding.toString());
				
			}
			
			if(EXCEL_CLIN_DECES_FieldSeparator != null){
				
					this.setProperty("EXCEL_CLIN_DECES_FieldSeparator", EXCEL_CLIN_DECES_FieldSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_DECES_File != null){
				
					this.setProperty("EXCEL_CLIN_DECES_File", EXCEL_CLIN_DECES_File.toString());
				
			}
			
			if(EXCEL_CLIN_DECES_Header != null){
				
					this.setProperty("EXCEL_CLIN_DECES_Header", EXCEL_CLIN_DECES_Header.toString());
				
			}
			
			if(EXCEL_CLIN_DECES_RowSeparator != null){
				
					this.setProperty("EXCEL_CLIN_DECES_RowSeparator", EXCEL_CLIN_DECES_RowSeparator.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Database != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Database", CNX_POSTGRES_DWH_Database.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Login != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Login", CNX_POSTGRES_DWH_Login.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Password != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Password", CNX_POSTGRES_DWH_Password.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Port != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Port", CNX_POSTGRES_DWH_Port.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Schema != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Schema", CNX_POSTGRES_DWH_Schema.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Server != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Server", CNX_POSTGRES_DWH_Server.toString());
				
			}
			
		}

public String EXCEL_CLIN_1_RILUZ_Encoding;
public String getEXCEL_CLIN_1_RILUZ_Encoding(){
	return this.EXCEL_CLIN_1_RILUZ_Encoding;
}
public String EXCEL_CLIN_1_RILUZ_FieldSeparator;
public String getEXCEL_CLIN_1_RILUZ_FieldSeparator(){
	return this.EXCEL_CLIN_1_RILUZ_FieldSeparator;
}
		public String EXCEL_CLIN_1_RILUZ_File;
		public String getEXCEL_CLIN_1_RILUZ_File(){
			return this.EXCEL_CLIN_1_RILUZ_File;
		}
		
public Integer EXCEL_CLIN_1_RILUZ_Header;
public Integer getEXCEL_CLIN_1_RILUZ_Header(){
	return this.EXCEL_CLIN_1_RILUZ_Header;
}
public String EXCEL_CLIN_1_RILUZ_RowSeparator;
public String getEXCEL_CLIN_1_RILUZ_RowSeparator(){
	return this.EXCEL_CLIN_1_RILUZ_RowSeparator;
}
public String EXCEL_CLIN_DECES_Encoding;
public String getEXCEL_CLIN_DECES_Encoding(){
	return this.EXCEL_CLIN_DECES_Encoding;
}
public String EXCEL_CLIN_DECES_FieldSeparator;
public String getEXCEL_CLIN_DECES_FieldSeparator(){
	return this.EXCEL_CLIN_DECES_FieldSeparator;
}
		public String EXCEL_CLIN_DECES_File;
		public String getEXCEL_CLIN_DECES_File(){
			return this.EXCEL_CLIN_DECES_File;
		}
		
public Integer EXCEL_CLIN_DECES_Header;
public Integer getEXCEL_CLIN_DECES_Header(){
	return this.EXCEL_CLIN_DECES_Header;
}
public String EXCEL_CLIN_DECES_RowSeparator;
public String getEXCEL_CLIN_DECES_RowSeparator(){
	return this.EXCEL_CLIN_DECES_RowSeparator;
}
public String CNX_POSTGRES_DWH_Database;
public String getCNX_POSTGRES_DWH_Database(){
	return this.CNX_POSTGRES_DWH_Database;
}
public String CNX_POSTGRES_DWH_Login;
public String getCNX_POSTGRES_DWH_Login(){
	return this.CNX_POSTGRES_DWH_Login;
}
public java.lang.String CNX_POSTGRES_DWH_Password;
public java.lang.String getCNX_POSTGRES_DWH_Password(){
	return this.CNX_POSTGRES_DWH_Password;
}
public String CNX_POSTGRES_DWH_Port;
public String getCNX_POSTGRES_DWH_Port(){
	return this.CNX_POSTGRES_DWH_Port;
}
public String CNX_POSTGRES_DWH_Schema;
public String getCNX_POSTGRES_DWH_Schema(){
	return this.CNX_POSTGRES_DWH_Schema;
}
public String CNX_POSTGRES_DWH_Server;
public String getCNX_POSTGRES_DWH_Server(){
	return this.CNX_POSTGRES_DWH_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DIM_PATIENT";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DIM_PATIENT.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DIM_PATIENT.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_LKP_PATIENTS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public String DATDRILU_L1_Val;

				public String getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String Date_Riluz_Full_String;

				public String getDate_Riluz_Full_String () {
					return this.Date_Riluz_Full_String;
				}
				
			    public String Date_Riluz_MonthYear;

				public String getDate_Riluz_MonthYear () {
					return this.Date_Riluz_MonthYear;
				}
				
			    public String Date_Riluz_Month_Name;

				public String getDate_Riluz_Month_Name () {
					return this.Date_Riluz_Month_Name;
				}
				
			    public String Date_Riluz_Month_Number;

				public String getDate_Riluz_Month_Number () {
					return this.Date_Riluz_Month_Number;
				}
				
			    public String Date_Riluz_Year_Number;

				public String getDate_Riluz_Year_Number () {
					return this.Date_Riluz_Year_Number;
				}
				
			    public String Riluz_ON;

				public String getRiluz_ON () {
					return this.Riluz_ON;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readString(dis);
					
					this.Date_Riluz_Full_String = readString(dis);
					
					this.Date_Riluz_MonthYear = readString(dis);
					
					this.Date_Riluz_Month_Name = readString(dis);
					
					this.Date_Riluz_Month_Number = readString(dis);
					
					this.Date_Riluz_Year_Number = readString(dis);
					
					this.Riluz_ON = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// String
				
						writeString(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.Date_Riluz_Full_String,dos);
					
					// String
				
						writeString(this.Date_Riluz_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Riluz_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Riluz_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Riluz_Year_Number,dos);
					
					// String
				
						writeString(this.Riluz_ON,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+DATDRILU_L1_Val);
		sb.append(",Date_Riluz_Full_String="+Date_Riluz_Full_String);
		sb.append(",Date_Riluz_MonthYear="+Date_Riluz_MonthYear);
		sb.append(",Date_Riluz_Month_Name="+Date_Riluz_Month_Name);
		sb.append(",Date_Riluz_Month_Number="+Date_Riluz_Month_Number);
		sb.append(",Date_Riluz_Year_Number="+Date_Riluz_Year_Number);
		sb.append(",Riluz_ON="+Riluz_ON);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public String DATDRILU_L1_Val;

				public String getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String Riluz_ON;

				public String getRiluz_ON () {
					return this.Riluz_ON;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readString(dis);
					
					this.Riluz_ON = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// String
				
						writeString(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.Riluz_ON,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+DATDRILU_L1_Val);
		sb.append(",Riluz_ON="+Riluz_ON);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String IPP;

				public String getIPP () {
					return this.IPP;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String SURNAME;

				public String getSURNAME () {
					return this.SURNAME;
				}
				
			    public String NAME_SURNAME;

				public String getNAME_SURNAME () {
					return this.NAME_SURNAME;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGNOSTIC;

				public String getDIAGNOSTIC () {
					return this.DIAGNOSTIC;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String Date_Diagnostic_Full_String;

				public String getDate_Diagnostic_Full_String () {
					return this.Date_Diagnostic_Full_String;
				}
				
			    public String Date_Diagnostic_MonthYear;

				public String getDate_Diagnostic_MonthYear () {
					return this.Date_Diagnostic_MonthYear;
				}
				
			    public String Date_Diagnostic_Month_Number;

				public String getDate_Diagnostic_Month_Number () {
					return this.Date_Diagnostic_Month_Number;
				}
				
			    public String Date_Diagnostic_Month_Name;

				public String getDate_Diagnostic_Month_Name () {
					return this.Date_Diagnostic_Month_Name;
				}
				
			    public String Date_Diagnostic_Year_Number;

				public String getDate_Diagnostic_Year_Number () {
					return this.Date_Diagnostic_Year_Number;
				}
				
			    public String Date_FS;

				public String getDate_FS () {
					return this.Date_FS;
				}
				
			    public String Date_FS_Full_String;

				public String getDate_FS_Full_String () {
					return this.Date_FS_Full_String;
				}
				
			    public String Date_FS_MonthYear;

				public String getDate_FS_MonthYear () {
					return this.Date_FS_MonthYear;
				}
				
			    public String Date_FS_Month_Number;

				public String getDate_FS_Month_Number () {
					return this.Date_FS_Month_Number;
				}
				
			    public String Date_FS_Month_Name;

				public String getDate_FS_Month_Name () {
					return this.Date_FS_Month_Name;
				}
				
			    public String Date_FS_Year_Number;

				public String getDate_FS_Year_Number () {
					return this.Date_FS_Year_Number;
				}
				
			    public java.util.Date DATDRILU_L1_Val;

				public java.util.Date getDATDRILU_L1_Val () {
					return this.DATDRILU_L1_Val;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String Date_Death_Full;

				public String getDate_Death_Full () {
					return this.Date_Death_Full;
				}
				
			    public String Date_Death_String;

				public String getDate_Death_String () {
					return this.Date_Death_String;
				}
				
			    public String Date_Death_MonthYear;

				public String getDate_Death_MonthYear () {
					return this.Date_Death_MonthYear;
				}
				
			    public String Date_Death_Month_Name;

				public String getDate_Death_Month_Name () {
					return this.Date_Death_Month_Name;
				}
				
			    public String Date_Death_Month_Number;

				public String getDate_Death_Month_Number () {
					return this.Date_Death_Month_Number;
				}
				
			    public String Date_Death_Year_Number;

				public String getDate_Death_Year_Number () {
					return this.Date_Death_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.IPP = readString(dis);
					
					this.NAME = readString(dis);
					
					this.SURNAME = readString(dis);
					
					this.NAME_SURNAME = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGNOSTIC = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.Date_Diagnostic_Full_String = readString(dis);
					
					this.Date_Diagnostic_MonthYear = readString(dis);
					
					this.Date_Diagnostic_Month_Number = readString(dis);
					
					this.Date_Diagnostic_Month_Name = readString(dis);
					
					this.Date_Diagnostic_Year_Number = readString(dis);
					
					this.Date_FS = readString(dis);
					
					this.Date_FS_Full_String = readString(dis);
					
					this.Date_FS_MonthYear = readString(dis);
					
					this.Date_FS_Month_Number = readString(dis);
					
					this.Date_FS_Month_Name = readString(dis);
					
					this.Date_FS_Year_Number = readString(dis);
					
					this.DATDRILU_L1_Val = readDate(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.Date_Death_Full = readString(dis);
					
					this.Date_Death_String = readString(dis);
					
					this.Date_Death_MonthYear = readString(dis);
					
					this.Date_Death_Month_Name = readString(dis);
					
					this.Date_Death_Month_Number = readString(dis);
					
					this.Date_Death_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.IPP,dos);
					
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.SURNAME,dos);
					
					// String
				
						writeString(this.NAME_SURNAME,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGNOSTIC,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Full_String,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Diagnostic_Year_Number,dos);
					
					// String
				
						writeString(this.Date_FS,dos);
					
					// String
				
						writeString(this.Date_FS_Full_String,dos);
					
					// String
				
						writeString(this.Date_FS_MonthYear,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Number,dos);
					
					// String
				
						writeString(this.Date_FS_Month_Name,dos);
					
					// String
				
						writeString(this.Date_FS_Year_Number,dos);
					
					// java.util.Date
				
						writeDate(this.DATDRILU_L1_Val,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.Date_Death_Full,dos);
					
					// String
				
						writeString(this.Date_Death_String,dos);
					
					// String
				
						writeString(this.Date_Death_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Death_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Death_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",IPP="+IPP);
		sb.append(",NAME="+NAME);
		sb.append(",SURNAME="+SURNAME);
		sb.append(",NAME_SURNAME="+NAME_SURNAME);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGNOSTIC="+DIAGNOSTIC);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",Date_Diagnostic_Full_String="+Date_Diagnostic_Full_String);
		sb.append(",Date_Diagnostic_MonthYear="+Date_Diagnostic_MonthYear);
		sb.append(",Date_Diagnostic_Month_Number="+Date_Diagnostic_Month_Number);
		sb.append(",Date_Diagnostic_Month_Name="+Date_Diagnostic_Month_Name);
		sb.append(",Date_Diagnostic_Year_Number="+Date_Diagnostic_Year_Number);
		sb.append(",Date_FS="+Date_FS);
		sb.append(",Date_FS_Full_String="+Date_FS_Full_String);
		sb.append(",Date_FS_MonthYear="+Date_FS_MonthYear);
		sb.append(",Date_FS_Month_Number="+Date_FS_Month_Number);
		sb.append(",Date_FS_Month_Name="+Date_FS_Month_Name);
		sb.append(",Date_FS_Year_Number="+Date_FS_Year_Number);
		sb.append(",DATDRILU_L1_Val="+String.valueOf(DATDRILU_L1_Val));
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",Date_Death_Full="+Date_Death_Full);
		sb.append(",Date_Death_String="+Date_Death_String);
		sb.append(",Date_Death_MonthYear="+Date_Death_MonthYear);
		sb.append(",Date_Death_Month_Name="+Date_Death_Month_Name);
		sb.append(",Date_Death_Month_Number="+Date_Death_Month_Number);
		sb.append(",Date_Death_Year_Number="+Date_Death_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _IPP_HASH;

				public String get_IPP_HASH () {
					return this._IPP_HASH;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATDRILU_L1;

				public String getDATDRILU_L1 () {
					return this.DATDRILU_L1;
				}
				
			    public String DATDRILU_L1_VALUE;

				public String getDATDRILU_L1_VALUE () {
					return this.DATDRILU_L1_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._IPP_HASH = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATDRILU_L1 = readString(dis);
					
					this.DATDRILU_L1_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._IPP_HASH,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATDRILU_L1,dos);
					
					// String
				
						writeString(this.DATDRILU_L1_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_IPP_HASH="+_IPP_HASH);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATDRILU_L1="+DATDRILU_L1);
		sb.append(",DATDRILU_L1_VALUE="+DATDRILU_L1_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _IPP_HASH;

				public String get_IPP_HASH () {
					return this._IPP_HASH;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATDRILU_L1;

				public String getDATDRILU_L1 () {
					return this.DATDRILU_L1;
				}
				
			    public String DATDRILU_L1_VALUE;

				public String getDATDRILU_L1_VALUE () {
					return this.DATDRILU_L1_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._IPP_HASH = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATDRILU_L1 = readString(dis);
					
					this.DATDRILU_L1_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._IPP_HASH,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATDRILU_L1,dos);
					
					// String
				
						writeString(this.DATDRILU_L1_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_IPP_HASH="+_IPP_HASH);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATDRILU_L1="+DATDRILU_L1);
		sb.append(",DATDRILU_L1_VALUE="+DATDRILU_L1_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
out2Struct out2 = new out2Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparableout1Struct extends out1Struct implements Comparable<Comparableout1Struct> {
	
	public int compareTo(Comparableout1Struct other) {

		if(this.DATDRILU_L1_Val == null && other.DATDRILU_L1_Val != null){
			return -1;
						
		}else if(this.DATDRILU_L1_Val != null && other.DATDRILU_L1_Val == null){
			return 1;
						
		}else if(this.DATDRILU_L1_Val != null && other.DATDRILU_L1_Val != null){
			if(!this.DATDRILU_L1_Val.equals(other.DATDRILU_L1_Val)){
				return this.DATDRILU_L1_Val.compareTo(other.DATDRILU_L1_Val);
			}
		}
		return 0;
	}
}

java.util.List<Comparableout1Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparableout1Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LKP_PATIENTSStruct> tHash_Lookup_LKP_PATIENTS = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LKP_PATIENTSStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LKP_PATIENTSStruct>) 
					globalMap.get( "tHash_Lookup_LKP_PATIENTS" ))
					;					
					
	

LKP_PATIENTSStruct LKP_PATIENTSHashKey = new LKP_PATIENTSStruct();
LKP_PATIENTSStruct LKP_PATIENTSDefault = new LKP_PATIENTSStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String ND;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_RILUZ_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_RILUZ_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)context.EXCEL_CLIN_1_RILUZ_RowSeparator).length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_RILUZ_RowSeparator).toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */context.EXCEL_CLIN_1_RILUZ_File/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_RILUZ_Encoding);
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_RILUZ_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_RILUZ_Header; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_RILUZ_Encoding);
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_RILUZ_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_RILUZ_Header;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_RILUZ_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)context.EXCEL_CLIN_1_RILUZ_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1._IPP_HASH = null;
					
							row1.SEX = null;
					
							row1.DOB = null;
					
							row1.DIAGPROBA = null;
					
							row1.DATEDIAG = null;
					
							row1.FIRSTSYMPTOM = null;
					
							row1.LIEUDEB = null;
					
							row1.AGE_DEBUT = null;
					
							row1.DATDRILU_L1 = null;
					
							row1.DATDRILU_L1_VALUE = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1._IPP_HASH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1._IPP_HASH = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SEX = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SEX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DIAGPROBA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DIAGPROBA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEDIAG = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEDIAG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FIRSTSYMPTOM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FIRSTSYMPTOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LIEUDEB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LIEUDEB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AGE_DEBUT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AGE_DEBUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATDRILU_L1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATDRILU_L1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATDRILU_L1_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATDRILU_L1_VALUE = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "LKP_PATIENTS" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLKP_PATIENTS = false;
       		  	    	
       		  	    	
 							LKP_PATIENTSStruct LKP_PATIENTSObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		LKP_PATIENTSHashKey._IPP_HASH = row1._IPP_HASH ;
                        		    		

								
		                        	LKP_PATIENTSHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_LKP_PATIENTS.lookup( LKP_PATIENTSHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_LKP_PATIENTS.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLoopLKP_PATIENTS = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopLKP_PATIENTS = true;
			           		  	} // G 21
                    		  	
                    		

							LKP_PATIENTSStruct LKP_PATIENTS = null;
                    		  	 
							

								while ((tHash_Lookup_LKP_PATIENTS != null && tHash_Lookup_LKP_PATIENTS.hasNext()) || forceLoopLKP_PATIENTS) { // G_TM_M_043

								
									 // CALL close loop of lookup 'LKP_PATIENTS'
									
                    		  	 
							   
                    		  	 
	       		  	    	LKP_PATIENTSStruct fromLookup_LKP_PATIENTS = null;
							LKP_PATIENTS = LKP_PATIENTSDefault;
										 
							
								
								if(!forceLoopLKP_PATIENTS) { // G 46
								
							
								 
							
								
								fromLookup_LKP_PATIENTS = tHash_Lookup_LKP_PATIENTS.next();

							

							if(fromLookup_LKP_PATIENTS != null) {
								LKP_PATIENTS = fromLookup_LKP_PATIENTS;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopLKP_PATIENTS = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp._hash_ipp = row1._IPP_HASH.trim() ;
out1_tmp.IPP = Var.ND ;
out1_tmp.NAME = Var.ND ;
out1_tmp.SURNAME = Var.ND ;
out1_tmp.NAME_SURNAME = Var.ND ;
out1_tmp.SEX = row1.SEX==null?"ND":row1.SEX ;
out1_tmp.DOB = row1.DOB==null?"ND":
TalendDate.formatDate("dd/MM/yyyy",TalendDate.parseDate("dd/MM/yyyy",row1.DOB)) ;
out1_tmp.DIAGNOSTIC = "SLA";
out1_tmp.DIAGPROBA = row1.DIAGPROBA ==null ?"ND":
row1.DIAGPROBA ;
out1_tmp.DATEDIAG = TalendDate.isDate(row1.DATEDIAG,"dd/MM/yyyy")?row1.DATEDIAG:"ND" ;
out1_tmp.Date_Diagnostic_Full_String = TalendDate.isDate(row1.DATEDIAG,"dd/MM/yyyy")?TalendDate.formatDate("ddMMyyyy",TalendDate.parseDate("dd/MM/yyyy",row1.DATEDIAG)):"ND" ;
out1_tmp.Date_Diagnostic_MonthYear = TalendDate.isDate(row1.DATEDIAG, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",row1.DATEDIAG)) :"ND" ;
out1_tmp.Date_Diagnostic_Month_Number = DateHandling.returnMonth(row1.DATEDIAG,"/") ;
out1_tmp.Date_Diagnostic_Month_Name = DateHandling.CheckMonth(row1.DATEDIAG, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(row1.DATEDIAG, "/"))):"ND" ;
out1_tmp.Date_Diagnostic_Year_Number = DateHandling.returnYear(row1.DATEDIAG, "/") ;
out1_tmp.Date_FS = TalendDate.isDate(row1.FIRSTSYMPTOM,"dd/MM/yyyy")?row1.FIRSTSYMPTOM:"ND" ;
out1_tmp.Date_FS_Full_String = TalendDate.isDate(row1.FIRSTSYMPTOM,"dd/MM/yyyy")?TalendDate.formatDate("ddMMyyyy",TalendDate.parseDate("dd/MM/yyyy", row1.FIRSTSYMPTOM)):"ND" ;
out1_tmp.Date_FS_MonthYear = TalendDate.isDate(row1.FIRSTSYMPTOM, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",row1.FIRSTSYMPTOM)) :"ND" ;
out1_tmp.Date_FS_Month_Number = DateHandling.returnMonth(row1.FIRSTSYMPTOM,"/") ;
out1_tmp.Date_FS_Month_Name = DateHandling.CheckMonth(row1.FIRSTSYMPTOM, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(row1.FIRSTSYMPTOM, "/"))):"ND" ;
out1_tmp.Date_FS_Year_Number = DateHandling.returnYear(row1.FIRSTSYMPTOM, "/") ;
out1_tmp.DATDRILU_L1_Val = TalendDate.isDate(row1.DATDRILU_L1_VALUE,"dd/MM/yyyy")?
TalendDate.parseDate("dd/MM/yyyy",row1.DATDRILU_L1_VALUE )
:TalendDate.parseDate("dd/MM/yyyy","01/01/2050") ;
out1_tmp.LIEUDEB = row1.LIEUDEB==null?"ND": row1.LIEUDEB ;
out1_tmp.Date_Death_Full = TalendDate.isDate(LKP_PATIENTS.DATEDCD_VALUE,"dd/MM/yyyy")?
LKP_PATIENTS.DATEDCD_VALUE:"ND" ;
out1_tmp.Date_Death_String = TalendDate.isDate(LKP_PATIENTS.DATEDCD_VALUE,"dd/MM/yyyy")?TalendDate.formatDate("ddMMyyyy",TalendDate.parseDate("dd/MM/yyyy", LKP_PATIENTS.DATEDCD_VALUE)):"ND" ;
out1_tmp.Date_Death_MonthYear = TalendDate.isDate(LKP_PATIENTS.DATEDCD_VALUE, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",LKP_PATIENTS.DATEDCD_VALUE)) :"ND" ;
out1_tmp.Date_Death_Month_Name = DateHandling.CheckMonth(LKP_PATIENTS.DATEDCD_VALUE, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(LKP_PATIENTS.DATEDCD_VALUE, "/"))):"ND" ;
out1_tmp.Date_Death_Month_Number = DateHandling.returnMonth(LKP_PATIENTS.DATEDCD_VALUE,"/") ;
out1_tmp.Date_Death_Year_Number = DateHandling.returnYear(LKP_PATIENTS.DATEDCD_VALUE, "/") ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



	Comparableout1Struct arrayRowtSortRow_1_SortOut = new Comparableout1Struct();

	arrayRowtSortRow_1_SortOut._hash_ipp = out1._hash_ipp;
	arrayRowtSortRow_1_SortOut.IPP = out1.IPP;
	arrayRowtSortRow_1_SortOut.NAME = out1.NAME;
	arrayRowtSortRow_1_SortOut.SURNAME = out1.SURNAME;
	arrayRowtSortRow_1_SortOut.NAME_SURNAME = out1.NAME_SURNAME;
	arrayRowtSortRow_1_SortOut.SEX = out1.SEX;
	arrayRowtSortRow_1_SortOut.DOB = out1.DOB;
	arrayRowtSortRow_1_SortOut.DIAGNOSTIC = out1.DIAGNOSTIC;
	arrayRowtSortRow_1_SortOut.DIAGPROBA = out1.DIAGPROBA;
	arrayRowtSortRow_1_SortOut.DATEDIAG = out1.DATEDIAG;
	arrayRowtSortRow_1_SortOut.Date_Diagnostic_Full_String = out1.Date_Diagnostic_Full_String;
	arrayRowtSortRow_1_SortOut.Date_Diagnostic_MonthYear = out1.Date_Diagnostic_MonthYear;
	arrayRowtSortRow_1_SortOut.Date_Diagnostic_Month_Number = out1.Date_Diagnostic_Month_Number;
	arrayRowtSortRow_1_SortOut.Date_Diagnostic_Month_Name = out1.Date_Diagnostic_Month_Name;
	arrayRowtSortRow_1_SortOut.Date_Diagnostic_Year_Number = out1.Date_Diagnostic_Year_Number;
	arrayRowtSortRow_1_SortOut.Date_FS = out1.Date_FS;
	arrayRowtSortRow_1_SortOut.Date_FS_Full_String = out1.Date_FS_Full_String;
	arrayRowtSortRow_1_SortOut.Date_FS_MonthYear = out1.Date_FS_MonthYear;
	arrayRowtSortRow_1_SortOut.Date_FS_Month_Number = out1.Date_FS_Month_Number;
	arrayRowtSortRow_1_SortOut.Date_FS_Month_Name = out1.Date_FS_Month_Name;
	arrayRowtSortRow_1_SortOut.Date_FS_Year_Number = out1.Date_FS_Year_Number;
	arrayRowtSortRow_1_SortOut.DATDRILU_L1_Val = out1.DATDRILU_L1_Val;
	arrayRowtSortRow_1_SortOut.LIEUDEB = out1.LIEUDEB;
	arrayRowtSortRow_1_SortOut.Date_Death_Full = out1.Date_Death_Full;
	arrayRowtSortRow_1_SortOut.Date_Death_String = out1.Date_Death_String;
	arrayRowtSortRow_1_SortOut.Date_Death_MonthYear = out1.Date_Death_MonthYear;
	arrayRowtSortRow_1_SortOut.Date_Death_Month_Name = out1.Date_Death_Month_Name;
	arrayRowtSortRow_1_SortOut.Date_Death_Month_Number = out1.Date_Death_Month_Number;
	arrayRowtSortRow_1_SortOut.Date_Death_Year_Number = out1.Date_Death_Year_Number;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'LKP_PATIENTS' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_LKP_PATIENTS != null) {
						tHash_Lookup_LKP_PATIENTS.endGet();
					}
					globalMap.remove( "tHash_Lookup_LKP_PATIENTS" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

out1Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparableout1Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */



	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_2_SortOut = 0;
		


class Comparablerow3Struct extends row3Struct implements Comparable<Comparablerow3Struct> {
	
	public int compareTo(Comparablerow3Struct other) {

		if(this._hash_ipp == null && other._hash_ipp != null){
			return -1;
						
		}else if(this._hash_ipp != null && other._hash_ipp == null){
			return 1;
						
		}else if(this._hash_ipp != null && other._hash_ipp != null){
			if(!this._hash_ipp.equals(other._hash_ipp)){
				return this._hash_ipp.compareTo(other._hash_ipp);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow3Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow3Struct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String _hash_ipp;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this._hash_ipp == null) ? 0 : this._hash_ipp.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this._hash_ipp == null) {
										if (other._hash_ipp != null) 
											return false;
								
									} else if (!this._hash_ipp.equals(other._hash_ipp))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();
java.util.Set<KeyStruct_tUniqRow_1> keysForDuplicatedtUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


out1Struct[] array_tSortRow_1_SortIn = (out1Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

out1Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row2._hash_ipp = current_tSortRow_1_SortIn._hash_ipp;
	row2.IPP = current_tSortRow_1_SortIn.IPP;
	row2.NAME = current_tSortRow_1_SortIn.NAME;
	row2.SURNAME = current_tSortRow_1_SortIn.SURNAME;
	row2.NAME_SURNAME = current_tSortRow_1_SortIn.NAME_SURNAME;
	row2.SEX = current_tSortRow_1_SortIn.SEX;
	row2.DOB = current_tSortRow_1_SortIn.DOB;
	row2.DIAGNOSTIC = current_tSortRow_1_SortIn.DIAGNOSTIC;
	row2.DIAGPROBA = current_tSortRow_1_SortIn.DIAGPROBA;
	row2.DATEDIAG = current_tSortRow_1_SortIn.DATEDIAG;
	row2.Date_Diagnostic_Full_String = current_tSortRow_1_SortIn.Date_Diagnostic_Full_String;
	row2.Date_Diagnostic_MonthYear = current_tSortRow_1_SortIn.Date_Diagnostic_MonthYear;
	row2.Date_Diagnostic_Month_Number = current_tSortRow_1_SortIn.Date_Diagnostic_Month_Number;
	row2.Date_Diagnostic_Month_Name = current_tSortRow_1_SortIn.Date_Diagnostic_Month_Name;
	row2.Date_Diagnostic_Year_Number = current_tSortRow_1_SortIn.Date_Diagnostic_Year_Number;
	row2.Date_FS = current_tSortRow_1_SortIn.Date_FS;
	row2.Date_FS_Full_String = current_tSortRow_1_SortIn.Date_FS_Full_String;
	row2.Date_FS_MonthYear = current_tSortRow_1_SortIn.Date_FS_MonthYear;
	row2.Date_FS_Month_Number = current_tSortRow_1_SortIn.Date_FS_Month_Number;
	row2.Date_FS_Month_Name = current_tSortRow_1_SortIn.Date_FS_Month_Name;
	row2.Date_FS_Year_Number = current_tSortRow_1_SortIn.Date_FS_Year_Number;
	row2.DATDRILU_L1_Val = current_tSortRow_1_SortIn.DATDRILU_L1_Val;
	row2.LIEUDEB = current_tSortRow_1_SortIn.LIEUDEB;
	row2.Date_Death_Full = current_tSortRow_1_SortIn.Date_Death_Full;
	row2.Date_Death_String = current_tSortRow_1_SortIn.Date_Death_String;
	row2.Date_Death_MonthYear = current_tSortRow_1_SortIn.Date_Death_MonthYear;
	row2.Date_Death_Month_Name = current_tSortRow_1_SortIn.Date_Death_Month_Name;
	row2.Date_Death_Month_Number = current_tSortRow_1_SortIn.Date_Death_Month_Number;
	row2.Date_Death_Year_Number = current_tSortRow_1_SortIn.Date_Death_Year_Number;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		
row3 = null;			
if(row2._hash_ipp == null){
	finder_tUniqRow_1._hash_ipp = null;
}else{
	finder_tUniqRow_1._hash_ipp = row2._hash_ipp.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row2._hash_ipp == null){
	new_tUniqRow_1._hash_ipp = null;
}else{
	new_tUniqRow_1._hash_ipp = row2._hash_ipp.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3._hash_ipp = row2._hash_ipp;			row3.IPP = row2.IPP;			row3.NAME = row2.NAME;			row3.SURNAME = row2.SURNAME;			row3.NAME_SURNAME = row2.NAME_SURNAME;			row3.SEX = row2.SEX;			row3.DOB = row2.DOB;			row3.DIAGNOSTIC = row2.DIAGNOSTIC;			row3.DIAGPROBA = row2.DIAGPROBA;			row3.DATEDIAG = row2.DATEDIAG;			row3.Date_Diagnostic_Full_String = row2.Date_Diagnostic_Full_String;			row3.Date_Diagnostic_MonthYear = row2.Date_Diagnostic_MonthYear;			row3.Date_Diagnostic_Month_Number = row2.Date_Diagnostic_Month_Number;			row3.Date_Diagnostic_Month_Name = row2.Date_Diagnostic_Month_Name;			row3.Date_Diagnostic_Year_Number = row2.Date_Diagnostic_Year_Number;			row3.Date_FS = row2.Date_FS;			row3.Date_FS_Full_String = row2.Date_FS_Full_String;			row3.Date_FS_MonthYear = row2.Date_FS_MonthYear;			row3.Date_FS_Month_Number = row2.Date_FS_Month_Number;			row3.Date_FS_Month_Name = row2.Date_FS_Month_Name;			row3.Date_FS_Year_Number = row2.Date_FS_Year_Number;			row3.DATDRILU_L1_Val = row2.DATDRILU_L1_Val;			row3.LIEUDEB = row2.LIEUDEB;			row3.Date_Death_Full = row2.Date_Death_Full;			row3.Date_Death_String = row2.Date_Death_String;			row3.Date_Death_MonthYear = row2.Date_Death_MonthYear;			row3.Date_Death_Month_Name = row2.Date_Death_Month_Name;			row3.Date_Death_Month_Number = row2.Date_Death_Month_Number;			row3.Date_Death_Year_Number = row2.Date_Death_Year_Number;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		



	Comparablerow3Struct arrayRowtSortRow_2_SortOut = new Comparablerow3Struct();

	arrayRowtSortRow_2_SortOut._hash_ipp = row3._hash_ipp;
	arrayRowtSortRow_2_SortOut.IPP = row3.IPP;
	arrayRowtSortRow_2_SortOut.NAME = row3.NAME;
	arrayRowtSortRow_2_SortOut.SURNAME = row3.SURNAME;
	arrayRowtSortRow_2_SortOut.NAME_SURNAME = row3.NAME_SURNAME;
	arrayRowtSortRow_2_SortOut.SEX = row3.SEX;
	arrayRowtSortRow_2_SortOut.DOB = row3.DOB;
	arrayRowtSortRow_2_SortOut.DIAGNOSTIC = row3.DIAGNOSTIC;
	arrayRowtSortRow_2_SortOut.DIAGPROBA = row3.DIAGPROBA;
	arrayRowtSortRow_2_SortOut.DATEDIAG = row3.DATEDIAG;
	arrayRowtSortRow_2_SortOut.Date_Diagnostic_Full_String = row3.Date_Diagnostic_Full_String;
	arrayRowtSortRow_2_SortOut.Date_Diagnostic_MonthYear = row3.Date_Diagnostic_MonthYear;
	arrayRowtSortRow_2_SortOut.Date_Diagnostic_Month_Number = row3.Date_Diagnostic_Month_Number;
	arrayRowtSortRow_2_SortOut.Date_Diagnostic_Month_Name = row3.Date_Diagnostic_Month_Name;
	arrayRowtSortRow_2_SortOut.Date_Diagnostic_Year_Number = row3.Date_Diagnostic_Year_Number;
	arrayRowtSortRow_2_SortOut.Date_FS = row3.Date_FS;
	arrayRowtSortRow_2_SortOut.Date_FS_Full_String = row3.Date_FS_Full_String;
	arrayRowtSortRow_2_SortOut.Date_FS_MonthYear = row3.Date_FS_MonthYear;
	arrayRowtSortRow_2_SortOut.Date_FS_Month_Number = row3.Date_FS_Month_Number;
	arrayRowtSortRow_2_SortOut.Date_FS_Month_Name = row3.Date_FS_Month_Name;
	arrayRowtSortRow_2_SortOut.Date_FS_Year_Number = row3.Date_FS_Year_Number;
	arrayRowtSortRow_2_SortOut.DATDRILU_L1_Val = row3.DATDRILU_L1_Val;
	arrayRowtSortRow_2_SortOut.LIEUDEB = row3.LIEUDEB;
	arrayRowtSortRow_2_SortOut.Date_Death_Full = row3.Date_Death_Full;
	arrayRowtSortRow_2_SortOut.Date_Death_String = row3.Date_Death_String;
	arrayRowtSortRow_2_SortOut.Date_Death_MonthYear = row3.Date_Death_MonthYear;
	arrayRowtSortRow_2_SortOut.Date_Death_Month_Name = row3.Date_Death_Month_Name;
	arrayRowtSortRow_2_SortOut.Date_Death_Month_Number = row3.Date_Death_Month_Number;
	arrayRowtSortRow_2_SortOut.Date_Death_Year_Number = row3.Date_Death_Year_Number;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

row3Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow3Struct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.CNX_POSTGRES_DWH_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "dim_patient";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "dim_patient";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+context.CNX_POSTGRES_DWH_Server+":"+context.CNX_POSTGRES_DWH_Port+"/"+context.CNX_POSTGRES_DWH_Database;
    dbUser_tDBOutput_1 = context.CNX_POSTGRES_DWH_Login;

	final String decryptedPassword_tDBOutput_1 = context.CNX_POSTGRES_DWH_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"ipp_hash\",\"sex\",\"birthdate\",\"diagnostic\",\"diagnostic_probability\",\"date_diagnostic\",\"date_diagnostic_full_string\",\"date_diagnostic_monthyear\",\"date_diagnostic_month_number\",\"date_diagnostic_month_name\",\"date_diagnostic_year_number\",\"date_fs\",\"date_fs_full_string\",\"date_fs_monthyear\",\"date_fs_month_number\",\"date_fs_month_name\",\"date_fs_year_number\",\"date_riluz_full\",\"date_riluz_full_string\",\"date_riluz_monthyear\",\"date_riluz_month_name\",\"date_riluz_month_number\",\"date_riluz_year_number\",\"riluz_on\",\"startplace_fs\",\"date_death_full\",\"date_death_string\",\"date_death_monthyear\",\"date_death_month_name\",\"date_death_month_number\",\"date_death_year_number\",\"ipp\",\"name\",\"surname\",\"name_surname\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String date_out_limit;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	
		int tos_count_tSortRow_2_SortIn = 0;
		


row3Struct[] array_tSortRow_2_SortIn = (row3Struct[]) globalMap.remove("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

row3Struct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row4._hash_ipp = current_tSortRow_2_SortIn._hash_ipp;
	row4.IPP = current_tSortRow_2_SortIn.IPP;
	row4.NAME = current_tSortRow_2_SortIn.NAME;
	row4.SURNAME = current_tSortRow_2_SortIn.SURNAME;
	row4.NAME_SURNAME = current_tSortRow_2_SortIn.NAME_SURNAME;
	row4.SEX = current_tSortRow_2_SortIn.SEX;
	row4.DOB = current_tSortRow_2_SortIn.DOB;
	row4.DIAGNOSTIC = current_tSortRow_2_SortIn.DIAGNOSTIC;
	row4.DIAGPROBA = current_tSortRow_2_SortIn.DIAGPROBA;
	row4.DATEDIAG = current_tSortRow_2_SortIn.DATEDIAG;
	row4.Date_Diagnostic_Full_String = current_tSortRow_2_SortIn.Date_Diagnostic_Full_String;
	row4.Date_Diagnostic_MonthYear = current_tSortRow_2_SortIn.Date_Diagnostic_MonthYear;
	row4.Date_Diagnostic_Month_Number = current_tSortRow_2_SortIn.Date_Diagnostic_Month_Number;
	row4.Date_Diagnostic_Month_Name = current_tSortRow_2_SortIn.Date_Diagnostic_Month_Name;
	row4.Date_Diagnostic_Year_Number = current_tSortRow_2_SortIn.Date_Diagnostic_Year_Number;
	row4.Date_FS = current_tSortRow_2_SortIn.Date_FS;
	row4.Date_FS_Full_String = current_tSortRow_2_SortIn.Date_FS_Full_String;
	row4.Date_FS_MonthYear = current_tSortRow_2_SortIn.Date_FS_MonthYear;
	row4.Date_FS_Month_Number = current_tSortRow_2_SortIn.Date_FS_Month_Number;
	row4.Date_FS_Month_Name = current_tSortRow_2_SortIn.Date_FS_Month_Name;
	row4.Date_FS_Year_Number = current_tSortRow_2_SortIn.Date_FS_Year_Number;
	row4.DATDRILU_L1_Val = current_tSortRow_2_SortIn.DATDRILU_L1_Val;
	row4.LIEUDEB = current_tSortRow_2_SortIn.LIEUDEB;
	row4.Date_Death_Full = current_tSortRow_2_SortIn.Date_Death_Full;
	row4.Date_Death_String = current_tSortRow_2_SortIn.Date_Death_String;
	row4.Date_Death_MonthYear = current_tSortRow_2_SortIn.Date_Death_MonthYear;
	row4.Date_Death_Month_Name = current_tSortRow_2_SortIn.Date_Death_Month_Name;
	row4.Date_Death_Month_Number = current_tSortRow_2_SortIn.Date_Death_Month_Number;
	row4.Date_Death_Year_Number = current_tSortRow_2_SortIn.Date_Death_Year_Number;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.date_out_limit = "01/01/2050" ;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp._hash_ipp = row4._hash_ipp ;
out2_tmp.SEX = row4.SEX ;
out2_tmp.DOB = row4.DOB ;
out2_tmp.DIAGNOSTIC = row4.DIAGNOSTIC ;
out2_tmp.DIAGPROBA = row4.DIAGPROBA ;
out2_tmp.DATEDIAG = row4.DATEDIAG ;
out2_tmp.Date_Diagnostic_Full_String = row4.Date_Diagnostic_Full_String ;
out2_tmp.Date_Diagnostic_MonthYear = row4.Date_Diagnostic_MonthYear ;
out2_tmp.Date_Diagnostic_Month_Number = row4.Date_Diagnostic_Month_Number ;
out2_tmp.Date_Diagnostic_Month_Name = row4.Date_Diagnostic_Month_Name ;
out2_tmp.Date_Diagnostic_Year_Number = row4.Date_Diagnostic_Year_Number ;
out2_tmp.Date_FS = row4.Date_FS ;
out2_tmp.Date_FS_Full_String = row4.Date_FS_Full_String ;
out2_tmp.Date_FS_MonthYear = row4.Date_FS_MonthYear ;
out2_tmp.Date_FS_Month_Number = row4.Date_FS_Month_Number ;
out2_tmp.Date_FS_Month_Name = row4.Date_FS_Month_Name ;
out2_tmp.Date_FS_Year_Number = row4.Date_FS_Year_Number ;
out2_tmp.DATDRILU_L1_Val = TalendDate.formatDate("dd/MM/yyyy", row4.DATDRILU_L1_Val).equals(Var.date_out_limit)?"ND":
TalendDate.formatDate("dd/MM/yyyy",row4.DATDRILU_L1_Val) ;
out2_tmp.Riluz_ON = TalendDate.formatDate("dd/MM/yyyy", row4.DATDRILU_L1_Val).equals(Var.date_out_limit)?"Non":
"Oui" ;
out2_tmp.LIEUDEB = row4.LIEUDEB ;
out2_tmp.Date_Death_Full = row4.Date_Death_Full ;
out2_tmp.Date_Death_String = row4.Date_Death_String ;
out2_tmp.Date_Death_MonthYear = row4.Date_Death_MonthYear ;
out2_tmp.Date_Death_Month_Name = row4.Date_Death_Month_Name ;
out2_tmp.Date_Death_Month_Number = row4.Date_Death_Month_Number ;
out2_tmp.Date_Death_Year_Number = row4.Date_Death_Year_Number ;
out2_tmp.IPP = row4.IPP ;
out2_tmp.NAME = row4.NAME ;
out2_tmp.SURNAME = row4.SURNAME ;
out2_tmp.NAME_SURNAME = row4.NAME_SURNAME ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp._hash_ipp = out2._hash_ipp ;
out3_tmp.SEX = out2.SEX ;
out3_tmp.DOB = out2.DOB ;
out3_tmp.DIAGNOSTIC = out2.DIAGNOSTIC ;
out3_tmp.DIAGPROBA = out2.DIAGPROBA ;
out3_tmp.DATEDIAG = out2.DATEDIAG ;
out3_tmp.Date_Diagnostic_Full_String = out2.Date_Diagnostic_Full_String ;
out3_tmp.Date_Diagnostic_MonthYear = out2.Date_Diagnostic_MonthYear ;
out3_tmp.Date_Diagnostic_Month_Number = out2.Date_Diagnostic_Month_Number ;
out3_tmp.Date_Diagnostic_Month_Name = out2.Date_Diagnostic_Month_Name ;
out3_tmp.Date_Diagnostic_Year_Number = out2.Date_Diagnostic_Year_Number ;
out3_tmp.Date_FS = out2.Date_FS ;
out3_tmp.Date_FS_Full_String = out2.Date_FS_Full_String ;
out3_tmp.Date_FS_MonthYear = out2.Date_FS_MonthYear ;
out3_tmp.Date_FS_Month_Number = out2.Date_FS_Month_Number ;
out3_tmp.Date_FS_Month_Name = out2.Date_FS_Month_Name ;
out3_tmp.Date_FS_Year_Number = out2.Date_FS_Year_Number ;
out3_tmp.DATDRILU_L1_Val = out2.DATDRILU_L1_Val ;
out3_tmp.Date_Riluz_Full_String = TalendDate.isDate(out2.DATDRILU_L1_Val,"dd/MM/yyyy")?TalendDate.formatDate("ddMMyyyy",TalendDate.parseDate("dd/MM/yyyy",out2.DATDRILU_L1_Val)):"ND" ;
out3_tmp.Date_Riluz_MonthYear = TalendDate.isDate(out2.DATDRILU_L1_Val, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",out2.DATDRILU_L1_Val)) :"ND" ;
out3_tmp.Date_Riluz_Month_Name = DateHandling.CheckMonth(out2.DATDRILU_L1_Val, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(out2.DATDRILU_L1_Val, "/"))):"ND" ;
out3_tmp.Date_Riluz_Month_Number = DateHandling.returnMonth(out2.DATDRILU_L1_Val,"/") ;
out3_tmp.Date_Riluz_Year_Number = DateHandling.returnYear(out2.DATDRILU_L1_Val, "/") ;
out3_tmp.Riluz_ON = out2.Riluz_ON ;
out3_tmp.LIEUDEB = out2.LIEUDEB ;
out3_tmp.Date_Death_Full = out2.Date_Death_Full ;
out3_tmp.Date_Death_String = out2.Date_Death_String ;
out3_tmp.Date_Death_MonthYear = out2.Date_Death_MonthYear ;
out3_tmp.Date_Death_Month_Name = out2.Date_Death_Month_Name ;
out3_tmp.Date_Death_Month_Number = out2.Date_Death_Month_Number ;
out3_tmp.Date_Death_Year_Number = out2.Date_Death_Year_Number ;
out3_tmp.IPP = out2.IPP ;
out3_tmp.NAME = out2.NAME ;
out3_tmp.SURNAME = out2.SURNAME ;
out3_tmp.NAME_SURNAME = out2.NAME_SURNAME ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(out3._hash_ipp == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out3._hash_ipp);
}

                    if(out3.SEX == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out3.SEX);
}

                    if(out3.DOB == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out3.DOB);
}

                    if(out3.DIAGNOSTIC == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out3.DIAGNOSTIC);
}

                    if(out3.DIAGPROBA == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out3.DIAGPROBA);
}

                    if(out3.DATEDIAG == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out3.DATEDIAG);
}

                    if(out3.Date_Diagnostic_Full_String == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, out3.Date_Diagnostic_Full_String);
}

                    if(out3.Date_Diagnostic_MonthYear == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, out3.Date_Diagnostic_MonthYear);
}

                    if(out3.Date_Diagnostic_Month_Number == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, out3.Date_Diagnostic_Month_Number);
}

                    if(out3.Date_Diagnostic_Month_Name == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, out3.Date_Diagnostic_Month_Name);
}

                    if(out3.Date_Diagnostic_Year_Number == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, out3.Date_Diagnostic_Year_Number);
}

                    if(out3.Date_FS == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, out3.Date_FS);
}

                    if(out3.Date_FS_Full_String == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, out3.Date_FS_Full_String);
}

                    if(out3.Date_FS_MonthYear == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, out3.Date_FS_MonthYear);
}

                    if(out3.Date_FS_Month_Number == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, out3.Date_FS_Month_Number);
}

                    if(out3.Date_FS_Month_Name == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, out3.Date_FS_Month_Name);
}

                    if(out3.Date_FS_Year_Number == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, out3.Date_FS_Year_Number);
}

                    if(out3.DATDRILU_L1_Val == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, out3.DATDRILU_L1_Val);
}

                    if(out3.Date_Riluz_Full_String == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, out3.Date_Riluz_Full_String);
}

                    if(out3.Date_Riluz_MonthYear == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, out3.Date_Riluz_MonthYear);
}

                    if(out3.Date_Riluz_Month_Name == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, out3.Date_Riluz_Month_Name);
}

                    if(out3.Date_Riluz_Month_Number == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, out3.Date_Riluz_Month_Number);
}

                    if(out3.Date_Riluz_Year_Number == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, out3.Date_Riluz_Year_Number);
}

                    if(out3.Riluz_ON == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, out3.Riluz_ON);
}

                    if(out3.LIEUDEB == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, out3.LIEUDEB);
}

                    if(out3.Date_Death_Full == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, out3.Date_Death_Full);
}

                    if(out3.Date_Death_String == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, out3.Date_Death_String);
}

                    if(out3.Date_Death_MonthYear == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, out3.Date_Death_MonthYear);
}

                    if(out3.Date_Death_Month_Name == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, out3.Date_Death_Month_Name);
}

                    if(out3.Date_Death_Month_Number == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, out3.Date_Death_Month_Number);
}

                    if(out3.Date_Death_Year_Number == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, out3.Date_Death_Year_Number);
}

                    if(out3.IPP == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, out3.IPP);
}

                    if(out3.NAME == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, out3.NAME);
}

                    if(out3.SURNAME == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, out3.SURNAME);
}

                    if(out3.NAME_SURNAME == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, out3.NAME_SURNAME);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */



























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_LKP_PATIENTS"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */



























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class LKP_PATIENTSStruct implements routines.system.IPersistableComparableLookupRow<LKP_PATIENTSStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _IPP_HASH;

				public String get_IPP_HASH () {
					return this._IPP_HASH;
				}
				
			    public String DATEDCD_VALUE;

				public String getDATEDCD_VALUE () {
					return this.DATEDCD_VALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this._IPP_HASH == null) ? 0 : this._IPP_HASH.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final LKP_PATIENTSStruct other = (LKP_PATIENTSStruct) obj;
		
						if (this._IPP_HASH == null) {
							if (other._IPP_HASH != null)
								return false;
						
						} else if (!this._IPP_HASH.equals(other._IPP_HASH))
						
							return false;
					

		return true;
    }

	public void copyDataTo(LKP_PATIENTSStruct other) {

		other._IPP_HASH = this._IPP_HASH;
	            other.DATEDCD_VALUE = this.DATEDCD_VALUE;
	            
	}

	public void copyKeysDataTo(LKP_PATIENTSStruct other) {

		other._IPP_HASH = this._IPP_HASH;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._IPP_HASH = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._IPP_HASH,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DATEDCD_VALUE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DATEDCD_VALUE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_IPP_HASH="+_IPP_HASH);
		sb.append(",DATEDCD_VALUE="+DATEDCD_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(LKP_PATIENTSStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this._IPP_HASH, other._IPP_HASH);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_PATIENT = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_PATIENT = new byte[0];

	
			    public String _IPP_HASH;

				public String get_IPP_HASH () {
					return this._IPP_HASH;
				}
				
			    public Integer SEX;

				public Integer getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATEDCD;

				public String getDATEDCD () {
					return this.DATEDCD;
				}
				
			    public String DATEDCD_VALUE;

				public String getDATEDCD_VALUE () {
					return this.DATEDCD_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_PATIENT.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_PATIENT.length == 0) {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_PATIENT = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_PATIENT, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_PATIENT) {

        	try {

        		int length = 0;
		
					this._IPP_HASH = readString(dis);
					
						this.SEX = readInteger(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATEDCD = readString(dis);
					
					this.DATEDCD_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._IPP_HASH,dos);
					
					// Integer
				
						writeInteger(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATEDCD,dos);
					
					// String
				
						writeString(this.DATEDCD_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_IPP_HASH="+_IPP_HASH);
		sb.append(",SEX="+String.valueOf(SEX));
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATEDCD="+DATEDCD);
		sb.append(",DATEDCD_VALUE="+DATEDCD_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
LKP_PATIENTSStruct LKP_PATIENTS = new LKP_PATIENTSStruct();





	
	/**
	 * [tAdvancedHash_LKP_PATIENTS begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_LKP_PATIENTS", false);
		start_Hash.put("tAdvancedHash_LKP_PATIENTS", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("LKP_PATIENTS" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_LKP_PATIENTS = 0;
		

			   		// connection name:LKP_PATIENTS
			   		// source node:tMap_4 - inputs:(row5) outputs:(LKP_PATIENTS,LKP_PATIENTS) | target node:tAdvancedHash_LKP_PATIENTS - inputs:(LKP_PATIENTS) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,LKP_PATIENTS) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_LKP_PATIENTS = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<LKP_PATIENTSStruct> tHash_Lookup_LKP_PATIENTS =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<LKP_PATIENTSStruct>getLookup(matchingModeEnum_LKP_PATIENTS);
	   						   
		   	   	   globalMap.put("tHash_Lookup_LKP_PATIENTS", tHash_Lookup_LKP_PATIENTS);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_LKP_PATIENTS begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
LKP_PATIENTSStruct LKP_PATIENTS_tmp = new LKP_PATIENTSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_DECES_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)context.EXCEL_CLIN_DECES_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)context.EXCEL_CLIN_DECES_RowSeparator).length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)context.EXCEL_CLIN_DECES_RowSeparator).toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */context.EXCEL_CLIN_DECES_File/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], context.EXCEL_CLIN_DECES_Encoding);
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),context.EXCEL_CLIN_DECES_Encoding)), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < context.EXCEL_CLIN_DECES_Header; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], context.EXCEL_CLIN_DECES_Encoding);
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),context.EXCEL_CLIN_DECES_Encoding)), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < context.EXCEL_CLIN_DECES_Header;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row5 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row5 = new row5Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_DECES_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)context.EXCEL_CLIN_DECES_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row5._IPP_HASH = null;
					
							row5.SEX = null;
					
							row5.DOB = null;
					
							row5.DIAGPROBA = null;
					
							row5.DATEDIAG = null;
					
							row5.FIRSTSYMPTOM = null;
					
							row5.LIEUDEB = null;
					
							row5.AGE_DEBUT = null;
					
							row5.DATEDCD = null;
					
							row5.DATEDCD_VALUE = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5._IPP_HASH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5._IPP_HASH = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row5.SEX = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SEX", "row5", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row5.SEX = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row5.SEX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.DOB = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.DOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.DIAGPROBA = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.DIAGPROBA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.DATEDIAG = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.DATEDIAG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.FIRSTSYMPTOM = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.FIRSTSYMPTOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.LIEUDEB = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.LIEUDEB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.AGE_DEBUT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.AGE_DEBUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.DATEDCD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.DATEDCD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row5.DATEDCD_VALUE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row5.DATEDCD_VALUE = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row5 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

LKP_PATIENTS = null;


// # Output table : 'LKP_PATIENTS'
// # Filter conditions 
if( 

row5.DATEDCD_VALUE !=null && 
! row5.DATEDCD_VALUE.equals("")

 ) {
LKP_PATIENTS_tmp._IPP_HASH = row5._IPP_HASH ;
LKP_PATIENTS_tmp.DATEDCD_VALUE = row5.DATEDCD_VALUE ;
LKP_PATIENTS = LKP_PATIENTS_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "LKP_PATIENTS"
if(LKP_PATIENTS != null) { 



	
	/**
	 * [tAdvancedHash_LKP_PATIENTS main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	

			//LKP_PATIENTS
			//LKP_PATIENTS


			
				if(execStat){
					runStat.updateStatOnConnection("LKP_PATIENTS"+iterateId,1, 1);
				} 
			

		


			   
			   

					LKP_PATIENTSStruct LKP_PATIENTS_HashRow = new LKP_PATIENTSStruct();
		   	   	   
				
				LKP_PATIENTS_HashRow._IPP_HASH = LKP_PATIENTS._IPP_HASH;
				
				LKP_PATIENTS_HashRow.DATEDCD_VALUE = LKP_PATIENTS.DATEDCD_VALUE;
				
			tHash_Lookup_LKP_PATIENTS.put(LKP_PATIENTS_HashRow);
			
            




 


	tos_count_tAdvancedHash_LKP_PATIENTS++;

/**
 * [tAdvancedHash_LKP_PATIENTS main ] stop
 */
	
	/**
	 * [tAdvancedHash_LKP_PATIENTS process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	

 



/**
 * [tAdvancedHash_LKP_PATIENTS process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_LKP_PATIENTS process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	

 



/**
 * [tAdvancedHash_LKP_PATIENTS process_data_end ] stop
 */

} // End of branch "LKP_PATIENTS"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_LKP_PATIENTS end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	

tHash_Lookup_LKP_PATIENTS.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("LKP_PATIENTS"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_LKP_PATIENTS", true);
end_Hash.put("tAdvancedHash_LKP_PATIENTS", System.currentTimeMillis());




/**
 * [tAdvancedHash_LKP_PATIENTS end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_LKP_PATIENTS finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_LKP_PATIENTS";

	

 



/**
 * [tAdvancedHash_LKP_PATIENTS finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DIM_PATIENT DIM_PATIENTClass = new DIM_PATIENT();

        int exitCode = DIM_PATIENTClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DIM_PATIENT.class.getClassLoader().getResourceAsStream("stagepca/dim_patient_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DIM_PATIENT.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("EXCEL_CLIN_1_RILUZ_Encoding", "id_String");
				
                context.EXCEL_CLIN_1_RILUZ_Encoding=(String) context.getProperty("EXCEL_CLIN_1_RILUZ_Encoding");
				    context.setContextType("EXCEL_CLIN_1_RILUZ_FieldSeparator", "id_String");
				
                context.EXCEL_CLIN_1_RILUZ_FieldSeparator=(String) context.getProperty("EXCEL_CLIN_1_RILUZ_FieldSeparator");
				    context.setContextType("EXCEL_CLIN_1_RILUZ_File", "id_File");
				
                context.EXCEL_CLIN_1_RILUZ_File=(String) context.getProperty("EXCEL_CLIN_1_RILUZ_File");
				    context.setContextType("EXCEL_CLIN_1_RILUZ_Header", "id_Integer");
				
             try{
                 context.EXCEL_CLIN_1_RILUZ_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_CLIN_1_RILUZ_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_CLIN_1_RILUZ_Header", e.getMessage()));
                 context.EXCEL_CLIN_1_RILUZ_Header=null;
              }
				    context.setContextType("EXCEL_CLIN_1_RILUZ_RowSeparator", "id_String");
				
                context.EXCEL_CLIN_1_RILUZ_RowSeparator=(String) context.getProperty("EXCEL_CLIN_1_RILUZ_RowSeparator");
				    context.setContextType("EXCEL_CLIN_DECES_Encoding", "id_String");
				
                context.EXCEL_CLIN_DECES_Encoding=(String) context.getProperty("EXCEL_CLIN_DECES_Encoding");
				    context.setContextType("EXCEL_CLIN_DECES_FieldSeparator", "id_String");
				
                context.EXCEL_CLIN_DECES_FieldSeparator=(String) context.getProperty("EXCEL_CLIN_DECES_FieldSeparator");
				    context.setContextType("EXCEL_CLIN_DECES_File", "id_File");
				
                context.EXCEL_CLIN_DECES_File=(String) context.getProperty("EXCEL_CLIN_DECES_File");
				    context.setContextType("EXCEL_CLIN_DECES_Header", "id_Integer");
				
             try{
                 context.EXCEL_CLIN_DECES_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_CLIN_DECES_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_CLIN_DECES_Header", e.getMessage()));
                 context.EXCEL_CLIN_DECES_Header=null;
              }
				    context.setContextType("EXCEL_CLIN_DECES_RowSeparator", "id_String");
				
                context.EXCEL_CLIN_DECES_RowSeparator=(String) context.getProperty("EXCEL_CLIN_DECES_RowSeparator");
				    context.setContextType("CNX_POSTGRES_DWH_Database", "id_String");
				
                context.CNX_POSTGRES_DWH_Database=(String) context.getProperty("CNX_POSTGRES_DWH_Database");
				    context.setContextType("CNX_POSTGRES_DWH_Login", "id_String");
				
                context.CNX_POSTGRES_DWH_Login=(String) context.getProperty("CNX_POSTGRES_DWH_Login");
				    context.setContextType("CNX_POSTGRES_DWH_Password", "id_Password");
				
            		String pwd_CNX_POSTGRES_DWH_Password_value = context.getProperty("CNX_POSTGRES_DWH_Password");
            		context.CNX_POSTGRES_DWH_Password = null;
            		if(pwd_CNX_POSTGRES_DWH_Password_value!=null) {
            			if(context_param.containsKey("CNX_POSTGRES_DWH_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CNX_POSTGRES_DWH_Password = pwd_CNX_POSTGRES_DWH_Password_value;
            			} else if (!pwd_CNX_POSTGRES_DWH_Password_value.isEmpty()) {
            				try {
            					context.CNX_POSTGRES_DWH_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CNX_POSTGRES_DWH_Password_value);
            					context.put("CNX_POSTGRES_DWH_Password",context.CNX_POSTGRES_DWH_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CNX_POSTGRES_DWH_Port", "id_String");
				
                context.CNX_POSTGRES_DWH_Port=(String) context.getProperty("CNX_POSTGRES_DWH_Port");
				    context.setContextType("CNX_POSTGRES_DWH_Schema", "id_String");
				
                context.CNX_POSTGRES_DWH_Schema=(String) context.getProperty("CNX_POSTGRES_DWH_Schema");
				    context.setContextType("CNX_POSTGRES_DWH_Server", "id_String");
				
                context.CNX_POSTGRES_DWH_Server=(String) context.getProperty("CNX_POSTGRES_DWH_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EXCEL_CLIN_1_RILUZ_Encoding")) {
                context.EXCEL_CLIN_1_RILUZ_Encoding = (String) parentContextMap.get("EXCEL_CLIN_1_RILUZ_Encoding");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_RILUZ_FieldSeparator")) {
                context.EXCEL_CLIN_1_RILUZ_FieldSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_RILUZ_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_RILUZ_File")) {
                context.EXCEL_CLIN_1_RILUZ_File = (String) parentContextMap.get("EXCEL_CLIN_1_RILUZ_File");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_RILUZ_Header")) {
                context.EXCEL_CLIN_1_RILUZ_Header = (Integer) parentContextMap.get("EXCEL_CLIN_1_RILUZ_Header");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_RILUZ_RowSeparator")) {
                context.EXCEL_CLIN_1_RILUZ_RowSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_RILUZ_RowSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_DECES_Encoding")) {
                context.EXCEL_CLIN_DECES_Encoding = (String) parentContextMap.get("EXCEL_CLIN_DECES_Encoding");
            }if (parentContextMap.containsKey("EXCEL_CLIN_DECES_FieldSeparator")) {
                context.EXCEL_CLIN_DECES_FieldSeparator = (String) parentContextMap.get("EXCEL_CLIN_DECES_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_DECES_File")) {
                context.EXCEL_CLIN_DECES_File = (String) parentContextMap.get("EXCEL_CLIN_DECES_File");
            }if (parentContextMap.containsKey("EXCEL_CLIN_DECES_Header")) {
                context.EXCEL_CLIN_DECES_Header = (Integer) parentContextMap.get("EXCEL_CLIN_DECES_Header");
            }if (parentContextMap.containsKey("EXCEL_CLIN_DECES_RowSeparator")) {
                context.EXCEL_CLIN_DECES_RowSeparator = (String) parentContextMap.get("EXCEL_CLIN_DECES_RowSeparator");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Database")) {
                context.CNX_POSTGRES_DWH_Database = (String) parentContextMap.get("CNX_POSTGRES_DWH_Database");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Login")) {
                context.CNX_POSTGRES_DWH_Login = (String) parentContextMap.get("CNX_POSTGRES_DWH_Login");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Password")) {
                context.CNX_POSTGRES_DWH_Password = (java.lang.String) parentContextMap.get("CNX_POSTGRES_DWH_Password");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Port")) {
                context.CNX_POSTGRES_DWH_Port = (String) parentContextMap.get("CNX_POSTGRES_DWH_Port");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Schema")) {
                context.CNX_POSTGRES_DWH_Schema = (String) parentContextMap.get("CNX_POSTGRES_DWH_Schema");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Server")) {
                context.CNX_POSTGRES_DWH_Server = (String) parentContextMap.get("CNX_POSTGRES_DWH_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("CNX_POSTGRES_DWH_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DIM_PATIENT");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     265186 characters generated by Talend Open Studio for Data Integration 
 *     on the January 20, 2020 7:41:18 AM CET
 ************************************************************************************************/