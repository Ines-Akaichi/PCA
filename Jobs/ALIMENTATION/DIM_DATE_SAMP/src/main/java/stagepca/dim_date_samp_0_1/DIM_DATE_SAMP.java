// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.dim_date_samp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.DateHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DIM_DATE_SAMP Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class DIM_DATE_SAMP implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EXCEL_BIOLOGICAL_Encoding != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_Encoding", EXCEL_BIOLOGICAL_Encoding.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_FieldSeparator != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_FieldSeparator", EXCEL_BIOLOGICAL_FieldSeparator.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_File != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_File", EXCEL_BIOLOGICAL_File.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_Header != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_Header", EXCEL_BIOLOGICAL_Header.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_RowSeparator != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_RowSeparator", EXCEL_BIOLOGICAL_RowSeparator.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Database != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Database", CNX_POSTGRES_DWH_Database.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Login != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Login", CNX_POSTGRES_DWH_Login.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Password != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Password", CNX_POSTGRES_DWH_Password.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Port != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Port", CNX_POSTGRES_DWH_Port.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Schema != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Schema", CNX_POSTGRES_DWH_Schema.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Server != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Server", CNX_POSTGRES_DWH_Server.toString());
				
			}
			
		}

public String EXCEL_BIOLOGICAL_Encoding;
public String getEXCEL_BIOLOGICAL_Encoding(){
	return this.EXCEL_BIOLOGICAL_Encoding;
}
public String EXCEL_BIOLOGICAL_FieldSeparator;
public String getEXCEL_BIOLOGICAL_FieldSeparator(){
	return this.EXCEL_BIOLOGICAL_FieldSeparator;
}
		public String EXCEL_BIOLOGICAL_File;
		public String getEXCEL_BIOLOGICAL_File(){
			return this.EXCEL_BIOLOGICAL_File;
		}
		
public Integer EXCEL_BIOLOGICAL_Header;
public Integer getEXCEL_BIOLOGICAL_Header(){
	return this.EXCEL_BIOLOGICAL_Header;
}
public String EXCEL_BIOLOGICAL_RowSeparator;
public String getEXCEL_BIOLOGICAL_RowSeparator(){
	return this.EXCEL_BIOLOGICAL_RowSeparator;
}
public String CNX_POSTGRES_DWH_Database;
public String getCNX_POSTGRES_DWH_Database(){
	return this.CNX_POSTGRES_DWH_Database;
}
public String CNX_POSTGRES_DWH_Login;
public String getCNX_POSTGRES_DWH_Login(){
	return this.CNX_POSTGRES_DWH_Login;
}
public java.lang.String CNX_POSTGRES_DWH_Password;
public java.lang.String getCNX_POSTGRES_DWH_Password(){
	return this.CNX_POSTGRES_DWH_Password;
}
public String CNX_POSTGRES_DWH_Port;
public String getCNX_POSTGRES_DWH_Port(){
	return this.CNX_POSTGRES_DWH_Port;
}
public String CNX_POSTGRES_DWH_Schema;
public String getCNX_POSTGRES_DWH_Schema(){
	return this.CNX_POSTGRES_DWH_Schema;
}
public String CNX_POSTGRES_DWH_Server;
public String getCNX_POSTGRES_DWH_Server(){
	return this.CNX_POSTGRES_DWH_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DIM_DATE_SAMP";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DIM_DATE_SAMP.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DIM_DATE_SAMP.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[0];

	
			    public String Date_Sampling_Full;

				public String getDate_Sampling_Full () {
					return this.Date_Sampling_Full;
				}
				
			    public String Date_Sampling_Full_String;

				public String getDate_Sampling_Full_String () {
					return this.Date_Sampling_Full_String;
				}
				
			    public String Date_Sampling_MonthYear;

				public String getDate_Sampling_MonthYear () {
					return this.Date_Sampling_MonthYear;
				}
				
			    public String Date_Sampling_Month_Number;

				public String getDate_Sampling_Month_Number () {
					return this.Date_Sampling_Month_Number;
				}
				
			    public String Date_Sampling_Month_Name;

				public String getDate_Sampling_Month_Name () {
					return this.Date_Sampling_Month_Name;
				}
				
			    public String Date_Sampling_Year_Number;

				public String getDate_Sampling_Year_Number () {
					return this.Date_Sampling_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_SAMP.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_SAMP.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP) {

        	try {

        		int length = 0;
		
					this.Date_Sampling_Full = readString(dis);
					
					this.Date_Sampling_Full_String = readString(dis);
					
					this.Date_Sampling_MonthYear = readString(dis);
					
					this.Date_Sampling_Month_Number = readString(dis);
					
					this.Date_Sampling_Month_Name = readString(dis);
					
					this.Date_Sampling_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_Sampling_Full,dos);
					
					// String
				
						writeString(this.Date_Sampling_Full_String,dos);
					
					// String
				
						writeString(this.Date_Sampling_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Sampling_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Sampling_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Sampling_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_Sampling_Full="+Date_Sampling_Full);
		sb.append(",Date_Sampling_Full_String="+Date_Sampling_Full_String);
		sb.append(",Date_Sampling_MonthYear="+Date_Sampling_MonthYear);
		sb.append(",Date_Sampling_Month_Number="+Date_Sampling_Month_Number);
		sb.append(",Date_Sampling_Month_Name="+Date_Sampling_Month_Name);
		sb.append(",Date_Sampling_Year_Number="+Date_Sampling_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[0];

	
			    public String Date_de_prelevement;

				public String getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_SAMP.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_SAMP.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP) {

        	try {

        		int length = 0;
		
					this.Date_de_prelevement = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_de_prelevement,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_de_prelevement="+Date_de_prelevement);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[0];

	
			    public String Date_de_prelevement;

				public String getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_SAMP.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_SAMP.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP) {

        	try {

        		int length = 0;
		
					this.Date_de_prelevement = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_de_prelevement,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_de_prelevement="+Date_de_prelevement);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[0];

	
			    public String IPP_HASH;

				public String getIPP_HASH () {
					return this.IPP_HASH;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public String Valeur_de_resultat_du_Sodium;

				public String getValeur_de_resultat_du_Sodium () {
					return this.Valeur_de_resultat_du_Sodium;
				}
				
			    public String Unite;

				public String getUnite () {
					return this.Unite;
				}
				
			    public String Valeur_de_resultat_du_Potassium;

				public String getValeur_de_resultat_du_Potassium () {
					return this.Valeur_de_resultat_du_Potassium;
				}
				
			    public String Unite_1;

				public String getUnite_1 () {
					return this.Unite_1;
				}
				
			    public String Valeur_de_resultat_du_Chlorures;

				public String getValeur_de_resultat_du_Chlorures () {
					return this.Valeur_de_resultat_du_Chlorures;
				}
				
			    public String Unite_2;

				public String getUnite_2 () {
					return this.Unite_2;
				}
				
			    public String Valeur_de_resultat_du_Albumine;

				public String getValeur_de_resultat_du_Albumine () {
					return this.Valeur_de_resultat_du_Albumine;
				}
				
			    public String Unite_3;

				public String getUnite_3 () {
					return this.Unite_3;
				}
				
			    public String Valeur_de_resultat_du_Calcium;

				public String getValeur_de_resultat_du_Calcium () {
					return this.Valeur_de_resultat_du_Calcium;
				}
				
			    public String Unite_4;

				public String getUnite_4 () {
					return this.Unite_4;
				}
				
			    public String Valeur_de_resultat_du_Uree;

				public String getValeur_de_resultat_du_Uree () {
					return this.Valeur_de_resultat_du_Uree;
				}
				
			    public String Unite_5;

				public String getUnite_5 () {
					return this.Unite_5;
				}
				
			    public String Valeur_de_resultat_du_Glucose;

				public String getValeur_de_resultat_du_Glucose () {
					return this.Valeur_de_resultat_du_Glucose;
				}
				
			    public String Unite_6;

				public String getUnite_6 () {
					return this.Unite_6;
				}
				
			    public String Valeur_de_resultat_du_Creatine_kinase;

				public String getValeur_de_resultat_du_Creatine_kinase () {
					return this.Valeur_de_resultat_du_Creatine_kinase;
				}
				
			    public String Unite_7;

				public String getUnite_7 () {
					return this.Unite_7;
				}
				
			    public String Valeur_de_resultat_du_Beta_2_microglobuline;

				public String getValeur_de_resultat_du_Beta_2_microglobuline () {
					return this.Valeur_de_resultat_du_Beta_2_microglobuline;
				}
				
			    public String Unite_8;

				public String getUnite_8 () {
					return this.Unite_8;
				}
				
			    public String Valeur_de_resultat_du_Creatinine;

				public String getValeur_de_resultat_du_Creatinine () {
					return this.Valeur_de_resultat_du_Creatinine;
				}
				
			    public String Unite_9;

				public String getUnite_9 () {
					return this.Unite_9;
				}
				
			    public String Valeur_de_resultat_du_LDH;

				public String getValeur_de_resultat_du_LDH () {
					return this.Valeur_de_resultat_du_LDH;
				}
				
			    public String Unite_10;

				public String getUnite_10 () {
					return this.Unite_10;
				}
				
			    public String Valeur_de_resultat_du_ASAT;

				public String getValeur_de_resultat_du_ASAT () {
					return this.Valeur_de_resultat_du_ASAT;
				}
				
			    public String Unite_11;

				public String getUnite_11 () {
					return this.Unite_11;
				}
				
			    public String Valeur_de_resultat_du_ALAT;

				public String getValeur_de_resultat_du_ALAT () {
					return this.Valeur_de_resultat_du_ALAT;
				}
				
			    public String Unite_12;

				public String getUnite_12 () {
					return this.Unite_12;
				}
				
			    public String Valeur_de_resultat_du_Phosphatases_alc_;

				public String getValeur_de_resultat_du_Phosphatases_alc_ () {
					return this.Valeur_de_resultat_du_Phosphatases_alc_;
				}
				
			    public String Unite_13;

				public String getUnite_13 () {
					return this.Unite_13;
				}
				
			    public String Valeur_de_resultat_du_Gamma_GT;

				public String getValeur_de_resultat_du_Gamma_GT () {
					return this.Valeur_de_resultat_du_Gamma_GT;
				}
				
			    public String Unite_14;

				public String getUnite_14 () {
					return this.Unite_14;
				}
				
			    public String Valeur_de_resultat_du_Prealbumine;

				public String getValeur_de_resultat_du_Prealbumine () {
					return this.Valeur_de_resultat_du_Prealbumine;
				}
				
			    public String Unite_15;

				public String getUnite_15 () {
					return this.Unite_15;
				}
				
			    public String Valeur_de_resultat_du_Bilirubine_conjuguee;

				public String getValeur_de_resultat_du_Bilirubine_conjuguee () {
					return this.Valeur_de_resultat_du_Bilirubine_conjuguee;
				}
				
			    public String Unite_16;

				public String getUnite_16 () {
					return this.Unite_16;
				}
				
			    public String Valeur_de_resultat_du_Bilirubine_non_conjuguee;

				public String getValeur_de_resultat_du_Bilirubine_non_conjuguee () {
					return this.Valeur_de_resultat_du_Bilirubine_non_conjuguee;
				}
				
			    public String Unite_17;

				public String getUnite_17 () {
					return this.Unite_17;
				}
				
			    public String Valeur_de_resultat_du_Bilirubine_totale;

				public String getValeur_de_resultat_du_Bilirubine_totale () {
					return this.Valeur_de_resultat_du_Bilirubine_totale;
				}
				
			    public String Unite_18;

				public String getUnite_18 () {
					return this.Unite_18;
				}
				
			    public String Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_;

				public String getValeur_de_resultat_du_HDL_Cholesterol__mmol_L_ () {
					return this.Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_;
				}
				
			    public String Unite_19;

				public String getUnite_19 () {
					return this.Unite_19;
				}
				
			    public String Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_;

				public String getValeur_de_resultat_du_LDL_Cholesterol__mmol_L_ () {
					return this.Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_;
				}
				
			    public String Unite_20;

				public String getUnite_20 () {
					return this.Unite_20;
				}
				
			    public String Valeur_de_resultat_du_Fer;

				public String getValeur_de_resultat_du_Fer () {
					return this.Valeur_de_resultat_du_Fer;
				}
				
			    public String Unite_21;

				public String getUnite_21 () {
					return this.Unite_21;
				}
				
			    public String Valeur_de_resultat_du_Transferrine;

				public String getValeur_de_resultat_du_Transferrine () {
					return this.Valeur_de_resultat_du_Transferrine;
				}
				
			    public String Unite_22;

				public String getUnite_22 () {
					return this.Unite_22;
				}
				
			    public String Valeur_de_resultat_du_Capacite_tot__fixation_Trf;

				public String getValeur_de_resultat_du_Capacite_tot__fixation_Trf () {
					return this.Valeur_de_resultat_du_Capacite_tot__fixation_Trf;
				}
				
			    public String Unite_23;

				public String getUnite_23 () {
					return this.Unite_23;
				}
				
			    public String Valeur_de_resultat_du_Coeff_Saturation_Trf;

				public String getValeur_de_resultat_du_Coeff_Saturation_Trf () {
					return this.Valeur_de_resultat_du_Coeff_Saturation_Trf;
				}
				
			    public String Unite_24;

				public String getUnite_24 () {
					return this.Unite_24;
				}
				
			    public String Valeur_de_resultat_du_Recept_Soluble_Transferrine;

				public String getValeur_de_resultat_du_Recept_Soluble_Transferrine () {
					return this.Valeur_de_resultat_du_Recept_Soluble_Transferrine;
				}
				
			    public String Unite_25;

				public String getUnite_25 () {
					return this.Unite_25;
				}
				
			    public String Valeur_de_resultat_du_Ferritine;

				public String getValeur_de_resultat_du_Ferritine () {
					return this.Valeur_de_resultat_du_Ferritine;
				}
				
			    public String Unite_26;

				public String getUnite_26 () {
					return this.Unite_26;
				}
				
			    public String Valeur_de_resultat_du_Triglycerides;

				public String getValeur_de_resultat_du_Triglycerides () {
					return this.Valeur_de_resultat_du_Triglycerides;
				}
				
			    public String Unite_27;

				public String getUnite_27 () {
					return this.Unite_27;
				}
				
			    public String Valeur_de_resultat_du_CRP;

				public String getValeur_de_resultat_du_CRP () {
					return this.Valeur_de_resultat_du_CRP;
				}
				
			    public String Unite_28;

				public String getUnite_28 () {
					return this.Unite_28;
				}
				
			    public String Valeur_de_resultat_du_Creatinine_29;

				public String getValeur_de_resultat_du_Creatinine_29 () {
					return this.Valeur_de_resultat_du_Creatinine_29;
				}
				
			    public String Unite_30;

				public String getUnite_30 () {
					return this.Unite_30;
				}
				
			    public String Column64;

				public String getColumn64 () {
					return this.Column64;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_SAMP.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_SAMP.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_SAMP = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_SAMP, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_SAMP) {

        	try {

        		int length = 0;
		
					this.IPP_HASH = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_de_naissance = readString(dis);
					
					this.Valeur_de_resultat_du_Sodium = readString(dis);
					
					this.Unite = readString(dis);
					
					this.Valeur_de_resultat_du_Potassium = readString(dis);
					
					this.Unite_1 = readString(dis);
					
					this.Valeur_de_resultat_du_Chlorures = readString(dis);
					
					this.Unite_2 = readString(dis);
					
					this.Valeur_de_resultat_du_Albumine = readString(dis);
					
					this.Unite_3 = readString(dis);
					
					this.Valeur_de_resultat_du_Calcium = readString(dis);
					
					this.Unite_4 = readString(dis);
					
					this.Valeur_de_resultat_du_Uree = readString(dis);
					
					this.Unite_5 = readString(dis);
					
					this.Valeur_de_resultat_du_Glucose = readString(dis);
					
					this.Unite_6 = readString(dis);
					
					this.Valeur_de_resultat_du_Creatine_kinase = readString(dis);
					
					this.Unite_7 = readString(dis);
					
					this.Valeur_de_resultat_du_Beta_2_microglobuline = readString(dis);
					
					this.Unite_8 = readString(dis);
					
					this.Valeur_de_resultat_du_Creatinine = readString(dis);
					
					this.Unite_9 = readString(dis);
					
					this.Valeur_de_resultat_du_LDH = readString(dis);
					
					this.Unite_10 = readString(dis);
					
					this.Valeur_de_resultat_du_ASAT = readString(dis);
					
					this.Unite_11 = readString(dis);
					
					this.Valeur_de_resultat_du_ALAT = readString(dis);
					
					this.Unite_12 = readString(dis);
					
					this.Valeur_de_resultat_du_Phosphatases_alc_ = readString(dis);
					
					this.Unite_13 = readString(dis);
					
					this.Valeur_de_resultat_du_Gamma_GT = readString(dis);
					
					this.Unite_14 = readString(dis);
					
					this.Valeur_de_resultat_du_Prealbumine = readString(dis);
					
					this.Unite_15 = readString(dis);
					
					this.Valeur_de_resultat_du_Bilirubine_conjuguee = readString(dis);
					
					this.Unite_16 = readString(dis);
					
					this.Valeur_de_resultat_du_Bilirubine_non_conjuguee = readString(dis);
					
					this.Unite_17 = readString(dis);
					
					this.Valeur_de_resultat_du_Bilirubine_totale = readString(dis);
					
					this.Unite_18 = readString(dis);
					
					this.Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_ = readString(dis);
					
					this.Unite_19 = readString(dis);
					
					this.Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_ = readString(dis);
					
					this.Unite_20 = readString(dis);
					
					this.Valeur_de_resultat_du_Fer = readString(dis);
					
					this.Unite_21 = readString(dis);
					
					this.Valeur_de_resultat_du_Transferrine = readString(dis);
					
					this.Unite_22 = readString(dis);
					
					this.Valeur_de_resultat_du_Capacite_tot__fixation_Trf = readString(dis);
					
					this.Unite_23 = readString(dis);
					
					this.Valeur_de_resultat_du_Coeff_Saturation_Trf = readString(dis);
					
					this.Unite_24 = readString(dis);
					
					this.Valeur_de_resultat_du_Recept_Soluble_Transferrine = readString(dis);
					
					this.Unite_25 = readString(dis);
					
					this.Valeur_de_resultat_du_Ferritine = readString(dis);
					
					this.Unite_26 = readString(dis);
					
					this.Valeur_de_resultat_du_Triglycerides = readString(dis);
					
					this.Unite_27 = readString(dis);
					
					this.Valeur_de_resultat_du_CRP = readString(dis);
					
					this.Unite_28 = readString(dis);
					
					this.Valeur_de_resultat_du_Creatinine_29 = readString(dis);
					
					this.Unite_30 = readString(dis);
					
					this.Column64 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IPP_HASH,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Sodium,dos);
					
					// String
				
						writeString(this.Unite,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Potassium,dos);
					
					// String
				
						writeString(this.Unite_1,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Chlorures,dos);
					
					// String
				
						writeString(this.Unite_2,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Albumine,dos);
					
					// String
				
						writeString(this.Unite_3,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Calcium,dos);
					
					// String
				
						writeString(this.Unite_4,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Uree,dos);
					
					// String
				
						writeString(this.Unite_5,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Glucose,dos);
					
					// String
				
						writeString(this.Unite_6,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Creatine_kinase,dos);
					
					// String
				
						writeString(this.Unite_7,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Beta_2_microglobuline,dos);
					
					// String
				
						writeString(this.Unite_8,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Creatinine,dos);
					
					// String
				
						writeString(this.Unite_9,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_LDH,dos);
					
					// String
				
						writeString(this.Unite_10,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_ASAT,dos);
					
					// String
				
						writeString(this.Unite_11,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_ALAT,dos);
					
					// String
				
						writeString(this.Unite_12,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Phosphatases_alc_,dos);
					
					// String
				
						writeString(this.Unite_13,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Gamma_GT,dos);
					
					// String
				
						writeString(this.Unite_14,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Prealbumine,dos);
					
					// String
				
						writeString(this.Unite_15,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Bilirubine_conjuguee,dos);
					
					// String
				
						writeString(this.Unite_16,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Bilirubine_non_conjuguee,dos);
					
					// String
				
						writeString(this.Unite_17,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Bilirubine_totale,dos);
					
					// String
				
						writeString(this.Unite_18,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_,dos);
					
					// String
				
						writeString(this.Unite_19,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_,dos);
					
					// String
				
						writeString(this.Unite_20,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Fer,dos);
					
					// String
				
						writeString(this.Unite_21,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Transferrine,dos);
					
					// String
				
						writeString(this.Unite_22,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Capacite_tot__fixation_Trf,dos);
					
					// String
				
						writeString(this.Unite_23,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Coeff_Saturation_Trf,dos);
					
					// String
				
						writeString(this.Unite_24,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Recept_Soluble_Transferrine,dos);
					
					// String
				
						writeString(this.Unite_25,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Ferritine,dos);
					
					// String
				
						writeString(this.Unite_26,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Triglycerides,dos);
					
					// String
				
						writeString(this.Unite_27,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_CRP,dos);
					
					// String
				
						writeString(this.Unite_28,dos);
					
					// String
				
						writeString(this.Valeur_de_resultat_du_Creatinine_29,dos);
					
					// String
				
						writeString(this.Unite_30,dos);
					
					// String
				
						writeString(this.Column64,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPP_HASH="+IPP_HASH);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",Valeur_de_resultat_du_Sodium="+Valeur_de_resultat_du_Sodium);
		sb.append(",Unite="+Unite);
		sb.append(",Valeur_de_resultat_du_Potassium="+Valeur_de_resultat_du_Potassium);
		sb.append(",Unite_1="+Unite_1);
		sb.append(",Valeur_de_resultat_du_Chlorures="+Valeur_de_resultat_du_Chlorures);
		sb.append(",Unite_2="+Unite_2);
		sb.append(",Valeur_de_resultat_du_Albumine="+Valeur_de_resultat_du_Albumine);
		sb.append(",Unite_3="+Unite_3);
		sb.append(",Valeur_de_resultat_du_Calcium="+Valeur_de_resultat_du_Calcium);
		sb.append(",Unite_4="+Unite_4);
		sb.append(",Valeur_de_resultat_du_Uree="+Valeur_de_resultat_du_Uree);
		sb.append(",Unite_5="+Unite_5);
		sb.append(",Valeur_de_resultat_du_Glucose="+Valeur_de_resultat_du_Glucose);
		sb.append(",Unite_6="+Unite_6);
		sb.append(",Valeur_de_resultat_du_Creatine_kinase="+Valeur_de_resultat_du_Creatine_kinase);
		sb.append(",Unite_7="+Unite_7);
		sb.append(",Valeur_de_resultat_du_Beta_2_microglobuline="+Valeur_de_resultat_du_Beta_2_microglobuline);
		sb.append(",Unite_8="+Unite_8);
		sb.append(",Valeur_de_resultat_du_Creatinine="+Valeur_de_resultat_du_Creatinine);
		sb.append(",Unite_9="+Unite_9);
		sb.append(",Valeur_de_resultat_du_LDH="+Valeur_de_resultat_du_LDH);
		sb.append(",Unite_10="+Unite_10);
		sb.append(",Valeur_de_resultat_du_ASAT="+Valeur_de_resultat_du_ASAT);
		sb.append(",Unite_11="+Unite_11);
		sb.append(",Valeur_de_resultat_du_ALAT="+Valeur_de_resultat_du_ALAT);
		sb.append(",Unite_12="+Unite_12);
		sb.append(",Valeur_de_resultat_du_Phosphatases_alc_="+Valeur_de_resultat_du_Phosphatases_alc_);
		sb.append(",Unite_13="+Unite_13);
		sb.append(",Valeur_de_resultat_du_Gamma_GT="+Valeur_de_resultat_du_Gamma_GT);
		sb.append(",Unite_14="+Unite_14);
		sb.append(",Valeur_de_resultat_du_Prealbumine="+Valeur_de_resultat_du_Prealbumine);
		sb.append(",Unite_15="+Unite_15);
		sb.append(",Valeur_de_resultat_du_Bilirubine_conjuguee="+Valeur_de_resultat_du_Bilirubine_conjuguee);
		sb.append(",Unite_16="+Unite_16);
		sb.append(",Valeur_de_resultat_du_Bilirubine_non_conjuguee="+Valeur_de_resultat_du_Bilirubine_non_conjuguee);
		sb.append(",Unite_17="+Unite_17);
		sb.append(",Valeur_de_resultat_du_Bilirubine_totale="+Valeur_de_resultat_du_Bilirubine_totale);
		sb.append(",Unite_18="+Unite_18);
		sb.append(",Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_="+Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_);
		sb.append(",Unite_19="+Unite_19);
		sb.append(",Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_="+Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_);
		sb.append(",Unite_20="+Unite_20);
		sb.append(",Valeur_de_resultat_du_Fer="+Valeur_de_resultat_du_Fer);
		sb.append(",Unite_21="+Unite_21);
		sb.append(",Valeur_de_resultat_du_Transferrine="+Valeur_de_resultat_du_Transferrine);
		sb.append(",Unite_22="+Unite_22);
		sb.append(",Valeur_de_resultat_du_Capacite_tot__fixation_Trf="+Valeur_de_resultat_du_Capacite_tot__fixation_Trf);
		sb.append(",Unite_23="+Unite_23);
		sb.append(",Valeur_de_resultat_du_Coeff_Saturation_Trf="+Valeur_de_resultat_du_Coeff_Saturation_Trf);
		sb.append(",Unite_24="+Unite_24);
		sb.append(",Valeur_de_resultat_du_Recept_Soluble_Transferrine="+Valeur_de_resultat_du_Recept_Soluble_Transferrine);
		sb.append(",Unite_25="+Unite_25);
		sb.append(",Valeur_de_resultat_du_Ferritine="+Valeur_de_resultat_du_Ferritine);
		sb.append(",Unite_26="+Unite_26);
		sb.append(",Valeur_de_resultat_du_Triglycerides="+Valeur_de_resultat_du_Triglycerides);
		sb.append(",Unite_27="+Unite_27);
		sb.append(",Valeur_de_resultat_du_CRP="+Valeur_de_resultat_du_CRP);
		sb.append(",Unite_28="+Unite_28);
		sb.append(",Valeur_de_resultat_du_Creatinine_29="+Valeur_de_resultat_du_Creatinine_29);
		sb.append(",Unite_30="+Unite_30);
		sb.append(",Column64="+Column64);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row2Struct row2 = new row2Struct();
out3Struct out3 = new out3Struct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.CNX_POSTGRES_DWH_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "dim_date_sampling";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "dim_date_sampling";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+context.CNX_POSTGRES_DWH_Server+":"+context.CNX_POSTGRES_DWH_Port+"/"+context.CNX_POSTGRES_DWH_Database;
    dbUser_tDBOutput_1 = context.CNX_POSTGRES_DWH_Login;

	final String decryptedPassword_tDBOutput_1 = context.CNX_POSTGRES_DWH_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"date_sampling_full\",\"date_sampling_full_string\",\"date_sampling_monthyear\",\"date_sampling_month_number\",\"date_sampling_month_name\",\"date_sampling_year_number\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Date_de_prelevement;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Date_de_prelevement == null) ? 0 : this.Date_de_prelevement.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.Date_de_prelevement == null) {
										if (other.Date_de_prelevement != null) 
											return false;
								
									} else if (!this.Date_de_prelevement.equals(other.Date_de_prelevement))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.EXCEL_BIOLOGICAL_File;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.EXCEL_BIOLOGICAL_File, context.EXCEL_BIOLOGICAL_Encoding,context.EXCEL_BIOLOGICAL_FieldSeparator,context.EXCEL_BIOLOGICAL_RowSeparator,false,context.EXCEL_BIOLOGICAL_Header,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.IPP_HASH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.Date_de_prelevement = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_de_prelevement", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Date_de_prelevement = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Sexe = ParserUtils.parseTo_Character(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Sexe", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Sexe = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Date_de_naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.Valeur_de_resultat_du_Sodium = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Unite = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.Valeur_de_resultat_du_Potassium = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.Unite_1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.Valeur_de_resultat_du_Chlorures = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.Unite_2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.Valeur_de_resultat_du_Albumine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.Unite_3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.Valeur_de_resultat_du_Calcium = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.Unite_4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row1.Valeur_de_resultat_du_Uree = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row1.Unite_5 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row1.Valeur_de_resultat_du_Glucose = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row1.Unite_6 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row1.Valeur_de_resultat_du_Creatine_kinase = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row1.Unite_7 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row1.Valeur_de_resultat_du_Beta_2_microglobuline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row1.Unite_8 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row1.Valeur_de_resultat_du_Creatinine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row1.Unite_9 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row1.Valeur_de_resultat_du_LDH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row1.Unite_10 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row1.Valeur_de_resultat_du_ASAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row1.Unite_11 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row1.Valeur_de_resultat_du_ALAT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row1.Unite_12 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row1.Valeur_de_resultat_du_Phosphatases_alc_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row1.Unite_13 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row1.Valeur_de_resultat_du_Gamma_GT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1.Unite_14 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1.Valeur_de_resultat_du_Prealbumine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1.Unite_15 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row1.Valeur_de_resultat_du_Bilirubine_conjuguee = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row1.Unite_16 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row1.Valeur_de_resultat_du_Bilirubine_non_conjuguee = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row1.Unite_17 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row1.Valeur_de_resultat_du_Bilirubine_totale = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row1.Unite_18 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row1.Valeur_de_resultat_du_HDL_Cholesterol__mmol_L_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row1.Unite_19 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row1.Valeur_de_resultat_du_LDL_Cholesterol__mmol_L_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row1.Unite_20 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row1.Valeur_de_resultat_du_Fer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row1.Unite_21 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row1.Valeur_de_resultat_du_Transferrine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row1.Unite_22 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row1.Valeur_de_resultat_du_Capacite_tot__fixation_Trf = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row1.Unite_23 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row1.Valeur_de_resultat_du_Coeff_Saturation_Trf = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row1.Unite_24 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row1.Valeur_de_resultat_du_Recept_Soluble_Transferrine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row1.Unite_25 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row1.Valeur_de_resultat_du_Ferritine = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row1.Unite_26 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							row1.Valeur_de_resultat_du_Triglycerides = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							row1.Unite_27 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
							row1.Valeur_de_resultat_du_CRP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							row1.Unite_28 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							row1.Valeur_de_resultat_du_Creatinine_29 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row1.Unite_30 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							row1.Column64 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.Date_de_prelevement = TalendDate.formatDate("dd/MM/yyyy",row1.Date_de_prelevement) ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		
row2 = null;			
if(out1.Date_de_prelevement == null){
	finder_tUniqRow_1.Date_de_prelevement = null;
}else{
	finder_tUniqRow_1.Date_de_prelevement = out1.Date_de_prelevement.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(out1.Date_de_prelevement == null){
	new_tUniqRow_1.Date_de_prelevement = null;
}else{
	new_tUniqRow_1.Date_de_prelevement = out1.Date_de_prelevement.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.Date_de_prelevement = out1.Date_de_prelevement;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.Date_Sampling_Full = TalendDate.isDate(row2.Date_de_prelevement, "dd/MM/yyyy")?row2.Date_de_prelevement:"ND" ;
out3_tmp.Date_Sampling_Full_String = TalendDate.isDate(row2.Date_de_prelevement, "dd/MM/yyyy")?
TalendDate.formatDate("ddMMyyyy", TalendDate.parseDate("dd/MM/yyyy", row2.Date_de_prelevement))
:"ND" ;
out3_tmp.Date_Sampling_MonthYear = TalendDate.isDate(row2.Date_de_prelevement, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",row2.Date_de_prelevement)) :"ND" ;
out3_tmp.Date_Sampling_Month_Number = DateHandling.returnMonth(row2.Date_de_prelevement,"/") ;
out3_tmp.Date_Sampling_Month_Name = DateHandling.CheckMonth(row2.Date_de_prelevement, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(row2.Date_de_prelevement, "/"))):"ND" ;
out3_tmp.Date_Sampling_Year_Number = DateHandling.returnYear(row2.Date_de_prelevement, "/") ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(out3.Date_Sampling_Full == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out3.Date_Sampling_Full);
}

                    if(out3.Date_Sampling_Full_String == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out3.Date_Sampling_Full_String);
}

                    if(out3.Date_Sampling_MonthYear == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out3.Date_Sampling_MonthYear);
}

                    if(out3.Date_Sampling_Month_Number == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out3.Date_Sampling_Month_Number);
}

                    if(out3.Date_Sampling_Month_Name == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out3.Date_Sampling_Month_Name);
}

                    if(out3.Date_Sampling_Year_Number == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out3.Date_Sampling_Year_Number);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.EXCEL_BIOLOGICAL_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DIM_DATE_SAMP DIM_DATE_SAMPClass = new DIM_DATE_SAMP();

        int exitCode = DIM_DATE_SAMPClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DIM_DATE_SAMP.class.getClassLoader().getResourceAsStream("stagepca/dim_date_samp_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DIM_DATE_SAMP.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("EXCEL_BIOLOGICAL_Encoding", "id_String");
				
                context.EXCEL_BIOLOGICAL_Encoding=(String) context.getProperty("EXCEL_BIOLOGICAL_Encoding");
				    context.setContextType("EXCEL_BIOLOGICAL_FieldSeparator", "id_String");
				
                context.EXCEL_BIOLOGICAL_FieldSeparator=(String) context.getProperty("EXCEL_BIOLOGICAL_FieldSeparator");
				    context.setContextType("EXCEL_BIOLOGICAL_File", "id_File");
				
                context.EXCEL_BIOLOGICAL_File=(String) context.getProperty("EXCEL_BIOLOGICAL_File");
				    context.setContextType("EXCEL_BIOLOGICAL_Header", "id_Integer");
				
             try{
                 context.EXCEL_BIOLOGICAL_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_BIOLOGICAL_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_BIOLOGICAL_Header", e.getMessage()));
                 context.EXCEL_BIOLOGICAL_Header=null;
              }
				    context.setContextType("EXCEL_BIOLOGICAL_RowSeparator", "id_String");
				
                context.EXCEL_BIOLOGICAL_RowSeparator=(String) context.getProperty("EXCEL_BIOLOGICAL_RowSeparator");
				    context.setContextType("CNX_POSTGRES_DWH_Database", "id_String");
				
                context.CNX_POSTGRES_DWH_Database=(String) context.getProperty("CNX_POSTGRES_DWH_Database");
				    context.setContextType("CNX_POSTGRES_DWH_Login", "id_String");
				
                context.CNX_POSTGRES_DWH_Login=(String) context.getProperty("CNX_POSTGRES_DWH_Login");
				    context.setContextType("CNX_POSTGRES_DWH_Password", "id_Password");
				
            		String pwd_CNX_POSTGRES_DWH_Password_value = context.getProperty("CNX_POSTGRES_DWH_Password");
            		context.CNX_POSTGRES_DWH_Password = null;
            		if(pwd_CNX_POSTGRES_DWH_Password_value!=null) {
            			if(context_param.containsKey("CNX_POSTGRES_DWH_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CNX_POSTGRES_DWH_Password = pwd_CNX_POSTGRES_DWH_Password_value;
            			} else if (!pwd_CNX_POSTGRES_DWH_Password_value.isEmpty()) {
            				try {
            					context.CNX_POSTGRES_DWH_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CNX_POSTGRES_DWH_Password_value);
            					context.put("CNX_POSTGRES_DWH_Password",context.CNX_POSTGRES_DWH_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CNX_POSTGRES_DWH_Port", "id_String");
				
                context.CNX_POSTGRES_DWH_Port=(String) context.getProperty("CNX_POSTGRES_DWH_Port");
				    context.setContextType("CNX_POSTGRES_DWH_Schema", "id_String");
				
                context.CNX_POSTGRES_DWH_Schema=(String) context.getProperty("CNX_POSTGRES_DWH_Schema");
				    context.setContextType("CNX_POSTGRES_DWH_Server", "id_String");
				
                context.CNX_POSTGRES_DWH_Server=(String) context.getProperty("CNX_POSTGRES_DWH_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_Encoding")) {
                context.EXCEL_BIOLOGICAL_Encoding = (String) parentContextMap.get("EXCEL_BIOLOGICAL_Encoding");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_FieldSeparator")) {
                context.EXCEL_BIOLOGICAL_FieldSeparator = (String) parentContextMap.get("EXCEL_BIOLOGICAL_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_File")) {
                context.EXCEL_BIOLOGICAL_File = (String) parentContextMap.get("EXCEL_BIOLOGICAL_File");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_Header")) {
                context.EXCEL_BIOLOGICAL_Header = (Integer) parentContextMap.get("EXCEL_BIOLOGICAL_Header");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_RowSeparator")) {
                context.EXCEL_BIOLOGICAL_RowSeparator = (String) parentContextMap.get("EXCEL_BIOLOGICAL_RowSeparator");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Database")) {
                context.CNX_POSTGRES_DWH_Database = (String) parentContextMap.get("CNX_POSTGRES_DWH_Database");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Login")) {
                context.CNX_POSTGRES_DWH_Login = (String) parentContextMap.get("CNX_POSTGRES_DWH_Login");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Password")) {
                context.CNX_POSTGRES_DWH_Password = (java.lang.String) parentContextMap.get("CNX_POSTGRES_DWH_Password");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Port")) {
                context.CNX_POSTGRES_DWH_Port = (String) parentContextMap.get("CNX_POSTGRES_DWH_Port");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Schema")) {
                context.CNX_POSTGRES_DWH_Schema = (String) parentContextMap.get("CNX_POSTGRES_DWH_Schema");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Server")) {
                context.CNX_POSTGRES_DWH_Server = (String) parentContextMap.get("CNX_POSTGRES_DWH_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("CNX_POSTGRES_DWH_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DIM_DATE_SAMP");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     111294 characters generated by Talend Open Studio for Data Integration 
 *     on the January 20, 2020 7:40:45 AM CET
 ************************************************************************************************/