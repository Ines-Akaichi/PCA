// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.ft_biological_measures_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FT_BIOLOGICAL_MEASURES Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class FT_BIOLOGICAL_MEASURES implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CNX_EXCEL_BIOLOGICAL_Encoding != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_Encoding", CNX_EXCEL_BIOLOGICAL_Encoding.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_File != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_File", CNX_EXCEL_BIOLOGICAL_File.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_Header != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_Header", CNX_EXCEL_BIOLOGICAL_Header.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_LastColumn != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_LastColumn", CNX_EXCEL_BIOLOGICAL_LastColumn.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_ThousandSeparator != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_ThousandSeparator", CNX_EXCEL_BIOLOGICAL_ThousandSeparator.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_DecimalSeparator != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_DecimalSeparator", CNX_EXCEL_BIOLOGICAL_DecimalSeparator.toString());
				
			}
			
			if(CNX_EXCEL_BIOLOGICAL_FirstColumn != null){
				
					this.setProperty("CNX_EXCEL_BIOLOGICAL_FirstColumn", CNX_EXCEL_BIOLOGICAL_FirstColumn.toString());
				
			}
			
		}

public String CNX_EXCEL_BIOLOGICAL_Encoding;
public String getCNX_EXCEL_BIOLOGICAL_Encoding(){
	return this.CNX_EXCEL_BIOLOGICAL_Encoding;
}
		public String CNX_EXCEL_BIOLOGICAL_File;
		public String getCNX_EXCEL_BIOLOGICAL_File(){
			return this.CNX_EXCEL_BIOLOGICAL_File;
		}
		
public Integer CNX_EXCEL_BIOLOGICAL_Header;
public Integer getCNX_EXCEL_BIOLOGICAL_Header(){
	return this.CNX_EXCEL_BIOLOGICAL_Header;
}
public Integer CNX_EXCEL_BIOLOGICAL_LastColumn;
public Integer getCNX_EXCEL_BIOLOGICAL_LastColumn(){
	return this.CNX_EXCEL_BIOLOGICAL_LastColumn;
}
public String CNX_EXCEL_BIOLOGICAL_ThousandSeparator;
public String getCNX_EXCEL_BIOLOGICAL_ThousandSeparator(){
	return this.CNX_EXCEL_BIOLOGICAL_ThousandSeparator;
}
public String CNX_EXCEL_BIOLOGICAL_DecimalSeparator;
public String getCNX_EXCEL_BIOLOGICAL_DecimalSeparator(){
	return this.CNX_EXCEL_BIOLOGICAL_DecimalSeparator;
}
public Integer CNX_EXCEL_BIOLOGICAL_FirstColumn;
public Integer getCNX_EXCEL_BIOLOGICAL_FirstColumn(){
	return this.CNX_EXCEL_BIOLOGICAL_FirstColumn;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "FT_BIOLOGICAL_MEASURES";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FT_BIOLOGICAL_MEASURES.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FT_BIOLOGICAL_MEASURES.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DIM_PATIENT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DIM_TIME_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DIM_SAMPLING_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_DIM_MEASURE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];

	
			    public String measure;

				public String getMeasure () {
					return this.measure;
				}
				
			    public int time_sampling_key;

				public int getTime_sampling_key () {
					return this.time_sampling_key;
				}
				
			    public int date_sampling_key;

				public int getDate_sampling_key () {
					return this.date_sampling_key;
				}
				
			    public int measure_key;

				public int getMeasure_key () {
					return this.measure_key;
				}
				
			    public Integer patient_key;

				public Integer getPatient_key () {
					return this.patient_key;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.measure = readString(dis);
					
			        this.time_sampling_key = dis.readInt();
					
			        this.date_sampling_key = dis.readInt();
					
			        this.measure_key = dis.readInt();
					
						this.patient_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.measure,dos);
					
					// int
				
		            	dos.writeInt(this.time_sampling_key);
					
					// int
				
		            	dos.writeInt(this.date_sampling_key);
					
					// int
				
		            	dos.writeInt(this.measure_key);
					
					// Integer
				
						writeInteger(this.patient_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("measure="+measure);
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
		sb.append(",measure_key="+String.valueOf(measure_key));
		sb.append(",patient_key="+String.valueOf(patient_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];

	
			    public String Attribute;

				public String getAttribute () {
					return this.Attribute;
				}
				
			    public String measure;

				public String getMeasure () {
					return this.measure;
				}
				
			    public Integer time_sampling_key;

				public Integer getTime_sampling_key () {
					return this.time_sampling_key;
				}
				
			    public Integer date_sampling_key;

				public Integer getDate_sampling_key () {
					return this.date_sampling_key;
				}
				
			    public Integer measure_key;

				public Integer getMeasure_key () {
					return this.measure_key;
				}
				
			    public Integer patient_key;

				public Integer getPatient_key () {
					return this.patient_key;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.Attribute = readString(dis);
					
					this.measure = readString(dis);
					
						this.time_sampling_key = readInteger(dis);
					
						this.date_sampling_key = readInteger(dis);
					
						this.measure_key = readInteger(dis);
					
						this.patient_key = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Attribute,dos);
					
					// String
				
						writeString(this.measure,dos);
					
					// Integer
				
						writeInteger(this.time_sampling_key,dos);
					
					// Integer
				
						writeInteger(this.date_sampling_key,dos);
					
					// Integer
				
						writeInteger(this.measure_key,dos);
					
					// Integer
				
						writeInteger(this.patient_key,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Attribute="+Attribute);
		sb.append(",measure="+measure);
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
		sb.append(",measure_key="+String.valueOf(measure_key));
		sb.append(",patient_key="+String.valueOf(patient_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class EXCEL_DATEStruct implements routines.system.IPersistableRow<EXCEL_DATEStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];

	
			    public String date_splitted;

				public String getDate_splitted () {
					return this.date_splitted;
				}
				
			    public String time_splitted;

				public String getTime_splitted () {
					return this.time_splitted;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public String IPP_Hash;

				public String getIPP_Hash () {
					return this.IPP_Hash;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Attribute;

				public String getAttribute () {
					return this.Attribute;
				}
				
			    public String Value;

				public String getValue () {
					return this.Value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.date_splitted = readString(dis);
					
					this.time_splitted = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
					this.IPP_Hash = readString(dis);
					
					this.Date_de_naissance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Attribute = readString(dis);
					
					this.Value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.date_splitted,dos);
					
					// String
				
						writeString(this.time_splitted,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// String
				
						writeString(this.IPP_Hash,dos);
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Attribute,dos);
					
					// String
				
						writeString(this.Value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date_splitted="+date_splitted);
		sb.append(",time_splitted="+time_splitted);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",IPP_Hash="+IPP_Hash);
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Attribute="+Attribute);
		sb.append(",Value="+Value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EXCEL_DATEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];

	
			    public String IPP_Hash;

				public String getIPP_Hash () {
					return this.IPP_Hash;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public String Attribute;

				public String getAttribute () {
					return this.Attribute;
				}
				
			    public String Value;

				public String getValue () {
					return this.Value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.IPP_Hash = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_de_naissance = readString(dis);
					
					this.Attribute = readString(dis);
					
					this.Value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IPP_Hash,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// String
				
						writeString(this.Attribute,dos);
					
					// String
				
						writeString(this.Value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPP_Hash="+IPP_Hash);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",Attribute="+Attribute);
		sb.append(",Value="+Value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_1Struct implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];

	
			    public String IPP_Hash;

				public String getIPP_Hash () {
					return this.IPP_Hash;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public String Attribute;

				public String getAttribute () {
					return this.Attribute;
				}
				
			    public String Value;

				public String getValue () {
					return this.Value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.IPP_Hash = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_de_naissance = readString(dis);
					
					this.Attribute = readString(dis);
					
					this.Value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IPP_Hash,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// String
				
						writeString(this.Attribute,dos);
					
					// String
				
						writeString(this.Value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPP_Hash="+IPP_Hash);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",Attribute="+Attribute);
		sb.append(",Value="+Value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);

		row1Struct row1 = new row1Struct();
EXCEL_DATEStruct EXCEL_DATE = new EXCEL_DATEStruct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = "public";
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "fact_bilogical_measures";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "fact_bilogical_measures";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+"localhost"+":"+"5432"+"/"+"stage";
    dbUser_tDBOutput_1 = "postgres";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("a6baf30d8d9fdab5");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"measure\",\"time_sampling_key\",\"date_sampling_key\",\"measure_key\",\"patient_key\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("EXCEL_DATE" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_PATIENTStruct> tHash_Lookup_DIM_PATIENT = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_PATIENTStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_PATIENTStruct>) 
					globalMap.get( "tHash_Lookup_DIM_PATIENT" ))
					;					
					
	

DIM_PATIENTStruct DIM_PATIENTHashKey = new DIM_PATIENTStruct();
DIM_PATIENTStruct DIM_PATIENTDefault = new DIM_PATIENTStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_TIMEStruct> tHash_Lookup_DIM_TIME = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_TIMEStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_TIMEStruct>) 
					globalMap.get( "tHash_Lookup_DIM_TIME" ))
					;					
					
	

DIM_TIMEStruct DIM_TIMEHashKey = new DIM_TIMEStruct();
DIM_TIMEStruct DIM_TIMEDefault = new DIM_TIMEStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_SAMPLINGStruct> tHash_Lookup_DIM_SAMPLING = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_SAMPLINGStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_SAMPLINGStruct>) 
					globalMap.get( "tHash_Lookup_DIM_SAMPLING" ))
					;					
					
	

DIM_SAMPLINGStruct DIM_SAMPLINGHashKey = new DIM_SAMPLINGStruct();
DIM_SAMPLINGStruct DIM_SAMPLINGDefault = new DIM_SAMPLINGStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_MEASUREStruct> tHash_Lookup_DIM_MEASURE = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_MEASUREStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_MEASUREStruct>) 
					globalMap.get( "tHash_Lookup_DIM_MEASURE" ))
					;					
					
	

DIM_MEASUREStruct DIM_MEASUREHashKey = new DIM_MEASUREStruct();
DIM_MEASUREStruct DIM_MEASUREDefault = new DIM_MEASUREStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String date1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
EXCEL_DATEStruct EXCEL_DATE_tmp = new EXCEL_DATEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		


			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "D:/StageMai2019/Project/data/In/DonneesBilogiquesHashed.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1){
   			sheetList_tFileInputExcel_1.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
    	}
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 6;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "IPP_Hash";

				row1.IPP_Hash = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.IPP_Hash = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Date_de_prelevement";

				if(1<actual_end_column_tFileInputExcel_1){
					try{
						if(row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1))){
							row1.Date_de_prelevement = row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_1 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], "dd/MM/yyyy HH:mm");
                            if(tempDate_tFileInputExcel_1.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_1.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
                            }else{
                                row1.Date_de_prelevement = tempDate_tFileInputExcel_1;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
					}
				}

			}else{
				row1.Date_de_prelevement = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Sexe";

				row1.Sexe = ParserUtils.parseTo_Character(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else{
				row1.Sexe = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Date_de_naissance";

				row1.Date_de_naissance = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.Date_de_naissance = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Attribute";

				row1.Attribute = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.Attribute = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Value";

				row1.Value = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.Value = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		
		              
			   	  		  if(
 				  		  			
 				  		  			(
 				  		  			
 				  		  			row1.Value != null && !row1.Value.equals("N/A")
 				  		  			
 				  		  			)
  				  		  			
	  	  		  				) { // G_TM_M_280

							 // CALL close main tMap filter for table 'row1'
							// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.date1 = TalendDate.formatDate("dd/MM/yyyy HH:mm",row1.Date_de_prelevement) ;// ###############################
        // ###############################
        // # Output tables

EXCEL_DATE = null;


// # Output table : 'EXCEL_DATE'
EXCEL_DATE_tmp.date_splitted = Var.date1 .split(" ")[0] ;
EXCEL_DATE_tmp.time_splitted = Var.date1.split(" ")[1]  ;
EXCEL_DATE_tmp.Date_de_prelevement = row1.Date_de_prelevement ;
EXCEL_DATE_tmp.IPP_Hash = row1.IPP_Hash ;
EXCEL_DATE_tmp.Date_de_naissance = row1.Date_de_naissance ;
EXCEL_DATE_tmp.Sexe = row1.Sexe ;
EXCEL_DATE_tmp.Attribute = row1.Attribute ;
EXCEL_DATE_tmp.Value = row1.Value ;
EXCEL_DATE = EXCEL_DATE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "EXCEL_DATE"
if(EXCEL_DATE != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//EXCEL_DATE
			//EXCEL_DATE


			
				if(execStat){
					runStat.updateStatOnConnection("EXCEL_DATE"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		
		              
			   	  		  if(
 				  		  			
 				  		  			(
 				  		  			
 				  		  			EXCEL_DATE.Value != null &&  !EXCEL_DATE.Value.equals("N/A")
 				  		  			
 				  		  			)
  				  		  			
	  	  		  				) { // G_TM_M_280

							 // CALL close main tMap filter for table 'EXCEL_DATE'
							

				///////////////////////////////////////////////
				// Starting Lookup Table "DIM_PATIENT" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDIM_PATIENT = false;
       		  	    	
       		  	    	
 							DIM_PATIENTStruct DIM_PATIENTObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		DIM_PATIENTHashKey.ipp_hash = EXCEL_DATE.IPP_Hash ;
                        		    		

								
		                        	DIM_PATIENTHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DIM_PATIENT.lookup( DIM_PATIENTHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DIM_PATIENT != null && tHash_Lookup_DIM_PATIENT.getCount(DIM_PATIENTHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DIM_PATIENT' and it contains more one result from keys :  DIM_PATIENT.ipp_hash = '" + DIM_PATIENTHashKey.ipp_hash + "'");
								} // G 071
							

							DIM_PATIENTStruct DIM_PATIENT = null;
                    		  	 
							   
                    		  	 
	       		  	    	DIM_PATIENTStruct fromLookup_DIM_PATIENT = null;
							DIM_PATIENT = DIM_PATIENTDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DIM_PATIENT !=null && tHash_Lookup_DIM_PATIENT.hasNext()) { // G 099
								
							
								
								fromLookup_DIM_PATIENT = tHash_Lookup_DIM_PATIENT.next();

							
							
								} // G 099
							
							

							if(fromLookup_DIM_PATIENT != null) {
								DIM_PATIENT = fromLookup_DIM_PATIENT;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "DIM_TIME" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDIM_TIME = false;
       		  	    	
       		  	    	
 							DIM_TIMEStruct DIM_TIMEObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		DIM_TIMEHashKey.time_sampling_full = EXCEL_DATE.time_splitted ;
                        		    		

								
		                        	DIM_TIMEHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DIM_TIME.lookup( DIM_TIMEHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DIM_TIME != null && tHash_Lookup_DIM_TIME.getCount(DIM_TIMEHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DIM_TIME' and it contains more one result from keys :  DIM_TIME.time_sampling_full = '" + DIM_TIMEHashKey.time_sampling_full + "'");
								} // G 071
							

							DIM_TIMEStruct DIM_TIME = null;
                    		  	 
							   
                    		  	 
	       		  	    	DIM_TIMEStruct fromLookup_DIM_TIME = null;
							DIM_TIME = DIM_TIMEDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DIM_TIME !=null && tHash_Lookup_DIM_TIME.hasNext()) { // G 099
								
							
								
								fromLookup_DIM_TIME = tHash_Lookup_DIM_TIME.next();

							
							
								} // G 099
							
							

							if(fromLookup_DIM_TIME != null) {
								DIM_TIME = fromLookup_DIM_TIME;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "DIM_SAMPLING" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDIM_SAMPLING = false;
       		  	    	
       		  	    	
 							DIM_SAMPLINGStruct DIM_SAMPLINGObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		DIM_SAMPLINGHashKey.date_sampling_full = TalendDate.parseDate
("dd/MM/yyyy",EXCEL_DATE.date_splitted) ;
                        		    		

								
		                        	DIM_SAMPLINGHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DIM_SAMPLING.lookup( DIM_SAMPLINGHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DIM_SAMPLING != null && tHash_Lookup_DIM_SAMPLING.getCount(DIM_SAMPLINGHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DIM_SAMPLING' and it contains more one result from keys :  DIM_SAMPLING.date_sampling_full = '" + DIM_SAMPLINGHashKey.date_sampling_full + "'");
								} // G 071
							

							DIM_SAMPLINGStruct DIM_SAMPLING = null;
                    		  	 
							   
                    		  	 
	       		  	    	DIM_SAMPLINGStruct fromLookup_DIM_SAMPLING = null;
							DIM_SAMPLING = DIM_SAMPLINGDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DIM_SAMPLING !=null && tHash_Lookup_DIM_SAMPLING.hasNext()) { // G 099
								
							
								
								fromLookup_DIM_SAMPLING = tHash_Lookup_DIM_SAMPLING.next();

							
							
								} // G 099
							
							

							if(fromLookup_DIM_SAMPLING != null) {
								DIM_SAMPLING = fromLookup_DIM_SAMPLING;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "DIM_MEASURE" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopDIM_MEASURE = false;
       		  	    	
       		  	    	
 							DIM_MEASUREStruct DIM_MEASUREObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		DIM_MEASUREHashKey.measure_name = EXCEL_DATE.Attribute ;
                        		    		

								
		                        	DIM_MEASUREHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_DIM_MEASURE.lookup( DIM_MEASUREHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_DIM_MEASURE.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_DIM_MEASURE != null && tHash_Lookup_DIM_MEASURE.getCount(DIM_MEASUREHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'DIM_MEASURE' and it contains more one result from keys :  DIM_MEASURE.measure_name = '" + DIM_MEASUREHashKey.measure_name + "'");
								} // G 071
							

							DIM_MEASUREStruct DIM_MEASURE = null;
                    		  	 
							   
                    		  	 
	       		  	    	DIM_MEASUREStruct fromLookup_DIM_MEASURE = null;
							DIM_MEASURE = DIM_MEASUREDefault;
										 
							
								 
							
							
								if (tHash_Lookup_DIM_MEASURE !=null && tHash_Lookup_DIM_MEASURE.hasNext()) { // G 099
								
							
								
								fromLookup_DIM_MEASURE = tHash_Lookup_DIM_MEASURE.next();

							
							
								} // G 099
							
							

							if(fromLookup_DIM_MEASURE != null) {
								DIM_MEASURE = fromLookup_DIM_MEASURE;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.measure = EXCEL_DATE.Value ;
out1_tmp.time_sampling_key = DIM_TIME.time_sampling_key ;
out1_tmp.date_sampling_key = DIM_SAMPLING.date_sampling_key ;
out1_tmp.measure_key = DIM_MEASURE.measure_key ;
out1_tmp.patient_key = DIM_PATIENT.patient_key ;
out1 = out1_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out2'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out2_tmp.Attribute = EXCEL_DATE.Attribute ;
out2_tmp.measure = EXCEL_DATE.Value ;
out2_tmp.time_sampling_key = DIM_TIME.time_sampling_key ;
out2_tmp.date_sampling_key = DIM_SAMPLING.date_sampling_key ;
out2_tmp.measure_key = DIM_MEASURE.measure_key ;
out2_tmp.patient_key = DIM_PATIENT.patient_key ;
out2 = out2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(out1.measure == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out1.measure);
}

                    pstmt_tDBOutput_1.setInt(2, out1.time_sampling_key);

                    pstmt_tDBOutput_1.setInt(3, out1.date_sampling_key);

                    pstmt_tDBOutput_1.setInt(4, out1.measure_key);

                    if(out1.patient_key == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(5, out1.patient_key);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(out2.Attribute != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.Attribute)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out2.measure != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.measure)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out2.time_sampling_key != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.time_sampling_key)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out2.date_sampling_key != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.date_sampling_key)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out2.measure_key != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.measure_key)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(out2.patient_key != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.patient_key)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out2"



	
		} // G_TM_M_280 close main tMap filter for table 'EXCEL_DATE'
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "EXCEL_DATE"



	
		} // G_TM_M_280 close main tMap filter for table 'row1'
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_DIM_PATIENT != null) {
						tHash_Lookup_DIM_PATIENT.endGet();
					}
					globalMap.remove( "tHash_Lookup_DIM_PATIENT" );

					
					
				
					if(tHash_Lookup_DIM_TIME != null) {
						tHash_Lookup_DIM_TIME.endGet();
					}
					globalMap.remove( "tHash_Lookup_DIM_TIME" );

					
					
				
					if(tHash_Lookup_DIM_SAMPLING != null) {
						tHash_Lookup_DIM_SAMPLING.endGet();
					}
					globalMap.remove( "tHash_Lookup_DIM_SAMPLING" );

					
					
				
					if(tHash_Lookup_DIM_MEASURE != null) {
						tHash_Lookup_DIM_MEASURE.endGet();
					}
					globalMap.remove( "tHash_Lookup_DIM_MEASURE" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("EXCEL_DATE"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_DIM_PATIENT"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_DIM_TIME"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_DIM_SAMPLING"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_DIM_MEASURE"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class DIM_PATIENTStruct implements routines.system.IPersistableComparableLookupRow<DIM_PATIENTStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public String ipp_hash;

				public String getIpp_hash () {
					return this.ipp_hash;
				}
				
			    public Long ipp;

				public Long getIpp () {
					return this.ipp;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String name_surname;

				public String getName_surname () {
					return this.name_surname;
				}
				
			    public java.util.Date birthdate;

				public java.util.Date getBirthdate () {
					return this.birthdate;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public String startplace_fs;

				public String getStartplace_fs () {
					return this.startplace_fs;
				}
				
			    public java.util.Date date_fs;

				public java.util.Date getDate_fs () {
					return this.date_fs;
				}
				
			    public String date_fs_full_string;

				public String getDate_fs_full_string () {
					return this.date_fs_full_string;
				}
				
			    public String date_fs_monthyear;

				public String getDate_fs_monthyear () {
					return this.date_fs_monthyear;
				}
				
			    public int date_fs_month_number;

				public int getDate_fs_month_number () {
					return this.date_fs_month_number;
				}
				
			    public String date_fs_month_name;

				public String getDate_fs_month_name () {
					return this.date_fs_month_name;
				}
				
			    public int date_fs_year_number;

				public int getDate_fs_year_number () {
					return this.date_fs_year_number;
				}
				
			    public java.util.Date date_diagnostic;

				public java.util.Date getDate_diagnostic () {
					return this.date_diagnostic;
				}
				
			    public String date_diagnostic_full_string;

				public String getDate_diagnostic_full_string () {
					return this.date_diagnostic_full_string;
				}
				
			    public String date_diagnostic_monthyear;

				public String getDate_diagnostic_monthyear () {
					return this.date_diagnostic_monthyear;
				}
				
			    public int date_diagnostic_month_number;

				public int getDate_diagnostic_month_number () {
					return this.date_diagnostic_month_number;
				}
				
			    public String date_diagnostic_month_name;

				public String getDate_diagnostic_month_name () {
					return this.date_diagnostic_month_name;
				}
				
			    public int date_diagnostic_year_number;

				public int getDate_diagnostic_year_number () {
					return this.date_diagnostic_year_number;
				}
				
			    public String diagnostic;

				public String getDiagnostic () {
					return this.diagnostic;
				}
				
			    public String diagnostic_probability;

				public String getDiagnostic_probability () {
					return this.diagnostic_probability;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ipp_hash == null) ? 0 : this.ipp_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DIM_PATIENTStruct other = (DIM_PATIENTStruct) obj;
		
						if (this.ipp_hash == null) {
							if (other.ipp_hash != null)
								return false;
						
						} else if (!this.ipp_hash.equals(other.ipp_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DIM_PATIENTStruct other) {

		other.patient_key = this.patient_key;
	            other.ipp_hash = this.ipp_hash;
	            other.ipp = this.ipp;
	            other.name = this.name;
	            other.surname = this.surname;
	            other.name_surname = this.name_surname;
	            other.birthdate = this.birthdate;
	            other.sex = this.sex;
	            other.startplace_fs = this.startplace_fs;
	            other.date_fs = this.date_fs;
	            other.date_fs_full_string = this.date_fs_full_string;
	            other.date_fs_monthyear = this.date_fs_monthyear;
	            other.date_fs_month_number = this.date_fs_month_number;
	            other.date_fs_month_name = this.date_fs_month_name;
	            other.date_fs_year_number = this.date_fs_year_number;
	            other.date_diagnostic = this.date_diagnostic;
	            other.date_diagnostic_full_string = this.date_diagnostic_full_string;
	            other.date_diagnostic_monthyear = this.date_diagnostic_monthyear;
	            other.date_diagnostic_month_number = this.date_diagnostic_month_number;
	            other.date_diagnostic_month_name = this.date_diagnostic_month_name;
	            other.date_diagnostic_year_number = this.date_diagnostic_year_number;
	            other.diagnostic = this.diagnostic;
	            other.diagnostic_probability = this.diagnostic_probability;
	            
	}

	public void copyKeysDataTo(DIM_PATIENTStruct other) {

		other.ipp_hash = this.ipp_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.ipp_hash = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ipp_hash,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.patient_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ipp = null;
           				} else {
           			    	this.ipp = dis.readLong();
           				}
					
						this.name = readString(dis,ois);
					
						this.surname = readString(dis,ois);
					
						this.name_surname = readString(dis,ois);
					
						this.birthdate = readDate(dis,ois);
					
						this.sex = readString(dis,ois);
					
						this.startplace_fs = readString(dis,ois);
					
						this.date_fs = readDate(dis,ois);
					
						this.date_fs_full_string = readString(dis,ois);
					
						this.date_fs_monthyear = readString(dis,ois);
					
			            this.date_fs_month_number = dis.readInt();
					
						this.date_fs_month_name = readString(dis,ois);
					
			            this.date_fs_year_number = dis.readInt();
					
						this.date_diagnostic = readDate(dis,ois);
					
						this.date_diagnostic_full_string = readString(dis,ois);
					
						this.date_diagnostic_monthyear = readString(dis,ois);
					
			            this.date_diagnostic_month_number = dis.readInt();
					
						this.date_diagnostic_month_name = readString(dis,ois);
					
			            this.date_diagnostic_year_number = dis.readInt();
					
						this.diagnostic = readString(dis,ois);
					
						this.diagnostic_probability = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.patient_key);
					
						if(this.ipp == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ipp);
		            	}
					
						writeString(this.name, dos, oos);
					
						writeString(this.surname, dos, oos);
					
						writeString(this.name_surname, dos, oos);
					
						writeDate(this.birthdate, dos, oos);
					
						writeString(this.sex, dos, oos);
					
						writeString(this.startplace_fs, dos, oos);
					
						writeDate(this.date_fs, dos, oos);
					
						writeString(this.date_fs_full_string, dos, oos);
					
						writeString(this.date_fs_monthyear, dos, oos);
					
		            	dos.writeInt(this.date_fs_month_number);
					
						writeString(this.date_fs_month_name, dos, oos);
					
		            	dos.writeInt(this.date_fs_year_number);
					
						writeDate(this.date_diagnostic, dos, oos);
					
						writeString(this.date_diagnostic_full_string, dos, oos);
					
						writeString(this.date_diagnostic_monthyear, dos, oos);
					
		            	dos.writeInt(this.date_diagnostic_month_number);
					
						writeString(this.date_diagnostic_month_name, dos, oos);
					
		            	dos.writeInt(this.date_diagnostic_year_number);
					
						writeString(this.diagnostic, dos, oos);
					
						writeString(this.diagnostic_probability, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",ipp_hash="+ipp_hash);
		sb.append(",ipp="+String.valueOf(ipp));
		sb.append(",name="+name);
		sb.append(",surname="+surname);
		sb.append(",name_surname="+name_surname);
		sb.append(",birthdate="+String.valueOf(birthdate));
		sb.append(",sex="+sex);
		sb.append(",startplace_fs="+startplace_fs);
		sb.append(",date_fs="+String.valueOf(date_fs));
		sb.append(",date_fs_full_string="+date_fs_full_string);
		sb.append(",date_fs_monthyear="+date_fs_monthyear);
		sb.append(",date_fs_month_number="+String.valueOf(date_fs_month_number));
		sb.append(",date_fs_month_name="+date_fs_month_name);
		sb.append(",date_fs_year_number="+String.valueOf(date_fs_year_number));
		sb.append(",date_diagnostic="+String.valueOf(date_diagnostic));
		sb.append(",date_diagnostic_full_string="+date_diagnostic_full_string);
		sb.append(",date_diagnostic_monthyear="+date_diagnostic_monthyear);
		sb.append(",date_diagnostic_month_number="+String.valueOf(date_diagnostic_month_number));
		sb.append(",date_diagnostic_month_name="+date_diagnostic_month_name);
		sb.append(",date_diagnostic_year_number="+String.valueOf(date_diagnostic_year_number));
		sb.append(",diagnostic="+diagnostic);
		sb.append(",diagnostic_probability="+diagnostic_probability);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_PATIENTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ipp_hash, other.ipp_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DIM_PATIENTStruct DIM_PATIENT = new DIM_PATIENTStruct();




	
	/**
	 * [tAdvancedHash_DIM_PATIENT begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DIM_PATIENT", false);
		start_Hash.put("tAdvancedHash_DIM_PATIENT", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_PATIENT" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_DIM_PATIENT = 0;
		

			   		// connection name:DIM_PATIENT
			   		// source node:tDBInput_1 - inputs:(after_tFileInputExcel_1) outputs:(DIM_PATIENT,DIM_PATIENT) | target node:tAdvancedHash_DIM_PATIENT - inputs:(DIM_PATIENT) outputs:()
			   		// linked node: tMap_1 - inputs:(EXCEL_DATE,DIM_PATIENT,DIM_TIME,DIM_SAMPLING,DIM_MEASURE) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DIM_PATIENT = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_PATIENTStruct> tHash_Lookup_DIM_PATIENT =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DIM_PATIENTStruct>getLookup(matchingModeEnum_DIM_PATIENT);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DIM_PATIENT", tHash_Lookup_DIM_PATIENT);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DIM_PATIENT begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "postgres";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("a6baf30d8d9fdab5");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "stage";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \"stage\".\"public\".\"dim_patient\".\"patient_key\", \n  \"stage\".\"public\".\"dim_patient\".\"ipp_hash\", \n"
+"  \"stage\".\"public\".\"dim_patient\".\"ipp\", \n  \"stage\".\"public\".\"dim_patient\".\"name\", \n  \"stage\".\"public"
+"\".\"dim_patient\".\"surname\", \n  \"stage\".\"public\".\"dim_patient\".\"name_surname\", \n  \"stage\".\"public\".\"dim_"
+"patient\".\"birthdate\", \n  \"stage\".\"public\".\"dim_patient\".\"sex\", \n  \"stage\".\"public\".\"dim_patient\".\"star"
+"tplace_fs\", \n  \"stage\".\"public\".\"dim_patient\".\"date_fs\", \n  \"stage\".\"public\".\"dim_patient\".\"date_fs_full"
+"_string\", \n  \"stage\".\"public\".\"dim_patient\".\"date_fs_monthyear\", \n  \"stage\".\"public\".\"dim_patient\".\"date"
+"_fs_month_number\", \n  \"stage\".\"public\".\"dim_patient\".\"date_fs_month_name\", \n  \"stage\".\"public\".\"dim_patien"
+"t\".\"date_fs_year_number\", \n  \"stage\".\"public\".\"dim_patient\".\"date_diagnostic\", \n  \"stage\".\"public\".\"dim_"
+"patient\".\"date_diagnostic_full_string\", \n  \"stage\".\"public\".\"dim_patient\".\"date_diagnostic_monthyear\", \n  \"s"
+"tage\".\"public\".\"dim_patient\".\"date_diagnostic_month_number\", \n  \"stage\".\"public\".\"dim_patient\".\"date_diagn"
+"ostic_month_name\", \n  \"stage\".\"public\".\"dim_patient\".\"date_diagnostic_year_number\", \n  \"stage\".\"public\".\"d"
+"im_patient\".\"diagnostic\", \n  \"stage\".\"public\".\"dim_patient\".\"diagnostic_probability\"\nFROM \"stage\".\"public"
+"\".\"dim_patient\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								DIM_PATIENT.patient_key = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                DIM_PATIENT.patient_key = rs_tDBInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								DIM_PATIENT.ipp_hash = null;
							} else {
	                         		
        	DIM_PATIENT.ipp_hash = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								DIM_PATIENT.ipp = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(3) != null) {
                DIM_PATIENT.ipp = rs_tDBInput_1.getLong(3);
            } else {
                    DIM_PATIENT.ipp = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								DIM_PATIENT.name = null;
							} else {
	                         		
        	DIM_PATIENT.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								DIM_PATIENT.surname = null;
							} else {
	                         		
        	DIM_PATIENT.surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								DIM_PATIENT.name_surname = null;
							} else {
	                         		
        	DIM_PATIENT.name_surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								DIM_PATIENT.birthdate = null;
							} else {
										
			DIM_PATIENT.birthdate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 7);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								DIM_PATIENT.sex = null;
							} else {
	                         		
        	DIM_PATIENT.sex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								DIM_PATIENT.startplace_fs = null;
							} else {
	                         		
        	DIM_PATIENT.startplace_fs = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								DIM_PATIENT.date_fs = null;
							} else {
										
			DIM_PATIENT.date_fs = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 10);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								DIM_PATIENT.date_fs_full_string = null;
							} else {
	                         		
        	DIM_PATIENT.date_fs_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								DIM_PATIENT.date_fs_monthyear = null;
							} else {
	                         		
        	DIM_PATIENT.date_fs_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								DIM_PATIENT.date_fs_month_number = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(13) != null) {
                DIM_PATIENT.date_fs_month_number = rs_tDBInput_1.getInt(13);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								DIM_PATIENT.date_fs_month_name = null;
							} else {
	                         		
        	DIM_PATIENT.date_fs_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								DIM_PATIENT.date_fs_year_number = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(15) != null) {
                DIM_PATIENT.date_fs_year_number = rs_tDBInput_1.getInt(15);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								DIM_PATIENT.date_diagnostic = null;
							} else {
										
			DIM_PATIENT.date_diagnostic = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 16);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								DIM_PATIENT.date_diagnostic_full_string = null;
							} else {
	                         		
        	DIM_PATIENT.date_diagnostic_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								DIM_PATIENT.date_diagnostic_monthyear = null;
							} else {
	                         		
        	DIM_PATIENT.date_diagnostic_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								DIM_PATIENT.date_diagnostic_month_number = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(19) != null) {
                DIM_PATIENT.date_diagnostic_month_number = rs_tDBInput_1.getInt(19);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								DIM_PATIENT.date_diagnostic_month_name = null;
							} else {
	                         		
        	DIM_PATIENT.date_diagnostic_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								DIM_PATIENT.date_diagnostic_year_number = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(21) != null) {
                DIM_PATIENT.date_diagnostic_year_number = rs_tDBInput_1.getInt(21);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								DIM_PATIENT.diagnostic = null;
							} else {
	                         		
        	DIM_PATIENT.diagnostic = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								DIM_PATIENT.diagnostic_probability = null;
							} else {
	                         		
        	DIM_PATIENT.diagnostic_probability = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_PATIENT main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	

			//DIM_PATIENT
			//DIM_PATIENT


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_PATIENT"+iterateId,1, 1);
				} 
			

		


			   
			   

					DIM_PATIENTStruct DIM_PATIENT_HashRow = new DIM_PATIENTStruct();
		   	   	   
				
				DIM_PATIENT_HashRow.patient_key = DIM_PATIENT.patient_key;
				
				DIM_PATIENT_HashRow.ipp_hash = DIM_PATIENT.ipp_hash;
				
				DIM_PATIENT_HashRow.ipp = DIM_PATIENT.ipp;
				
				DIM_PATIENT_HashRow.name = DIM_PATIENT.name;
				
				DIM_PATIENT_HashRow.surname = DIM_PATIENT.surname;
				
				DIM_PATIENT_HashRow.name_surname = DIM_PATIENT.name_surname;
				
				DIM_PATIENT_HashRow.birthdate = DIM_PATIENT.birthdate;
				
				DIM_PATIENT_HashRow.sex = DIM_PATIENT.sex;
				
				DIM_PATIENT_HashRow.startplace_fs = DIM_PATIENT.startplace_fs;
				
				DIM_PATIENT_HashRow.date_fs = DIM_PATIENT.date_fs;
				
				DIM_PATIENT_HashRow.date_fs_full_string = DIM_PATIENT.date_fs_full_string;
				
				DIM_PATIENT_HashRow.date_fs_monthyear = DIM_PATIENT.date_fs_monthyear;
				
				DIM_PATIENT_HashRow.date_fs_month_number = DIM_PATIENT.date_fs_month_number;
				
				DIM_PATIENT_HashRow.date_fs_month_name = DIM_PATIENT.date_fs_month_name;
				
				DIM_PATIENT_HashRow.date_fs_year_number = DIM_PATIENT.date_fs_year_number;
				
				DIM_PATIENT_HashRow.date_diagnostic = DIM_PATIENT.date_diagnostic;
				
				DIM_PATIENT_HashRow.date_diagnostic_full_string = DIM_PATIENT.date_diagnostic_full_string;
				
				DIM_PATIENT_HashRow.date_diagnostic_monthyear = DIM_PATIENT.date_diagnostic_monthyear;
				
				DIM_PATIENT_HashRow.date_diagnostic_month_number = DIM_PATIENT.date_diagnostic_month_number;
				
				DIM_PATIENT_HashRow.date_diagnostic_month_name = DIM_PATIENT.date_diagnostic_month_name;
				
				DIM_PATIENT_HashRow.date_diagnostic_year_number = DIM_PATIENT.date_diagnostic_year_number;
				
				DIM_PATIENT_HashRow.diagnostic = DIM_PATIENT.diagnostic;
				
				DIM_PATIENT_HashRow.diagnostic_probability = DIM_PATIENT.diagnostic_probability;
				
			tHash_Lookup_DIM_PATIENT.put(DIM_PATIENT_HashRow);
			
            




 


	tos_count_tAdvancedHash_DIM_PATIENT++;

/**
 * [tAdvancedHash_DIM_PATIENT main ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_PATIENT process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	

 



/**
 * [tAdvancedHash_DIM_PATIENT process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_PATIENT process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	

 



/**
 * [tAdvancedHash_DIM_PATIENT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_PATIENT end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	

tHash_Lookup_DIM_PATIENT.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_PATIENT"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_DIM_PATIENT", true);
end_Hash.put("tAdvancedHash_DIM_PATIENT", System.currentTimeMillis());




/**
 * [tAdvancedHash_DIM_PATIENT end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_PATIENT finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_PATIENT";

	

 



/**
 * [tAdvancedHash_DIM_PATIENT finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class DIM_TIMEStruct implements routines.system.IPersistableComparableLookupRow<DIM_TIMEStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String time_sampling_full;

				public String getTime_sampling_full () {
					return this.time_sampling_full;
				}
				
			    public int hour;

				public int getHour () {
					return this.hour;
				}
				
			    public int minutes;

				public int getMinutes () {
					return this.minutes;
				}
				
			    public int time_sampling_key;

				public int getTime_sampling_key () {
					return this.time_sampling_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.time_sampling_full == null) ? 0 : this.time_sampling_full.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DIM_TIMEStruct other = (DIM_TIMEStruct) obj;
		
						if (this.time_sampling_full == null) {
							if (other.time_sampling_full != null)
								return false;
						
						} else if (!this.time_sampling_full.equals(other.time_sampling_full))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DIM_TIMEStruct other) {

		other.time_sampling_full = this.time_sampling_full;
	            other.hour = this.hour;
	            other.minutes = this.minutes;
	            other.time_sampling_key = this.time_sampling_key;
	            
	}

	public void copyKeysDataTo(DIM_TIMEStruct other) {

		other.time_sampling_full = this.time_sampling_full;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.time_sampling_full = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.time_sampling_full,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.hour = dis.readInt();
					
			            this.minutes = dis.readInt();
					
			            this.time_sampling_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.hour);
					
		            	dos.writeInt(this.minutes);
					
		            	dos.writeInt(this.time_sampling_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time_sampling_full="+time_sampling_full);
		sb.append(",hour="+String.valueOf(hour));
		sb.append(",minutes="+String.valueOf(minutes));
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_TIMEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.time_sampling_full, other.time_sampling_full);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DIM_TIMEStruct DIM_TIME = new DIM_TIMEStruct();




	
	/**
	 * [tAdvancedHash_DIM_TIME begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DIM_TIME", false);
		start_Hash.put("tAdvancedHash_DIM_TIME", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DIM_TIME";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_TIME" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_DIM_TIME = 0;
		

			   		// connection name:DIM_TIME
			   		// source node:tDBInput_2 - inputs:(after_tFileInputExcel_1) outputs:(DIM_TIME,DIM_TIME) | target node:tAdvancedHash_DIM_TIME - inputs:(DIM_TIME) outputs:()
			   		// linked node: tMap_1 - inputs:(EXCEL_DATE,DIM_PATIENT,DIM_TIME,DIM_SAMPLING,DIM_MEASURE) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DIM_TIME = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_TIMEStruct> tHash_Lookup_DIM_TIME =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DIM_TIMEStruct>getLookup(matchingModeEnum_DIM_TIME);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DIM_TIME", tHash_Lookup_DIM_TIME);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DIM_TIME begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "postgres";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("a6baf30d8d9fdab5");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "stage";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  \"stage\".\"public\".\"dim_time\".\"time_sampling_full\", \n  \"stage\".\"public\".\"dim_time\".\"hour\", \n  "
+"\"stage\".\"public\".\"dim_time\".\"minutes\", \n  \"stage\".\"public\".\"dim_time\".\"time_sampling_key\"\nFROM \"stage\""
+".\"public\".\"dim_time\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								DIM_TIME.time_sampling_full = null;
							} else {
	                         		
        	DIM_TIME.time_sampling_full = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								DIM_TIME.hour = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(2) != null) {
                DIM_TIME.hour = rs_tDBInput_2.getInt(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								DIM_TIME.minutes = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(3) != null) {
                DIM_TIME.minutes = rs_tDBInput_2.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								DIM_TIME.time_sampling_key = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(4) != null) {
                DIM_TIME.time_sampling_key = rs_tDBInput_2.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_TIME main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_TIME";

	

			//DIM_TIME
			//DIM_TIME


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_TIME"+iterateId,1, 1);
				} 
			

		


			   
			   

					DIM_TIMEStruct DIM_TIME_HashRow = new DIM_TIMEStruct();
		   	   	   
				
				DIM_TIME_HashRow.time_sampling_full = DIM_TIME.time_sampling_full;
				
				DIM_TIME_HashRow.hour = DIM_TIME.hour;
				
				DIM_TIME_HashRow.minutes = DIM_TIME.minutes;
				
				DIM_TIME_HashRow.time_sampling_key = DIM_TIME.time_sampling_key;
				
			tHash_Lookup_DIM_TIME.put(DIM_TIME_HashRow);
			
            




 


	tos_count_tAdvancedHash_DIM_TIME++;

/**
 * [tAdvancedHash_DIM_TIME main ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_TIME process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_TIME";

	

 



/**
 * [tAdvancedHash_DIM_TIME process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_TIME process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_TIME";

	

 



/**
 * [tAdvancedHash_DIM_TIME process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_TIME end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_TIME";

	

tHash_Lookup_DIM_TIME.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_TIME"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_DIM_TIME", true);
end_Hash.put("tAdvancedHash_DIM_TIME", System.currentTimeMillis());




/**
 * [tAdvancedHash_DIM_TIME end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_TIME finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_TIME";

	

 



/**
 * [tAdvancedHash_DIM_TIME finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class DIM_SAMPLINGStruct implements routines.system.IPersistableComparableLookupRow<DIM_SAMPLINGStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date date_sampling_full;

				public java.util.Date getDate_sampling_full () {
					return this.date_sampling_full;
				}
				
			    public String date_sampling_full_string;

				public String getDate_sampling_full_string () {
					return this.date_sampling_full_string;
				}
				
			    public String date_sampling_monthyear;

				public String getDate_sampling_monthyear () {
					return this.date_sampling_monthyear;
				}
				
			    public int date_sampling_month_number;

				public int getDate_sampling_month_number () {
					return this.date_sampling_month_number;
				}
				
			    public String date_sampling_month_name;

				public String getDate_sampling_month_name () {
					return this.date_sampling_month_name;
				}
				
			    public int date_sampling_year_number;

				public int getDate_sampling_year_number () {
					return this.date_sampling_year_number;
				}
				
			    public int date_sampling_key;

				public int getDate_sampling_key () {
					return this.date_sampling_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date_sampling_full == null) ? 0 : this.date_sampling_full.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DIM_SAMPLINGStruct other = (DIM_SAMPLINGStruct) obj;
		
						if (this.date_sampling_full == null) {
							if (other.date_sampling_full != null)
								return false;
						
						} else if (!this.date_sampling_full.equals(other.date_sampling_full))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DIM_SAMPLINGStruct other) {

		other.date_sampling_full = this.date_sampling_full;
	            other.date_sampling_full_string = this.date_sampling_full_string;
	            other.date_sampling_monthyear = this.date_sampling_monthyear;
	            other.date_sampling_month_number = this.date_sampling_month_number;
	            other.date_sampling_month_name = this.date_sampling_month_name;
	            other.date_sampling_year_number = this.date_sampling_year_number;
	            other.date_sampling_key = this.date_sampling_key;
	            
	}

	public void copyKeysDataTo(DIM_SAMPLINGStruct other) {

		other.date_sampling_full = this.date_sampling_full;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.date_sampling_full = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date_sampling_full,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.date_sampling_full_string = readString(dis,ois);
					
						this.date_sampling_monthyear = readString(dis,ois);
					
			            this.date_sampling_month_number = dis.readInt();
					
						this.date_sampling_month_name = readString(dis,ois);
					
			            this.date_sampling_year_number = dis.readInt();
					
			            this.date_sampling_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.date_sampling_full_string, dos, oos);
					
						writeString(this.date_sampling_monthyear, dos, oos);
					
		            	dos.writeInt(this.date_sampling_month_number);
					
						writeString(this.date_sampling_month_name, dos, oos);
					
		            	dos.writeInt(this.date_sampling_year_number);
					
		            	dos.writeInt(this.date_sampling_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date_sampling_full="+String.valueOf(date_sampling_full));
		sb.append(",date_sampling_full_string="+date_sampling_full_string);
		sb.append(",date_sampling_monthyear="+date_sampling_monthyear);
		sb.append(",date_sampling_month_number="+String.valueOf(date_sampling_month_number));
		sb.append(",date_sampling_month_name="+date_sampling_month_name);
		sb.append(",date_sampling_year_number="+String.valueOf(date_sampling_year_number));
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_SAMPLINGStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date_sampling_full, other.date_sampling_full);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DIM_SAMPLINGStruct DIM_SAMPLING = new DIM_SAMPLINGStruct();




	
	/**
	 * [tAdvancedHash_DIM_SAMPLING begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DIM_SAMPLING", false);
		start_Hash.put("tAdvancedHash_DIM_SAMPLING", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_SAMPLING" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_DIM_SAMPLING = 0;
		

			   		// connection name:DIM_SAMPLING
			   		// source node:tDBInput_3 - inputs:(after_tFileInputExcel_1) outputs:(DIM_SAMPLING,DIM_SAMPLING) | target node:tAdvancedHash_DIM_SAMPLING - inputs:(DIM_SAMPLING) outputs:()
			   		// linked node: tMap_1 - inputs:(EXCEL_DATE,DIM_PATIENT,DIM_TIME,DIM_SAMPLING,DIM_MEASURE) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DIM_SAMPLING = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_SAMPLINGStruct> tHash_Lookup_DIM_SAMPLING =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DIM_SAMPLINGStruct>getLookup(matchingModeEnum_DIM_SAMPLING);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DIM_SAMPLING", tHash_Lookup_DIM_SAMPLING);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DIM_SAMPLING begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = "postgres";
					
					
					 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("a6baf30d8d9fdab5");
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "stage";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  \"stage\".\"public\".\"dim_date_sampling\".\"date_sampling_full\", \n  \"stage\".\"public\".\"dim_date_samplin"
+"g\".\"date_sampling_full_string\", \n  \"stage\".\"public\".\"dim_date_sampling\".\"date_sampling_monthyear\", \n  \"stage"
+"\".\"public\".\"dim_date_sampling\".\"date_sampling_month_number\", \n  \"stage\".\"public\".\"dim_date_sampling\".\"date"
+"_sampling_month_name\", \n  \"stage\".\"public\".\"dim_date_sampling\".\"date_sampling_year_number\", \n  \"stage\".\"publ"
+"ic\".\"dim_date_sampling\".\"date_sampling_key\"\nFROM \"stage\".\"public\".\"dim_date_sampling\"";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								DIM_SAMPLING.date_sampling_full = null;
							} else {
										
			DIM_SAMPLING.date_sampling_full = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 1);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								DIM_SAMPLING.date_sampling_full_string = null;
							} else {
	                         		
        	DIM_SAMPLING.date_sampling_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								DIM_SAMPLING.date_sampling_monthyear = null;
							} else {
	                         		
        	DIM_SAMPLING.date_sampling_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								DIM_SAMPLING.date_sampling_month_number = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(4) != null) {
                DIM_SAMPLING.date_sampling_month_number = rs_tDBInput_3.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								DIM_SAMPLING.date_sampling_month_name = null;
							} else {
	                         		
        	DIM_SAMPLING.date_sampling_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								DIM_SAMPLING.date_sampling_year_number = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(6) != null) {
                DIM_SAMPLING.date_sampling_year_number = rs_tDBInput_3.getInt(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								DIM_SAMPLING.date_sampling_key = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(7) != null) {
                DIM_SAMPLING.date_sampling_key = rs_tDBInput_3.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_SAMPLING main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	

			//DIM_SAMPLING
			//DIM_SAMPLING


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_SAMPLING"+iterateId,1, 1);
				} 
			

		


			   
			   

					DIM_SAMPLINGStruct DIM_SAMPLING_HashRow = new DIM_SAMPLINGStruct();
		   	   	   
				
				DIM_SAMPLING_HashRow.date_sampling_full = DIM_SAMPLING.date_sampling_full;
				
				DIM_SAMPLING_HashRow.date_sampling_full_string = DIM_SAMPLING.date_sampling_full_string;
				
				DIM_SAMPLING_HashRow.date_sampling_monthyear = DIM_SAMPLING.date_sampling_monthyear;
				
				DIM_SAMPLING_HashRow.date_sampling_month_number = DIM_SAMPLING.date_sampling_month_number;
				
				DIM_SAMPLING_HashRow.date_sampling_month_name = DIM_SAMPLING.date_sampling_month_name;
				
				DIM_SAMPLING_HashRow.date_sampling_year_number = DIM_SAMPLING.date_sampling_year_number;
				
				DIM_SAMPLING_HashRow.date_sampling_key = DIM_SAMPLING.date_sampling_key;
				
			tHash_Lookup_DIM_SAMPLING.put(DIM_SAMPLING_HashRow);
			
            




 


	tos_count_tAdvancedHash_DIM_SAMPLING++;

/**
 * [tAdvancedHash_DIM_SAMPLING main ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_SAMPLING process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	

 



/**
 * [tAdvancedHash_DIM_SAMPLING process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_SAMPLING process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	

 



/**
 * [tAdvancedHash_DIM_SAMPLING process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_SAMPLING end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	

tHash_Lookup_DIM_SAMPLING.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_SAMPLING"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_DIM_SAMPLING", true);
end_Hash.put("tAdvancedHash_DIM_SAMPLING", System.currentTimeMillis());




/**
 * [tAdvancedHash_DIM_SAMPLING end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_SAMPLING finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_SAMPLING";

	

 



/**
 * [tAdvancedHash_DIM_SAMPLING finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class DIM_MEASUREStruct implements routines.system.IPersistableComparableLookupRow<DIM_MEASUREStruct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String measure_name;

				public String getMeasure_name () {
					return this.measure_name;
				}
				
			    public String measure_unity;

				public String getMeasure_unity () {
					return this.measure_unity;
				}
				
			    public int measure_key;

				public int getMeasure_key () {
					return this.measure_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.measure_name == null) ? 0 : this.measure_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DIM_MEASUREStruct other = (DIM_MEASUREStruct) obj;
		
						if (this.measure_name == null) {
							if (other.measure_name != null)
								return false;
						
						} else if (!this.measure_name.equals(other.measure_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(DIM_MEASUREStruct other) {

		other.measure_name = this.measure_name;
	            other.measure_unity = this.measure_unity;
	            other.measure_key = this.measure_key;
	            
	}

	public void copyKeysDataTo(DIM_MEASUREStruct other) {

		other.measure_name = this.measure_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURES, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURES) {

        	try {

        		int length = 0;
		
					this.measure_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.measure_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.measure_unity = readString(dis,ois);
					
			            this.measure_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.measure_unity, dos, oos);
					
		            	dos.writeInt(this.measure_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("measure_name="+measure_name);
		sb.append(",measure_unity="+measure_unity);
		sb.append(",measure_key="+String.valueOf(measure_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DIM_MEASUREStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.measure_name, other.measure_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		DIM_MEASUREStruct DIM_MEASURE = new DIM_MEASUREStruct();




	
	/**
	 * [tAdvancedHash_DIM_MEASURE begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_DIM_MEASURE", false);
		start_Hash.put("tAdvancedHash_DIM_MEASURE", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DIM_MEASURE" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_DIM_MEASURE = 0;
		

			   		// connection name:DIM_MEASURE
			   		// source node:tDBInput_4 - inputs:(after_tFileInputExcel_1) outputs:(DIM_MEASURE,DIM_MEASURE) | target node:tAdvancedHash_DIM_MEASURE - inputs:(DIM_MEASURE) outputs:()
			   		// linked node: tMap_1 - inputs:(EXCEL_DATE,DIM_PATIENT,DIM_TIME,DIM_SAMPLING,DIM_MEASURE) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_DIM_MEASURE = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<DIM_MEASUREStruct> tHash_Lookup_DIM_MEASURE =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<DIM_MEASUREStruct>getLookup(matchingModeEnum_DIM_MEASURE);
	   						   
		   	   	   globalMap.put("tHash_Lookup_DIM_MEASURE", tHash_Lookup_DIM_MEASURE);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_DIM_MEASURE begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = "postgres";
					
					
					 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("a6baf30d8d9fdab5");
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
			String url_tDBInput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "stage";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  \"stage\".\"public\".\"dim_measure\".\"measure_name\", \n  \"stage\".\"public\".\"dim_measure\".\"measure_unit"
+"y\", \n  \"stage\".\"public\".\"dim_measure\".\"measure_key\"\nFROM \"stage\".\"public\".\"dim_measure\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								DIM_MEASURE.measure_name = null;
							} else {
	                         		
        	DIM_MEASURE.measure_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								DIM_MEASURE.measure_unity = null;
							} else {
	                         		
        	DIM_MEASURE.measure_unity = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								DIM_MEASURE.measure_key = 0;
							} else {
		                          
            if(rs_tDBInput_4.getObject(3) != null) {
                DIM_MEASURE.measure_key = rs_tDBInput_4.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_MEASURE main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	

			//DIM_MEASURE
			//DIM_MEASURE


			
				if(execStat){
					runStat.updateStatOnConnection("DIM_MEASURE"+iterateId,1, 1);
				} 
			

		


			   
			   

					DIM_MEASUREStruct DIM_MEASURE_HashRow = new DIM_MEASUREStruct();
		   	   	   
				
				DIM_MEASURE_HashRow.measure_name = DIM_MEASURE.measure_name;
				
				DIM_MEASURE_HashRow.measure_unity = DIM_MEASURE.measure_unity;
				
				DIM_MEASURE_HashRow.measure_key = DIM_MEASURE.measure_key;
				
			tHash_Lookup_DIM_MEASURE.put(DIM_MEASURE_HashRow);
			
            




 


	tos_count_tAdvancedHash_DIM_MEASURE++;

/**
 * [tAdvancedHash_DIM_MEASURE main ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_MEASURE process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	

 



/**
 * [tAdvancedHash_DIM_MEASURE process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_DIM_MEASURE process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	

 



/**
 * [tAdvancedHash_DIM_MEASURE process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_MEASURE end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	

tHash_Lookup_DIM_MEASURE.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DIM_MEASURE"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_DIM_MEASURE", true);
end_Hash.put("tAdvancedHash_DIM_MEASURE", System.currentTimeMillis());




/**
 * [tAdvancedHash_DIM_MEASURE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_DIM_MEASURE finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_DIM_MEASURE";

	

 



/**
 * [tAdvancedHash_DIM_MEASURE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FT_BIOLOGICAL_MEASURES FT_BIOLOGICAL_MEASURESClass = new FT_BIOLOGICAL_MEASURES();

        int exitCode = FT_BIOLOGICAL_MEASURESClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FT_BIOLOGICAL_MEASURES.class.getClassLoader().getResourceAsStream("stagepca/ft_biological_measures_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FT_BIOLOGICAL_MEASURES.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_Encoding", "id_String");
				
                context.CNX_EXCEL_BIOLOGICAL_Encoding=(String) context.getProperty("CNX_EXCEL_BIOLOGICAL_Encoding");
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_File", "id_File");
				
                context.CNX_EXCEL_BIOLOGICAL_File=(String) context.getProperty("CNX_EXCEL_BIOLOGICAL_File");
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_Header", "id_Integer");
				
             try{
                 context.CNX_EXCEL_BIOLOGICAL_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CNX_EXCEL_BIOLOGICAL_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "CNX_EXCEL_BIOLOGICAL_Header", e.getMessage()));
                 context.CNX_EXCEL_BIOLOGICAL_Header=null;
              }
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_LastColumn", "id_Integer");
				
             try{
                 context.CNX_EXCEL_BIOLOGICAL_LastColumn=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CNX_EXCEL_BIOLOGICAL_LastColumn"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "CNX_EXCEL_BIOLOGICAL_LastColumn", e.getMessage()));
                 context.CNX_EXCEL_BIOLOGICAL_LastColumn=null;
              }
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_ThousandSeparator", "id_String");
				
                context.CNX_EXCEL_BIOLOGICAL_ThousandSeparator=(String) context.getProperty("CNX_EXCEL_BIOLOGICAL_ThousandSeparator");
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_DecimalSeparator", "id_String");
				
                context.CNX_EXCEL_BIOLOGICAL_DecimalSeparator=(String) context.getProperty("CNX_EXCEL_BIOLOGICAL_DecimalSeparator");
				    context.setContextType("CNX_EXCEL_BIOLOGICAL_FirstColumn", "id_Integer");
				
             try{
                 context.CNX_EXCEL_BIOLOGICAL_FirstColumn=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CNX_EXCEL_BIOLOGICAL_FirstColumn"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "CNX_EXCEL_BIOLOGICAL_FirstColumn", e.getMessage()));
                 context.CNX_EXCEL_BIOLOGICAL_FirstColumn=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_Encoding")) {
                context.CNX_EXCEL_BIOLOGICAL_Encoding = (String) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_Encoding");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_File")) {
                context.CNX_EXCEL_BIOLOGICAL_File = (String) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_File");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_Header")) {
                context.CNX_EXCEL_BIOLOGICAL_Header = (Integer) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_Header");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_LastColumn")) {
                context.CNX_EXCEL_BIOLOGICAL_LastColumn = (Integer) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_LastColumn");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_ThousandSeparator")) {
                context.CNX_EXCEL_BIOLOGICAL_ThousandSeparator = (String) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_ThousandSeparator");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_DecimalSeparator")) {
                context.CNX_EXCEL_BIOLOGICAL_DecimalSeparator = (String) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_DecimalSeparator");
            }if (parentContextMap.containsKey("CNX_EXCEL_BIOLOGICAL_FirstColumn")) {
                context.CNX_EXCEL_BIOLOGICAL_FirstColumn = (Integer) parentContextMap.get("CNX_EXCEL_BIOLOGICAL_FirstColumn");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FT_BIOLOGICAL_MEASURES");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     199590 characters generated by Talend Open Studio for Data Integration 
 *     on the January 20, 2020 7:42:01 AM CET
 ************************************************************************************************/