// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.ft_clinical_measures1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FT_CLINICAL_MEASURES1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class FT_CLINICAL_MEASURES1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EXCEL_CLIN_1_RowSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_RowSeparator", EXCEL_CLIN_1_RowSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_1_FieldSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_FieldSeparator", EXCEL_CLIN_1_FieldSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_1_File != null){
				
					this.setProperty("EXCEL_CLIN_1_File", EXCEL_CLIN_1_File.toString());
				
			}
			
			if(EXCEL_CLIN_1_Encoding != null){
				
					this.setProperty("EXCEL_CLIN_1_Encoding", EXCEL_CLIN_1_Encoding.toString());
				
			}
			
			if(EXCEL_CLIN_1_Header != null){
				
					this.setProperty("EXCEL_CLIN_1_Header", EXCEL_CLIN_1_Header.toString());
				
			}
			
		}

public String EXCEL_CLIN_1_RowSeparator;
public String getEXCEL_CLIN_1_RowSeparator(){
	return this.EXCEL_CLIN_1_RowSeparator;
}
public String EXCEL_CLIN_1_FieldSeparator;
public String getEXCEL_CLIN_1_FieldSeparator(){
	return this.EXCEL_CLIN_1_FieldSeparator;
}
		public String EXCEL_CLIN_1_File;
		public String getEXCEL_CLIN_1_File(){
			return this.EXCEL_CLIN_1_File;
		}
		
public String EXCEL_CLIN_1_Encoding;
public String getEXCEL_CLIN_1_Encoding(){
	return this.EXCEL_CLIN_1_Encoding;
}
public Integer EXCEL_CLIN_1_Header;
public Integer getEXCEL_CLIN_1_Header(){
	return this.EXCEL_CLIN_1_Header;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "FT_CLINICAL_MEASURES1";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FT_CLINICAL_MEASURES1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FT_CLINICAL_MEASURES1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out16Struct implements routines.system.IPersistableRow<out16Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ORTHOPNE_F;

				public String getALS_ORTHOPNE_F () {
					return this.ALS_ORTHOPNE_F;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out16Struct other = (out16Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(out16Struct other) {

		other.ALS_PARO_F = this.ALS_PARO_F;
	            other.ALS_SALI_F = this.ALS_SALI_F;
	            other.ALS_DEGL_F = this.ALS_DEGL_F;
	            other.ALS_ERCI_F = this.ALS_ERCI_F;
	            other.ALS_SGAS_F = this.ALS_SGAS_F;
	            other.ALS_AGAS_F = this.ALS_AGAS_F;
	            other.ALS_HABI_F = this.ALS_HABI_F;
	            other.ALS_LITD_F = this.ALS_LITD_F;
	            other.ALS_MARC_F = this.ALS_MARC_F;
	            other.ALS_ESCA_F = this.ALS_ESCA_F;
	            other.ALS_DYSPNE_F = this.ALS_DYSPNE_F;
	            other.ALS_ORTHOPNE_F = this.ALS_ORTHOPNE_F;
	            other.ALS_INSR_F = this.ALS_INSR_F;
	            other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            
	}

	public void copyKeysDataTo(out16Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ORTHOPNE_F = readString(dis);
					
					this.ALS_INSR_F = readString(dis);
					
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ORTHOPNE_F,dos);
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ORTHOPNE_F="+ALS_ORTHOPNE_F);
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out15Struct implements routines.system.IPersistableRow<out15Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_DYSPNE_F;

				public String getALS_DYSPNE_F () {
					return this.ALS_DYSPNE_F;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_DYSPNE_F = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_DYSPNE_F,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_DYSPNE_F="+ALS_DYSPNE_F);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out14Struct implements routines.system.IPersistableRow<out14Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_F;

				public String getALS_ESCA_F () {
					return this.ALS_ESCA_F;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_F = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_F,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_F="+ALS_ESCA_F);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out13Struct implements routines.system.IPersistableRow<out13Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_F;

				public String getALS_MARC_F () {
					return this.ALS_MARC_F;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_F = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_F,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_F="+ALS_MARC_F);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_F;

				public String getALS_LITD_F () {
					return this.ALS_LITD_F;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_F = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_F,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_F="+ALS_LITD_F);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_F;

				public String getALS_HABI_F () {
					return this.ALS_HABI_F;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_F = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_F,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_F="+ALS_HABI_F);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_F;

				public String getALS_AGAS_F () {
					return this.ALS_AGAS_F;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_F = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_F,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_F="+ALS_AGAS_F);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_F;

				public String getALS_SGAS_F () {
					return this.ALS_SGAS_F;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_F = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_F,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_F="+ALS_SGAS_F);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_F;

				public String getALS_ERCI_F () {
					return this.ALS_ERCI_F;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_F = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_F,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_F="+ALS_ERCI_F);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_F;

				public String getALS_DEGL_F () {
					return this.ALS_DEGL_F;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_F = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_F,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_F="+ALS_DEGL_F);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_F;

				public String getALS_SALI_F () {
					return this.ALS_SALI_F;
				}
				
			    public String ALS_DEGL_Val;

				public String getALS_DEGL_Val () {
					return this.ALS_DEGL_Val;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_F = readString(dis);
					
					this.ALS_DEGL_Val = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_F,dos);
					
					// String
				
						writeString(this.ALS_DEGL_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_F="+ALS_SALI_F);
		sb.append(",ALS_DEGL_Val="+ALS_DEGL_Val);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_F;

				public String getALS_PARO_F () {
					return this.ALS_PARO_F;
				}
				
			    public String ALS_SALI_Val;

				public String getALS_SALI_Val () {
					return this.ALS_SALI_Val;
				}
				
			    public String ALS_DEGL_Val;

				public String getALS_DEGL_Val () {
					return this.ALS_DEGL_Val;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_F = readString(dis);
					
					this.ALS_SALI_Val = readString(dis);
					
					this.ALS_DEGL_Val = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_F,dos);
					
					// String
				
						writeString(this.ALS_SALI_Val,dos);
					
					// String
				
						writeString(this.ALS_DEGL_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_F="+ALS_PARO_F);
		sb.append(",ALS_SALI_Val="+ALS_SALI_Val);
		sb.append(",ALS_DEGL_Val="+ALS_DEGL_Val);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public Float HEIGHT_Val;

				public Float getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public Float WEIGHT_REF_Val;

				public Float getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public Float WEIGHT_Val;

				public Float getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public Float BMI_Val;

				public Float getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_INSR_F;

				public String getALS_INSR_F () {
					return this.ALS_INSR_F;
				}
				
			    public String ALS_PARO_Val;

				public String getALS_PARO_Val () {
					return this.ALS_PARO_Val;
				}
				
			    public String ALS_SALI_Val;

				public String getALS_SALI_Val () {
					return this.ALS_SALI_Val;
				}
				
			    public String ALS_DEGL_Val;

				public String getALS_DEGL_Val () {
					return this.ALS_DEGL_Val;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.HEIGHT_Val = null;
           				} else {
           			    	this.HEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_REF_Val = null;
           				} else {
           			    	this.WEIGHT_REF_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.WEIGHT_Val = null;
           				} else {
           			    	this.WEIGHT_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BMI_Val = null;
           				} else {
           			    	this.BMI_Val = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_INSR_F = readString(dis);
					
					this.ALS_PARO_Val = readString(dis);
					
					this.ALS_SALI_Val = readString(dis);
					
					this.ALS_DEGL_Val = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// Float
				
						if(this.HEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.HEIGHT_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_REF_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_REF_Val);
		            	}
					
					// Float
				
						if(this.WEIGHT_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.WEIGHT_Val);
		            	}
					
					// Float
				
						if(this.BMI_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.BMI_Val);
		            	}
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_INSR_F,dos);
					
					// String
				
						writeString(this.ALS_PARO_Val,dos);
					
					// String
				
						writeString(this.ALS_SALI_Val,dos);
					
					// String
				
						writeString(this.ALS_DEGL_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+String.valueOf(HEIGHT_Val));
		sb.append(",WEIGHT_REF_Val="+String.valueOf(WEIGHT_REF_Val));
		sb.append(",WEIGHT_Val="+String.valueOf(WEIGHT_Val));
		sb.append(",BMI_Val="+String.valueOf(BMI_Val));
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_INSR_F="+ALS_INSR_F);
		sb.append(",ALS_PARO_Val="+ALS_PARO_Val);
		sb.append(",ALS_SALI_Val="+ALS_SALI_Val);
		sb.append(",ALS_DEGL_Val="+ALS_DEGL_Val);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public String HEIGHT_Val;

				public String getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public String WEIGHT_REF_Val;

				public String getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public String WEIGHT_Val;

				public String getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public String BMI_Val;

				public String getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public String ALS_Val;

				public String getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_PARO_Val;

				public String getALS_PARO_Val () {
					return this.ALS_PARO_Val;
				}
				
			    public String ALS_SALI_Val;

				public String getALS_SALI_Val () {
					return this.ALS_SALI_Val;
				}
				
			    public String ALS_DEGL_Val;

				public String getALS_DEGL_Val () {
					return this.ALS_DEGL_Val;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_INSR_Val;

				public String getALS_INSR_Val () {
					return this.ALS_INSR_Val;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
					this.HEIGHT_Val = readString(dis);
					
					this.WEIGHT_REF_Val = readString(dis);
					
					this.WEIGHT_Val = readString(dis);
					
					this.BMI_Val = readString(dis);
					
					this.ALS_Val = readString(dis);
					
					this.ALS_PARO_Val = readString(dis);
					
					this.ALS_SALI_Val = readString(dis);
					
					this.ALS_DEGL_Val = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_INSR_Val = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// String
				
						writeString(this.HEIGHT_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_Val,dos);
					
					// String
				
						writeString(this.BMI_Val,dos);
					
					// String
				
						writeString(this.ALS_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO_Val,dos);
					
					// String
				
						writeString(this.ALS_SALI_Val,dos);
					
					// String
				
						writeString(this.ALS_DEGL_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_INSR_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+HEIGHT_Val);
		sb.append(",WEIGHT_REF_Val="+WEIGHT_REF_Val);
		sb.append(",WEIGHT_Val="+WEIGHT_Val);
		sb.append(",BMI_Val="+BMI_Val);
		sb.append(",ALS_Val="+ALS_Val);
		sb.append(",ALS_PARO_Val="+ALS_PARO_Val);
		sb.append(",ALS_SALI_Val="+ALS_SALI_Val);
		sb.append(",ALS_DEGL_Val="+ALS_DEGL_Val);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_INSR_Val="+ALS_INSR_Val);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_INSR="+ALS_INSR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATEXAM_Val;

				public String getDATEXAM_Val () {
					return this.DATEXAM_Val;
				}
				
			    public String HEIGHT_Val;

				public String getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public String WEIGHT_REF_Val;

				public String getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public String WEIGHT_Val;

				public String getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public String BMI_Val;

				public String getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public String ALS_Val;

				public String getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_PARO_Val;

				public String getALS_PARO_Val () {
					return this.ALS_PARO_Val;
				}
				
			    public String ALS_SALI_Val;

				public String getALS_SALI_Val () {
					return this.ALS_SALI_Val;
				}
				
			    public String ALS_DEGL_Val;

				public String getALS_DEGL_Val () {
					return this.ALS_DEGL_Val;
				}
				
			    public String ALS_ERCI_Val;

				public String getALS_ERCI_Val () {
					return this.ALS_ERCI_Val;
				}
				
			    public String ALS_SGAS_Val;

				public String getALS_SGAS_Val () {
					return this.ALS_SGAS_Val;
				}
				
			    public String ALS_AGAS_Val;

				public String getALS_AGAS_Val () {
					return this.ALS_AGAS_Val;
				}
				
			    public String ALS_HABI_Val;

				public String getALS_HABI_Val () {
					return this.ALS_HABI_Val;
				}
				
			    public String ALS_LITD_Val;

				public String getALS_LITD_Val () {
					return this.ALS_LITD_Val;
				}
				
			    public String ALS_MARC_Val;

				public String getALS_MARC_Val () {
					return this.ALS_MARC_Val;
				}
				
			    public String ALS_ESCA_Val;

				public String getALS_ESCA_Val () {
					return this.ALS_ESCA_Val;
				}
				
			    public String ALS_ALS_dyspne_Val;

				public String getALS_ALS_dyspne_Val () {
					return this.ALS_ALS_dyspne_Val;
				}
				
			    public String ALS_ALS_orthopne_Val;

				public String getALS_ALS_orthopne_Val () {
					return this.ALS_ALS_orthopne_Val;
				}
				
			    public String ALS_INSR_Val;

				public String getALS_INSR_Val () {
					return this.ALS_INSR_Val;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATEXAM_Val = readString(dis);
					
					this.HEIGHT_Val = readString(dis);
					
					this.WEIGHT_REF_Val = readString(dis);
					
					this.WEIGHT_Val = readString(dis);
					
					this.BMI_Val = readString(dis);
					
					this.ALS_Val = readString(dis);
					
					this.ALS_PARO_Val = readString(dis);
					
					this.ALS_SALI_Val = readString(dis);
					
					this.ALS_DEGL_Val = readString(dis);
					
					this.ALS_ERCI_Val = readString(dis);
					
					this.ALS_SGAS_Val = readString(dis);
					
					this.ALS_AGAS_Val = readString(dis);
					
					this.ALS_HABI_Val = readString(dis);
					
					this.ALS_LITD_Val = readString(dis);
					
					this.ALS_MARC_Val = readString(dis);
					
					this.ALS_ESCA_Val = readString(dis);
					
					this.ALS_ALS_dyspne_Val = readString(dis);
					
					this.ALS_ALS_orthopne_Val = readString(dis);
					
					this.ALS_INSR_Val = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATEXAM_Val,dos);
					
					// String
				
						writeString(this.HEIGHT_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_Val,dos);
					
					// String
				
						writeString(this.BMI_Val,dos);
					
					// String
				
						writeString(this.ALS_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO_Val,dos);
					
					// String
				
						writeString(this.ALS_SALI_Val,dos);
					
					// String
				
						writeString(this.ALS_DEGL_Val,dos);
					
					// String
				
						writeString(this.ALS_ERCI_Val,dos);
					
					// String
				
						writeString(this.ALS_SGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_AGAS_Val,dos);
					
					// String
				
						writeString(this.ALS_HABI_Val,dos);
					
					// String
				
						writeString(this.ALS_LITD_Val,dos);
					
					// String
				
						writeString(this.ALS_MARC_Val,dos);
					
					// String
				
						writeString(this.ALS_ESCA_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_Val,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_Val,dos);
					
					// String
				
						writeString(this.ALS_INSR_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATEXAM_Val="+DATEXAM_Val);
		sb.append(",HEIGHT_Val="+HEIGHT_Val);
		sb.append(",WEIGHT_REF_Val="+WEIGHT_REF_Val);
		sb.append(",WEIGHT_Val="+WEIGHT_Val);
		sb.append(",BMI_Val="+BMI_Val);
		sb.append(",ALS_Val="+ALS_Val);
		sb.append(",ALS_PARO_Val="+ALS_PARO_Val);
		sb.append(",ALS_SALI_Val="+ALS_SALI_Val);
		sb.append(",ALS_DEGL_Val="+ALS_DEGL_Val);
		sb.append(",ALS_ERCI_Val="+ALS_ERCI_Val);
		sb.append(",ALS_SGAS_Val="+ALS_SGAS_Val);
		sb.append(",ALS_AGAS_Val="+ALS_AGAS_Val);
		sb.append(",ALS_HABI_Val="+ALS_HABI_Val);
		sb.append(",ALS_LITD_Val="+ALS_LITD_Val);
		sb.append(",ALS_MARC_Val="+ALS_MARC_Val);
		sb.append(",ALS_ESCA_Val="+ALS_ESCA_Val);
		sb.append(",ALS_ALS_dyspne_Val="+ALS_ALS_dyspne_Val);
		sb.append(",ALS_ALS_orthopne_Val="+ALS_ALS_orthopne_Val);
		sb.append(",ALS_INSR_Val="+ALS_INSR_Val);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_INSR="+ALS_INSR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATEXAM;

				public String getDATEXAM () {
					return this.DATEXAM;
				}
				
			    public String DATEXAM_VALUE;

				public String getDATEXAM_VALUE () {
					return this.DATEXAM_VALUE;
				}
				
			    public String HEIGHT;

				public String getHEIGHT () {
					return this.HEIGHT;
				}
				
			    public String HEIGHT_VALUE;

				public String getHEIGHT_VALUE () {
					return this.HEIGHT_VALUE;
				}
				
			    public String WEIGHT_REF;

				public String getWEIGHT_REF () {
					return this.WEIGHT_REF;
				}
				
			    public String WEIGHT_REF_VALUE;

				public String getWEIGHT_REF_VALUE () {
					return this.WEIGHT_REF_VALUE;
				}
				
			    public String WEIGHT;

				public String getWEIGHT () {
					return this.WEIGHT;
				}
				
			    public String WEIGHT_VALUE;

				public String getWEIGHT_VALUE () {
					return this.WEIGHT_VALUE;
				}
				
			    public String BMI;

				public String getBMI () {
					return this.BMI;
				}
				
			    public String BMI_VALUE;

				public String getBMI_VALUE () {
					return this.BMI_VALUE;
				}
				
			    public String ALS;

				public String getALS () {
					return this.ALS;
				}
				
			    public String ALS_VALUE;

				public String getALS_VALUE () {
					return this.ALS_VALUE;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_PARO_VALUE;

				public String getALS_PARO_VALUE () {
					return this.ALS_PARO_VALUE;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_SALI_VALUE;

				public String getALS_SALI_VALUE () {
					return this.ALS_SALI_VALUE;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_DEGL_VALUE;

				public String getALS_DEGL_VALUE () {
					return this.ALS_DEGL_VALUE;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_ERCI_VALUE;

				public String getALS_ERCI_VALUE () {
					return this.ALS_ERCI_VALUE;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_SGAS_VALUE;

				public String getALS_SGAS_VALUE () {
					return this.ALS_SGAS_VALUE;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_AGAS_VALUE;

				public String getALS_AGAS_VALUE () {
					return this.ALS_AGAS_VALUE;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_HABI_VALUE;

				public String getALS_HABI_VALUE () {
					return this.ALS_HABI_VALUE;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_LITD_VALUE;

				public String getALS_LITD_VALUE () {
					return this.ALS_LITD_VALUE;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_MARC_VALUE;

				public String getALS_MARC_VALUE () {
					return this.ALS_MARC_VALUE;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ESCA_VALUE;

				public String getALS_ESCA_VALUE () {
					return this.ALS_ESCA_VALUE;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_dyspne_VALUE;

				public String getALS_ALS_dyspne_VALUE () {
					return this.ALS_ALS_dyspne_VALUE;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_ALS_orthopne_VALUE;

				public String getALS_ALS_orthopne_VALUE () {
					return this.ALS_ALS_orthopne_VALUE;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				
			    public String ALS_INSR_VALUE;

				public String getALS_INSR_VALUE () {
					return this.ALS_INSR_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATEXAM = readString(dis);
					
					this.DATEXAM_VALUE = readString(dis);
					
					this.HEIGHT = readString(dis);
					
					this.HEIGHT_VALUE = readString(dis);
					
					this.WEIGHT_REF = readString(dis);
					
					this.WEIGHT_REF_VALUE = readString(dis);
					
					this.WEIGHT = readString(dis);
					
					this.WEIGHT_VALUE = readString(dis);
					
					this.BMI = readString(dis);
					
					this.BMI_VALUE = readString(dis);
					
					this.ALS = readString(dis);
					
					this.ALS_VALUE = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_PARO_VALUE = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_SALI_VALUE = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_DEGL_VALUE = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_ERCI_VALUE = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_SGAS_VALUE = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_AGAS_VALUE = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_HABI_VALUE = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_LITD_VALUE = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_MARC_VALUE = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ESCA_VALUE = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_dyspne_VALUE = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_ALS_orthopne_VALUE = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
					this.ALS_INSR_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATEXAM,dos);
					
					// String
				
						writeString(this.DATEXAM_VALUE,dos);
					
					// String
				
						writeString(this.HEIGHT,dos);
					
					// String
				
						writeString(this.HEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT_REF,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT,dos);
					
					// String
				
						writeString(this.WEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.BMI,dos);
					
					// String
				
						writeString(this.BMI_VALUE,dos);
					
					// String
				
						writeString(this.ALS,dos);
					
					// String
				
						writeString(this.ALS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_PARO_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_SALI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_DEGL_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_ERCI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_SGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_HABI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_LITD_VALUE,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_MARC_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ESCA_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
					// String
				
						writeString(this.ALS_INSR_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATEXAM="+DATEXAM);
		sb.append(",DATEXAM_VALUE="+DATEXAM_VALUE);
		sb.append(",HEIGHT="+HEIGHT);
		sb.append(",HEIGHT_VALUE="+HEIGHT_VALUE);
		sb.append(",WEIGHT_REF="+WEIGHT_REF);
		sb.append(",WEIGHT_REF_VALUE="+WEIGHT_REF_VALUE);
		sb.append(",WEIGHT="+WEIGHT);
		sb.append(",WEIGHT_VALUE="+WEIGHT_VALUE);
		sb.append(",BMI="+BMI);
		sb.append(",BMI_VALUE="+BMI_VALUE);
		sb.append(",ALS="+ALS);
		sb.append(",ALS_VALUE="+ALS_VALUE);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_PARO_VALUE="+ALS_PARO_VALUE);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_SALI_VALUE="+ALS_SALI_VALUE);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_DEGL_VALUE="+ALS_DEGL_VALUE);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_ERCI_VALUE="+ALS_ERCI_VALUE);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_SGAS_VALUE="+ALS_SGAS_VALUE);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_AGAS_VALUE="+ALS_AGAS_VALUE);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_HABI_VALUE="+ALS_HABI_VALUE);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_LITD_VALUE="+ALS_LITD_VALUE);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_MARC_VALUE="+ALS_MARC_VALUE);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ESCA_VALUE="+ALS_ESCA_VALUE);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_dyspne_VALUE="+ALS_ALS_dyspne_VALUE);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_ALS_orthopne_VALUE="+ALS_ALS_orthopne_VALUE);
		sb.append(",ALS_INSR="+ALS_INSR);
		sb.append(",ALS_INSR_VALUE="+ALS_INSR_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATEXAM;

				public String getDATEXAM () {
					return this.DATEXAM;
				}
				
			    public String DATEXAM_VALUE;

				public String getDATEXAM_VALUE () {
					return this.DATEXAM_VALUE;
				}
				
			    public String HEIGHT;

				public String getHEIGHT () {
					return this.HEIGHT;
				}
				
			    public String HEIGHT_VALUE;

				public String getHEIGHT_VALUE () {
					return this.HEIGHT_VALUE;
				}
				
			    public String WEIGHT_REF;

				public String getWEIGHT_REF () {
					return this.WEIGHT_REF;
				}
				
			    public String WEIGHT_REF_VALUE;

				public String getWEIGHT_REF_VALUE () {
					return this.WEIGHT_REF_VALUE;
				}
				
			    public String WEIGHT;

				public String getWEIGHT () {
					return this.WEIGHT;
				}
				
			    public String WEIGHT_VALUE;

				public String getWEIGHT_VALUE () {
					return this.WEIGHT_VALUE;
				}
				
			    public String BMI;

				public String getBMI () {
					return this.BMI;
				}
				
			    public String BMI_VALUE;

				public String getBMI_VALUE () {
					return this.BMI_VALUE;
				}
				
			    public String ALS;

				public String getALS () {
					return this.ALS;
				}
				
			    public String ALS_VALUE;

				public String getALS_VALUE () {
					return this.ALS_VALUE;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_PARO_VALUE;

				public String getALS_PARO_VALUE () {
					return this.ALS_PARO_VALUE;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_SALI_VALUE;

				public String getALS_SALI_VALUE () {
					return this.ALS_SALI_VALUE;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_DEGL_VALUE;

				public String getALS_DEGL_VALUE () {
					return this.ALS_DEGL_VALUE;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_ERCI_VALUE;

				public String getALS_ERCI_VALUE () {
					return this.ALS_ERCI_VALUE;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_SGAS_VALUE;

				public String getALS_SGAS_VALUE () {
					return this.ALS_SGAS_VALUE;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_AGAS_VALUE;

				public String getALS_AGAS_VALUE () {
					return this.ALS_AGAS_VALUE;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_HABI_VALUE;

				public String getALS_HABI_VALUE () {
					return this.ALS_HABI_VALUE;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_LITD_VALUE;

				public String getALS_LITD_VALUE () {
					return this.ALS_LITD_VALUE;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_MARC_VALUE;

				public String getALS_MARC_VALUE () {
					return this.ALS_MARC_VALUE;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ESCA_VALUE;

				public String getALS_ESCA_VALUE () {
					return this.ALS_ESCA_VALUE;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_dyspne_VALUE;

				public String getALS_ALS_dyspne_VALUE () {
					return this.ALS_ALS_dyspne_VALUE;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_ALS_orthopne_VALUE;

				public String getALS_ALS_orthopne_VALUE () {
					return this.ALS_ALS_orthopne_VALUE;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				
			    public String ALS_INSR_VALUE;

				public String getALS_INSR_VALUE () {
					return this.ALS_INSR_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATEXAM = readString(dis);
					
					this.DATEXAM_VALUE = readString(dis);
					
					this.HEIGHT = readString(dis);
					
					this.HEIGHT_VALUE = readString(dis);
					
					this.WEIGHT_REF = readString(dis);
					
					this.WEIGHT_REF_VALUE = readString(dis);
					
					this.WEIGHT = readString(dis);
					
					this.WEIGHT_VALUE = readString(dis);
					
					this.BMI = readString(dis);
					
					this.BMI_VALUE = readString(dis);
					
					this.ALS = readString(dis);
					
					this.ALS_VALUE = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_PARO_VALUE = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_SALI_VALUE = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_DEGL_VALUE = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_ERCI_VALUE = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_SGAS_VALUE = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_AGAS_VALUE = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_HABI_VALUE = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_LITD_VALUE = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_MARC_VALUE = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ESCA_VALUE = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_dyspne_VALUE = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_ALS_orthopne_VALUE = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
					this.ALS_INSR_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATEXAM,dos);
					
					// String
				
						writeString(this.DATEXAM_VALUE,dos);
					
					// String
				
						writeString(this.HEIGHT,dos);
					
					// String
				
						writeString(this.HEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT_REF,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT,dos);
					
					// String
				
						writeString(this.WEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.BMI,dos);
					
					// String
				
						writeString(this.BMI_VALUE,dos);
					
					// String
				
						writeString(this.ALS,dos);
					
					// String
				
						writeString(this.ALS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_PARO_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_SALI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_DEGL_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_ERCI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_SGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_HABI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_LITD_VALUE,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_MARC_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ESCA_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
					// String
				
						writeString(this.ALS_INSR_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATEXAM="+DATEXAM);
		sb.append(",DATEXAM_VALUE="+DATEXAM_VALUE);
		sb.append(",HEIGHT="+HEIGHT);
		sb.append(",HEIGHT_VALUE="+HEIGHT_VALUE);
		sb.append(",WEIGHT_REF="+WEIGHT_REF);
		sb.append(",WEIGHT_REF_VALUE="+WEIGHT_REF_VALUE);
		sb.append(",WEIGHT="+WEIGHT);
		sb.append(",WEIGHT_VALUE="+WEIGHT_VALUE);
		sb.append(",BMI="+BMI);
		sb.append(",BMI_VALUE="+BMI_VALUE);
		sb.append(",ALS="+ALS);
		sb.append(",ALS_VALUE="+ALS_VALUE);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_PARO_VALUE="+ALS_PARO_VALUE);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_SALI_VALUE="+ALS_SALI_VALUE);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_DEGL_VALUE="+ALS_DEGL_VALUE);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_ERCI_VALUE="+ALS_ERCI_VALUE);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_SGAS_VALUE="+ALS_SGAS_VALUE);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_AGAS_VALUE="+ALS_AGAS_VALUE);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_HABI_VALUE="+ALS_HABI_VALUE);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_LITD_VALUE="+ALS_LITD_VALUE);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_MARC_VALUE="+ALS_MARC_VALUE);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ESCA_VALUE="+ALS_ESCA_VALUE);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_dyspne_VALUE="+ALS_ALS_dyspne_VALUE);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_ALS_orthopne_VALUE="+ALS_ALS_orthopne_VALUE);
		sb.append(",ALS_INSR="+ALS_INSR);
		sb.append(",ALS_INSR_VALUE="+ALS_INSR_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_1Process(globalMap);
		tDBInput_15Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_9Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_11Process(globalMap);
		tDBInput_12Process(globalMap);
		tDBInput_13Process(globalMap);
		tDBInput_14Process(globalMap);

		row1Struct row1 = new row1Struct();
out4Struct out4 = new out4Struct();
out2Struct out2 = new out2Struct();
out1Struct out1 = new out1Struct();
out5Struct out5 = new out5Struct();
out6Struct out6 = new out6Struct();
out7Struct out7 = new out7Struct();
out8Struct out8 = new out8Struct();
out9Struct out9 = new out9Struct();
out10Struct out10 = new out10Struct();
out11Struct out11 = new out11Struct();
out12Struct out12 = new out12Struct();
out13Struct out13 = new out13Struct();
out14Struct out14 = new out14Struct();
out15Struct out15 = new out15Struct();
out16Struct out16 = new out16Struct();
row4Struct row4 = new row4Struct();
row7Struct row7 = new row7Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();




















	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_2_SortOut = 0;
		


class Comparablerow4Struct extends row4Struct implements Comparable<Comparablerow4Struct> {
	
	public int compareTo(Comparablerow4Struct other) {

		if(this.patient_key != other.patient_key){
						
				return this.patient_key > other.patient_key ? 1 : -1;
							
		}
		return 0;
	}
}

java.util.List<Comparablerow4Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow4Struct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */




	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow5Struct extends row5Struct implements Comparable<Comparablerow5Struct> {
	
	public int compareTo(Comparablerow5Struct other) {

		if(this.patient_key != other.patient_key){
						
				return this.patient_key > other.patient_key ? 1 : -1;
							
		}
		if(this.date_examination_key != other.date_examination_key){
						
				return this.date_examination_key > other.date_examination_key ? 1 : -1;
							
		}
		return 0;
	}
}

java.util.List<Comparablerow5Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow5Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					int patient_key;
					int date_examination_key;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.patient_key;
									
									result = prime * result + (int) this.date_examination_key;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.patient_key != other.patient_key) 
										return false;
								
									if (this.date_examination_key != other.date_examination_key) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
	String ND;
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
out16Struct out16_tmp = new out16Struct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
	String ND;
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
out15Struct out15_tmp = new out15Struct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
	String ND;
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
out14Struct out14_tmp = new out14Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
	String ND;
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out13Struct out13_tmp = new out13Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
	String ND;
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
out12Struct out12_tmp = new out12Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
	String ND;
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	String ND;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	String ND;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	String ND;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	String ND;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String ND;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String ND;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String ND;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)context.EXCEL_CLIN_1_RowSeparator).length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_RowSeparator).toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */context.EXCEL_CLIN_1_File/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_Encoding);
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_Header; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_Encoding);
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_Header;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)context.EXCEL_CLIN_1_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1._hash_ipp = null;
					
							row1.SEX = null;
					
							row1.DOB = null;
					
							row1.DIAGPROBA = null;
					
							row1.DATEDIAG = null;
					
							row1.FIRSTSYMPTOM = null;
					
							row1.LIEUDEB = null;
					
							row1.AGE_DEBUT = null;
					
							row1.DATEXAM = null;
					
							row1.DATEXAM_VALUE = null;
					
							row1.HEIGHT = null;
					
							row1.HEIGHT_VALUE = null;
					
							row1.WEIGHT_REF = null;
					
							row1.WEIGHT_REF_VALUE = null;
					
							row1.WEIGHT = null;
					
							row1.WEIGHT_VALUE = null;
					
							row1.BMI = null;
					
							row1.BMI_VALUE = null;
					
							row1.ALS = null;
					
							row1.ALS_VALUE = null;
					
							row1.ALS_PARO = null;
					
							row1.ALS_PARO_VALUE = null;
					
							row1.ALS_SALI = null;
					
							row1.ALS_SALI_VALUE = null;
					
							row1.ALS_DEGL = null;
					
							row1.ALS_DEGL_VALUE = null;
					
							row1.ALS_ERCI = null;
					
							row1.ALS_ERCI_VALUE = null;
					
							row1.ALS_SGAS = null;
					
							row1.ALS_SGAS_VALUE = null;
					
							row1.ALS_AGAS = null;
					
							row1.ALS_AGAS_VALUE = null;
					
							row1.ALS_HABI = null;
					
							row1.ALS_HABI_VALUE = null;
					
							row1.ALS_LITD = null;
					
							row1.ALS_LITD_VALUE = null;
					
							row1.ALS_MARC = null;
					
							row1.ALS_MARC_VALUE = null;
					
							row1.ALS_ESCA = null;
					
							row1.ALS_ESCA_VALUE = null;
					
							row1.ALS_ALS_dyspne = null;
					
							row1.ALS_ALS_dyspne_VALUE = null;
					
							row1.ALS_ALS_orthopne = null;
					
							row1.ALS_ALS_orthopne_VALUE = null;
					
							row1.ALS_INSR = null;
					
							row1.ALS_INSR_VALUE = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1._hash_ipp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1._hash_ipp = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SEX = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SEX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DIAGPROBA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DIAGPROBA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEDIAG = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEDIAG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FIRSTSYMPTOM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FIRSTSYMPTOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LIEUDEB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LIEUDEB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AGE_DEBUT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AGE_DEBUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEXAM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEXAM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEXAM_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEXAM_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HEIGHT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HEIGHT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HEIGHT_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HEIGHT_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_REF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_REF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_REF_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_REF_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.BMI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.BMI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.BMI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.BMI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_PARO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_PARO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_PARO_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_PARO_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SALI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SALI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SALI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SALI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_DEGL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_DEGL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_DEGL_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_DEGL_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ERCI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ERCI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ERCI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ERCI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SGAS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SGAS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SGAS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_AGAS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_AGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_AGAS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_AGAS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_HABI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_HABI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_HABI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_HABI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_LITD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_LITD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_LITD_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_LITD_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_MARC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_MARC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_MARC_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_MARC_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ESCA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ESCA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ESCA_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ESCA_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_dyspne = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_dyspne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_dyspne_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_dyspne_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_orthopne = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_orthopne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_orthopne_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_orthopne_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_INSR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_INSR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_INSR_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_INSR_VALUE = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
// # Filter conditions 
if( 

row1.DATEXAM_VALUE !=null && ( row1.HEIGHT_VALUE !=null ||  row1.WEIGHT_REF_VALUE !=null ||  row1.WEIGHT_VALUE != null ||  row1.BMI_VALUE != null ||  row1.ALS_VALUE != null )

 ) {
out4_tmp._hash_ipp = row1._hash_ipp ;
out4_tmp.SEX = row1.SEX ;
out4_tmp.DOB = row1.DOB ;
out4_tmp.DIAGPROBA = row1.DIAGPROBA ;
out4_tmp.DATEDIAG = row1.DATEDIAG ;
out4_tmp.FIRSTSYMPTOM = row1.FIRSTSYMPTOM ;
out4_tmp.LIEUDEB = row1.LIEUDEB ;
out4_tmp.AGE_DEBUT = row1.AGE_DEBUT ;
out4_tmp.DATEXAM_Val = row1.DATEXAM_VALUE;
out4_tmp.HEIGHT_Val = row1.HEIGHT_VALUE;
out4_tmp.WEIGHT_REF_Val = row1.WEIGHT_REF_VALUE;
out4_tmp.WEIGHT_Val = row1.WEIGHT_VALUE;
out4_tmp.BMI_Val = row1.BMI_VALUE;
out4_tmp.ALS_Val = row1.ALS_VALUE;
out4_tmp.ALS_PARO_Val = row1.ALS_PARO_VALUE;
out4_tmp.ALS_SALI_Val = row1.ALS_SALI_VALUE;
out4_tmp.ALS_DEGL_Val = row1.ALS_DEGL_VALUE;
out4_tmp.ALS_ERCI_Val = row1.ALS_ERCI_VALUE;
out4_tmp.ALS_SGAS_Val = row1.ALS_SGAS_VALUE;
out4_tmp.ALS_AGAS_Val = row1.ALS_AGAS_VALUE;
out4_tmp.ALS_HABI_Val = row1.ALS_HABI_VALUE;
out4_tmp.ALS_LITD_Val = row1.ALS_LITD_VALUE;
out4_tmp.ALS_MARC_Val = row1.ALS_MARC_VALUE;
out4_tmp.ALS_ESCA_Val = row1.ALS_ESCA_VALUE;
out4_tmp.ALS_ALS_dyspne_Val = row1.ALS_ALS_dyspne_VALUE;
out4_tmp.ALS_ALS_orthopne_Val = row1.ALS_ALS_orthopne_VALUE ;
out4_tmp.ALS_INSR_Val = row1.ALS_INSR_VALUE;
out4_tmp.ALS_PARO = row1.ALS_PARO ;
out4_tmp.ALS_SALI = row1.ALS_SALI ;
out4_tmp.ALS_DEGL = row1.ALS_DEGL ;
out4_tmp.ALS_ERCI = row1.ALS_ERCI ;
out4_tmp.ALS_SGAS = row1.ALS_SGAS ;
out4_tmp.ALS_AGAS = row1.ALS_AGAS ;
out4_tmp.ALS_HABI = row1.ALS_HABI ;
out4_tmp.ALS_LITD = row1.ALS_LITD ;
out4_tmp.ALS_MARC = row1.ALS_MARC ;
out4_tmp.ALS_ESCA = row1.ALS_ESCA ;
out4_tmp.ALS_ALS_dyspne = row1.ALS_ALS_dyspne ;
out4_tmp.ALS_ALS_orthopne = row1.ALS_ALS_orthopne ;
out4_tmp.ALS_INSR = row1.ALS_INSR ;
out4 = out4_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//out4
			//out4


			
				if(execStat){
					runStat.updateStatOnConnection("out4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		row2HashKey.date_examination_full = out4.DATEXAM_Val ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		row3HashKey.ipp_hash = out4._hash_ipp ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							row3Struct row3 = null;
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out2 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out2'
out2_tmp.patient_key = row3.patient_key ;
out2_tmp.date_examination_key = row2.date_examination_key ;
out2_tmp.HEIGHT_Val = out4.HEIGHT_Val ;
out2_tmp.WEIGHT_REF_Val = out4.WEIGHT_REF_Val ;
out2_tmp.WEIGHT_Val = out4.WEIGHT_Val ;
out2_tmp.BMI_Val = out4.BMI_Val ;
out2_tmp.ALS_Val = out4.ALS_Val ;
out2_tmp.ALS_PARO_Val = out4.ALS_PARO_Val ;
out2_tmp.ALS_SALI_Val = out4.ALS_SALI_Val ;
out2_tmp.ALS_DEGL_Val = out4.ALS_DEGL_Val ;
out2_tmp.ALS_ERCI_Val = out4.ALS_ERCI_Val ;
out2_tmp.ALS_SGAS_Val = out4.ALS_SGAS_Val ;
out2_tmp.ALS_AGAS_Val = out4.ALS_AGAS_Val ;
out2_tmp.ALS_HABI_Val = out4.ALS_HABI_Val ;
out2_tmp.ALS_LITD_Val = out4.ALS_LITD_Val ;
out2_tmp.ALS_MARC_Val = out4.ALS_MARC_Val ;
out2_tmp.ALS_ESCA_Val = out4.ALS_ESCA_Val ;
out2_tmp.ALS_ALS_dyspne_Val = out4.ALS_ALS_dyspne_Val ;
out2_tmp.ALS_ALS_orthopne_Val = out4.ALS_ALS_orthopne_Val ;
out2_tmp.ALS_INSR_Val = out4.ALS_INSR_Val ;
out2_tmp.ALS_PARO = out4.ALS_PARO ;
out2_tmp.ALS_SALI = out4.ALS_SALI ;
out2_tmp.ALS_DEGL = out4.ALS_DEGL ;
out2_tmp.ALS_ERCI = out4.ALS_ERCI ;
out2_tmp.ALS_SGAS = out4.ALS_SGAS ;
out2_tmp.ALS_AGAS = out4.ALS_AGAS ;
out2_tmp.ALS_HABI = out4.ALS_HABI ;
out2_tmp.ALS_LITD = out4.ALS_LITD ;
out2_tmp.ALS_MARC = out4.ALS_MARC ;
out2_tmp.ALS_ESCA = out4.ALS_ESCA ;
out2_tmp.ALS_ALS_dyspne = out4.ALS_ALS_dyspne ;
out2_tmp.ALS_ALS_orthopne = out4.ALS_ALS_orthopne ;
out2_tmp.ALS_INSR = out4.ALS_INSR ;
out2 = out2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row22HashKey.attribute_name_abrev = out2.ALS_INSR;
                        		    		
                        		    		row22HashKey.attribute_value = out2.ALS_INSR_Val;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow22 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow22 = true;
			           		  	} // G 21
                    		  	
                    		

							row22Struct row22 = null;
                    		  	 
							

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) || forceLooprow22) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row22'
									
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								
								if(!forceLooprow22) { // G 46
								
							
								 
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow22 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.patient_key = out2.patient_key ;
out1_tmp.date_examination_key = out2.date_examination_key ;
out1_tmp.HEIGHT_Val = out2.HEIGHT_Val
!=null && out2.HEIGHT_Val.trim ().length ()> 0?
Float.parseFloat(out2.HEIGHT_Val) :null ;
out1_tmp.WEIGHT_REF_Val = out2.WEIGHT_REF_Val
!=null && out2.WEIGHT_REF_Val
.trim ().length ()> 0?
Float.parseFloat(out2.WEIGHT_REF_Val
) :null ;
out1_tmp.WEIGHT_Val = out2.WEIGHT_Val 
!=null && out2.WEIGHT_Val 
.trim ().length ()> 0?
Float.parseFloat(out2.WEIGHT_Val 
) :null ;
out1_tmp.BMI_Val = out2.BMI_Val
!=null && out2.BMI_Val
.trim ().length ()> 0?
Float.parseFloat(out2.BMI_Val
) :null ;
out1_tmp.ALS_Val = out2.ALS_Val!=null && out2.ALS_Val
.trim ().length ()> 0?
Float.parseFloat(out2.ALS_Val
):null ;
out1_tmp.ALS_INSR_F = out2.ALS_INSR_Val == null || out2.ALS_INSR_Val.isEmpty()
?Var.ND : 
row22.score_value ;
out1_tmp.ALS_PARO_Val = out2.ALS_PARO_Val ;
out1_tmp.ALS_SALI_Val = out2.ALS_SALI_Val ;
out1_tmp.ALS_DEGL_Val = out2.ALS_DEGL_Val ;
out1_tmp.ALS_ERCI_Val = out2.ALS_ERCI_Val ;
out1_tmp.ALS_SGAS_Val = out2.ALS_SGAS_Val ;
out1_tmp.ALS_AGAS_Val = out2.ALS_AGAS_Val ;
out1_tmp.ALS_HABI_Val = out2.ALS_HABI_Val ;
out1_tmp.ALS_LITD_Val = out2.ALS_LITD_Val ;
out1_tmp.ALS_MARC_Val = out2.ALS_MARC_Val ;
out1_tmp.ALS_ESCA_Val = out2.ALS_ESCA_Val ;
out1_tmp.ALS_ALS_dyspne_Val = out2.ALS_ALS_dyspne_Val ;
out1_tmp.ALS_ALS_orthopne_Val = out2.ALS_ALS_orthopne_Val ;
out1_tmp.ALS_PARO = out2.ALS_PARO ;
out1_tmp.ALS_SALI = out2.ALS_SALI ;
out1_tmp.ALS_DEGL = out2.ALS_DEGL ;
out1_tmp.ALS_ERCI = out2.ALS_ERCI ;
out1_tmp.ALS_SGAS = out2.ALS_SGAS ;
out1_tmp.ALS_AGAS = out2.ALS_AGAS ;
out1_tmp.ALS_HABI = out2.ALS_HABI ;
out1_tmp.ALS_LITD = out2.ALS_LITD ;
out1_tmp.ALS_MARC = out2.ALS_MARC ;
out1_tmp.ALS_ESCA = out2.ALS_ESCA ;
out1_tmp.ALS_ALS_dyspne = out2.ALS_ALS_dyspne ;
out1_tmp.ALS_ALS_orthopne = out2.ALS_ALS_orthopne ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		row10HashKey.attribute_name_abrev = out1.ALS_PARO ;
                        		    		
                        		    		row10HashKey.attribute_value = out1.ALS_PARO_Val ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.attribute_name_abrev = '" + row10HashKey.attribute_name_abrev + "', row10.attribute_value = '" + row10HashKey.attribute_value + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.patient_key = out1.patient_key ;
out5_tmp.date_examination_key = out1.date_examination_key ;
out5_tmp.HEIGHT_Val = out1.HEIGHT_Val ;
out5_tmp.WEIGHT_REF_Val = out1.WEIGHT_REF_Val ;
out5_tmp.WEIGHT_Val = out1.WEIGHT_Val ;
out5_tmp.BMI_Val = out1.BMI_Val ;
out5_tmp.ALS_Val = out1.ALS_Val ;
out5_tmp.ALS_INSR_F = out1.ALS_INSR_F ;
out5_tmp.ALS_PARO_F = out1.ALS_PARO_Val == null || out1.ALS_PARO_Val.isEmpty()
?Var.ND : 
row10.score_value ;
out5_tmp.ALS_SALI_Val = out1.ALS_SALI_Val ;
out5_tmp.ALS_DEGL_Val = out1.ALS_DEGL_Val ;
out5_tmp.ALS_ERCI_Val = out1.ALS_ERCI_Val ;
out5_tmp.ALS_SGAS_Val = out1.ALS_SGAS_Val ;
out5_tmp.ALS_AGAS_Val = out1.ALS_AGAS_Val ;
out5_tmp.ALS_HABI_Val = out1.ALS_HABI_Val ;
out5_tmp.ALS_LITD_Val = out1.ALS_LITD_Val ;
out5_tmp.ALS_MARC_Val = out1.ALS_MARC_Val ;
out5_tmp.ALS_ESCA_Val = out1.ALS_ESCA_Val ;
out5_tmp.ALS_ALS_dyspne_Val = out1.ALS_ALS_dyspne_Val ;
out5_tmp.ALS_ALS_orthopne_Val = out1.ALS_ALS_orthopne_Val ;
out5_tmp.ALS_SALI = out1.ALS_SALI ;
out5_tmp.ALS_DEGL = out1.ALS_DEGL ;
out5_tmp.ALS_ERCI = out1.ALS_ERCI ;
out5_tmp.ALS_SGAS = out1.ALS_SGAS ;
out5_tmp.ALS_AGAS = out1.ALS_AGAS ;
out5_tmp.ALS_HABI = out1.ALS_HABI ;
out5_tmp.ALS_LITD = out1.ALS_LITD ;
out5_tmp.ALS_MARC = out1.ALS_MARC ;
out5_tmp.ALS_ESCA = out1.ALS_ESCA ;
out5_tmp.ALS_ALS_dyspne = out1.ALS_ALS_dyspne ;
out5_tmp.ALS_ALS_orthopne = out1.ALS_ALS_orthopne ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//out5
			//out5


			
				if(execStat){
					runStat.updateStatOnConnection("out5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		row11HashKey.attribute_name_abrev = out5.ALS_SALI ;
                        		    		
                        		    		row11HashKey.attribute_value = out5.ALS_SALI_Val ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.attribute_name_abrev = '" + row11HashKey.attribute_name_abrev + "', row11.attribute_value = '" + row11HashKey.attribute_value + "'");
								} // G 071
							

							row11Struct row11 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.patient_key = out5.patient_key ;
out6_tmp.date_examination_key = out5.date_examination_key ;
out6_tmp.HEIGHT_Val = out5.HEIGHT_Val ;
out6_tmp.WEIGHT_REF_Val = out5.WEIGHT_REF_Val ;
out6_tmp.WEIGHT_Val = out5.WEIGHT_Val ;
out6_tmp.BMI_Val = out5.BMI_Val ;
out6_tmp.ALS_Val = out5.ALS_Val ;
out6_tmp.ALS_INSR_F = out5.ALS_INSR_F ;
out6_tmp.ALS_PARO_F = out5.ALS_PARO_F ;
out6_tmp.ALS_SALI_F = out5.ALS_SALI_Val == null || out5.ALS_SALI_Val.isEmpty()
?Var.ND : 
row11.score_value ;
out6_tmp.ALS_DEGL_Val = out5.ALS_DEGL_Val ;
out6_tmp.ALS_ERCI_Val = out5.ALS_ERCI_Val ;
out6_tmp.ALS_SGAS_Val = out5.ALS_SGAS_Val ;
out6_tmp.ALS_AGAS_Val = out5.ALS_AGAS_Val ;
out6_tmp.ALS_HABI_Val = out5.ALS_HABI_Val ;
out6_tmp.ALS_LITD_Val = out5.ALS_LITD_Val ;
out6_tmp.ALS_MARC_Val = out5.ALS_MARC_Val ;
out6_tmp.ALS_ESCA_Val = out5.ALS_ESCA_Val ;
out6_tmp.ALS_ALS_dyspne_Val = out5.ALS_ALS_dyspne_Val ;
out6_tmp.ALS_ALS_orthopne_Val = out5.ALS_ALS_orthopne_Val ;
out6_tmp.ALS_DEGL = out5.ALS_DEGL ;
out6_tmp.ALS_ERCI = out5.ALS_ERCI ;
out6_tmp.ALS_SGAS = out5.ALS_SGAS ;
out6_tmp.ALS_AGAS = out5.ALS_AGAS ;
out6_tmp.ALS_HABI = out5.ALS_HABI ;
out6_tmp.ALS_LITD = out5.ALS_LITD ;
out6_tmp.ALS_MARC = out5.ALS_MARC ;
out6_tmp.ALS_ESCA = out5.ALS_ESCA ;
out6_tmp.ALS_ALS_dyspne = out5.ALS_ALS_dyspne ;
out6_tmp.ALS_ALS_orthopne = out5.ALS_ALS_orthopne ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//out6
			//out6


			
				if(execStat){
					runStat.updateStatOnConnection("out6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		row12HashKey.attribute_name_abrev = out6.ALS_DEGL;
                        		    		
                        		    		row12HashKey.attribute_value = out6.ALS_DEGL_Val;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.attribute_name_abrev = '" + row12HashKey.attribute_name_abrev + "', row12.attribute_value = '" + row12HashKey.attribute_value + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out7 = null;


// # Output table : 'out7'
out7_tmp.patient_key = out6.patient_key ;
out7_tmp.date_examination_key = out6.date_examination_key ;
out7_tmp.HEIGHT_Val = out6.HEIGHT_Val ;
out7_tmp.WEIGHT_REF_Val = out6.WEIGHT_REF_Val ;
out7_tmp.WEIGHT_Val = out6.WEIGHT_Val ;
out7_tmp.BMI_Val = out6.BMI_Val ;
out7_tmp.ALS_Val = out6.ALS_Val ;
out7_tmp.ALS_INSR_F = out6.ALS_INSR_F ;
out7_tmp.ALS_PARO_F = out6.ALS_PARO_F ;
out7_tmp.ALS_SALI_F = out6.ALS_SALI_F ;
out7_tmp.ALS_DEGL_F = out6.ALS_DEGL_Val == null || out6.ALS_DEGL_Val.isEmpty()
?Var.ND : 
row12.score_value ;
out7_tmp.ALS_ERCI_Val = out6.ALS_ERCI_Val ;
out7_tmp.ALS_SGAS_Val = out6.ALS_SGAS_Val ;
out7_tmp.ALS_AGAS_Val = out6.ALS_AGAS_Val ;
out7_tmp.ALS_HABI_Val = out6.ALS_HABI_Val ;
out7_tmp.ALS_LITD_Val = out6.ALS_LITD_Val ;
out7_tmp.ALS_MARC_Val = out6.ALS_MARC_Val ;
out7_tmp.ALS_ESCA_Val = out6.ALS_ESCA_Val ;
out7_tmp.ALS_ALS_dyspne_Val = out6.ALS_ALS_dyspne_Val ;
out7_tmp.ALS_ALS_orthopne_Val = out6.ALS_ALS_orthopne_Val ;
out7_tmp.ALS_ERCI = out6.ALS_ERCI ;
out7_tmp.ALS_SGAS = out6.ALS_SGAS ;
out7_tmp.ALS_AGAS = out6.ALS_AGAS ;
out7_tmp.ALS_HABI = out6.ALS_HABI ;
out7_tmp.ALS_LITD = out6.ALS_LITD ;
out7_tmp.ALS_MARC = out6.ALS_MARC ;
out7_tmp.ALS_ESCA = out6.ALS_ESCA ;
out7_tmp.ALS_ALS_dyspne = out6.ALS_ALS_dyspne ;
out7_tmp.ALS_ALS_orthopne = out6.ALS_ALS_orthopne ;
out7 = out7_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//out7
			//out7


			
				if(execStat){
					runStat.updateStatOnConnection("out7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row13HashKey.attribute_name_abrev = out7.ALS_ERCI ;
                        		    		
                        		    		row13HashKey.attribute_value = out7.ALS_ERCI_Val ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.attribute_name_abrev = '" + row13HashKey.attribute_name_abrev + "', row13.attribute_value = '" + row13HashKey.attribute_value + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
out8_tmp.patient_key = out7.patient_key ;
out8_tmp.date_examination_key = out7.date_examination_key ;
out8_tmp.HEIGHT_Val = out7.HEIGHT_Val ;
out8_tmp.WEIGHT_REF_Val = out7.WEIGHT_REF_Val ;
out8_tmp.WEIGHT_Val = out7.WEIGHT_Val ;
out8_tmp.BMI_Val = out7.BMI_Val ;
out8_tmp.ALS_Val = out7.ALS_Val ;
out8_tmp.ALS_INSR_F = out7.ALS_INSR_F ;
out8_tmp.ALS_PARO_F = out7.ALS_PARO_F ;
out8_tmp.ALS_SALI_F = out7.ALS_SALI_F ;
out8_tmp.ALS_DEGL_F = out7.ALS_DEGL_F ;
out8_tmp.ALS_ERCI_F = out7.ALS_ERCI_Val == null || out7.ALS_ERCI_Val.isEmpty()
?Var.ND : 
row13.score_value ;
out8_tmp.ALS_SGAS_Val = out7.ALS_SGAS_Val ;
out8_tmp.ALS_AGAS_Val = out7.ALS_AGAS_Val ;
out8_tmp.ALS_HABI_Val = out7.ALS_HABI_Val ;
out8_tmp.ALS_LITD_Val = out7.ALS_LITD_Val ;
out8_tmp.ALS_MARC_Val = out7.ALS_MARC_Val ;
out8_tmp.ALS_ESCA_Val = out7.ALS_ESCA_Val ;
out8_tmp.ALS_ALS_dyspne_Val = out7.ALS_ALS_dyspne_Val ;
out8_tmp.ALS_ALS_orthopne_Val = out7.ALS_ALS_orthopne_Val ;
out8_tmp.ALS_SGAS = out7.ALS_SGAS ;
out8_tmp.ALS_AGAS = out7.ALS_AGAS ;
out8_tmp.ALS_HABI = out7.ALS_HABI ;
out8_tmp.ALS_LITD = out7.ALS_LITD ;
out8_tmp.ALS_MARC = out7.ALS_MARC ;
out8_tmp.ALS_ESCA = out7.ALS_ESCA ;
out8_tmp.ALS_ALS_dyspne = out7.ALS_ALS_dyspne ;
out8_tmp.ALS_ALS_orthopne = out7.ALS_ALS_orthopne ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

			//out8
			//out8


			
				if(execStat){
					runStat.updateStatOnConnection("out8"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		row14HashKey.attribute_name_abrev = out8.ALS_SGAS ;
                        		    		
                        		    		row14HashKey.attribute_value = out8.ALS_SGAS_Val ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.attribute_name_abrev = '" + row14HashKey.attribute_name_abrev + "', row14.attribute_value = '" + row14HashKey.attribute_value + "'");
								} // G 071
							

							row14Struct row14 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out9 = null;


// # Output table : 'out9'
out9_tmp.patient_key = out8.patient_key ;
out9_tmp.date_examination_key = out8.date_examination_key ;
out9_tmp.HEIGHT_Val = out8.HEIGHT_Val ;
out9_tmp.WEIGHT_REF_Val = out8.WEIGHT_REF_Val ;
out9_tmp.WEIGHT_Val = out8.WEIGHT_Val ;
out9_tmp.BMI_Val = out8.BMI_Val ;
out9_tmp.ALS_Val = out8.ALS_Val ;
out9_tmp.ALS_INSR_F = out8.ALS_INSR_F ;
out9_tmp.ALS_PARO_F = out8.ALS_PARO_F ;
out9_tmp.ALS_SALI_F = out8.ALS_SALI_F ;
out9_tmp.ALS_DEGL_F = out8.ALS_DEGL_F ;
out9_tmp.ALS_ERCI_F = out8.ALS_ERCI_F ;
out9_tmp.ALS_SGAS_F = out8.ALS_SGAS_Val == null || out8.ALS_SGAS_Val.isEmpty()
?Var.ND : 
row14.score_value ;
out9_tmp.ALS_AGAS_Val = out8.ALS_AGAS_Val ;
out9_tmp.ALS_HABI_Val = out8.ALS_HABI_Val ;
out9_tmp.ALS_LITD_Val = out8.ALS_LITD_Val ;
out9_tmp.ALS_MARC_Val = out8.ALS_MARC_Val ;
out9_tmp.ALS_ESCA_Val = out8.ALS_ESCA_Val ;
out9_tmp.ALS_ALS_dyspne_Val = out8.ALS_ALS_dyspne_Val ;
out9_tmp.ALS_ALS_orthopne_Val = out8.ALS_ALS_orthopne_Val ;
out9_tmp.ALS_AGAS = out8.ALS_AGAS ;
out9_tmp.ALS_HABI = out8.ALS_HABI ;
out9_tmp.ALS_LITD = out8.ALS_LITD ;
out9_tmp.ALS_MARC = out8.ALS_MARC ;
out9_tmp.ALS_ESCA = out8.ALS_ESCA ;
out9_tmp.ALS_ALS_dyspne = out8.ALS_ALS_dyspne ;
out9_tmp.ALS_ALS_orthopne = out8.ALS_ALS_orthopne ;
out9 = out9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

			//out9
			//out9


			
				if(execStat){
					runStat.updateStatOnConnection("out9"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		row15HashKey.attribute_name_abrev = out9.ALS_AGAS ;
                        		    		
                        		    		row15HashKey.attribute_value = out9.ALS_AGAS_Val ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.attribute_name_abrev = '" + row15HashKey.attribute_name_abrev + "', row15.attribute_value = '" + row15HashKey.attribute_value + "'");
								} // G 071
							

							row15Struct row15 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out10 = null;


// # Output table : 'out10'
out10_tmp.patient_key = out9.patient_key ;
out10_tmp.date_examination_key = out9.date_examination_key ;
out10_tmp.HEIGHT_Val = out9.HEIGHT_Val ;
out10_tmp.WEIGHT_REF_Val = out9.WEIGHT_REF_Val ;
out10_tmp.WEIGHT_Val = out9.WEIGHT_Val ;
out10_tmp.BMI_Val = out9.BMI_Val ;
out10_tmp.ALS_Val = out9.ALS_Val ;
out10_tmp.ALS_INSR_F = out9.ALS_INSR_F ;
out10_tmp.ALS_PARO_F = out9.ALS_PARO_F ;
out10_tmp.ALS_SALI_F = out9.ALS_SALI_F ;
out10_tmp.ALS_DEGL_F = out9.ALS_DEGL_F ;
out10_tmp.ALS_ERCI_F = out9.ALS_ERCI_F ;
out10_tmp.ALS_SGAS_F = out9.ALS_SGAS_F ;
out10_tmp.ALS_AGAS_F = out9.ALS_AGAS_Val == null || out9.ALS_AGAS_Val.isEmpty()
?Var.ND : 
row15.score_value ;
out10_tmp.ALS_HABI_Val = out9.ALS_HABI_Val ;
out10_tmp.ALS_LITD_Val = out9.ALS_LITD_Val ;
out10_tmp.ALS_MARC_Val = out9.ALS_MARC_Val ;
out10_tmp.ALS_ESCA_Val = out9.ALS_ESCA_Val ;
out10_tmp.ALS_ALS_dyspne_Val = out9.ALS_ALS_dyspne_Val ;
out10_tmp.ALS_ALS_orthopne_Val = out9.ALS_ALS_orthopne_Val ;
out10_tmp.ALS_HABI = out9.ALS_HABI ;
out10_tmp.ALS_LITD = out9.ALS_LITD ;
out10_tmp.ALS_MARC = out9.ALS_MARC ;
out10_tmp.ALS_ESCA = out9.ALS_ESCA ;
out10_tmp.ALS_ALS_dyspne = out9.ALS_ALS_dyspne ;
out10_tmp.ALS_ALS_orthopne = out9.ALS_ALS_orthopne ;
out10 = out10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

			//out10
			//out10


			
				if(execStat){
					runStat.updateStatOnConnection("out10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		row16HashKey.attribute_name_abrev = out10.ALS_HABI ;
                        		    		
                        		    		row16HashKey.attribute_value = out10.ALS_HABI_Val ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.attribute_name_abrev = '" + row16HashKey.attribute_name_abrev + "', row16.attribute_value = '" + row16HashKey.attribute_value + "'");
								} // G 071
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out11 = null;


// # Output table : 'out11'
out11_tmp.patient_key = out10.patient_key ;
out11_tmp.date_examination_key = out10.date_examination_key ;
out11_tmp.HEIGHT_Val = out10.HEIGHT_Val ;
out11_tmp.WEIGHT_REF_Val = out10.WEIGHT_REF_Val ;
out11_tmp.WEIGHT_Val = out10.WEIGHT_Val ;
out11_tmp.BMI_Val = out10.BMI_Val ;
out11_tmp.ALS_Val = out10.ALS_Val ;
out11_tmp.ALS_INSR_F = out10.ALS_INSR_F ;
out11_tmp.ALS_PARO_F = out10.ALS_PARO_F ;
out11_tmp.ALS_SALI_F = out10.ALS_SALI_F ;
out11_tmp.ALS_DEGL_F = out10.ALS_DEGL_F ;
out11_tmp.ALS_ERCI_F = out10.ALS_ERCI_F ;
out11_tmp.ALS_SGAS_F = out10.ALS_SGAS_F ;
out11_tmp.ALS_AGAS_F = out10.ALS_AGAS_F ;
out11_tmp.ALS_HABI_F = out10.ALS_HABI_Val == null || out10.ALS_HABI_Val.isEmpty()
?Var.ND : 
row16.score_value ;
out11_tmp.ALS_LITD_Val = out10.ALS_LITD_Val ;
out11_tmp.ALS_MARC_Val = out10.ALS_MARC_Val ;
out11_tmp.ALS_ESCA_Val = out10.ALS_ESCA_Val ;
out11_tmp.ALS_ALS_dyspne_Val = out10.ALS_ALS_dyspne_Val ;
out11_tmp.ALS_ALS_orthopne_Val = out10.ALS_ALS_orthopne_Val ;
out11_tmp.ALS_LITD = out10.ALS_LITD ;
out11_tmp.ALS_MARC = out10.ALS_MARC ;
out11_tmp.ALS_ESCA = out10.ALS_ESCA ;
out11_tmp.ALS_ALS_dyspne = out10.ALS_ALS_dyspne ;
out11_tmp.ALS_ALS_orthopne = out10.ALS_ALS_orthopne ;
out11 = out11_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

			//out11
			//out11


			
				if(execStat){
					runStat.updateStatOnConnection("out11"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		row17HashKey.attribute_name_abrev = out11.ALS_LITD ;
                        		    		
                        		    		row17HashKey.attribute_value = out11.ALS_LITD_Val ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.attribute_name_abrev = '" + row17HashKey.attribute_name_abrev + "', row17.attribute_value = '" + row17HashKey.attribute_value + "'");
								} // G 071
							

							row17Struct row17 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out12 = null;


// # Output table : 'out12'
out12_tmp.patient_key = out11.patient_key ;
out12_tmp.date_examination_key = out11.date_examination_key ;
out12_tmp.HEIGHT_Val = out11.HEIGHT_Val ;
out12_tmp.WEIGHT_REF_Val = out11.WEIGHT_REF_Val ;
out12_tmp.WEIGHT_Val = out11.WEIGHT_Val ;
out12_tmp.BMI_Val = out11.BMI_Val ;
out12_tmp.ALS_Val = out11.ALS_Val ;
out12_tmp.ALS_INSR_F = out11.ALS_INSR_F ;
out12_tmp.ALS_PARO_F = out11.ALS_PARO_F ;
out12_tmp.ALS_SALI_F = out11.ALS_SALI_F ;
out12_tmp.ALS_DEGL_F = out11.ALS_DEGL_F ;
out12_tmp.ALS_ERCI_F = out11.ALS_ERCI_F ;
out12_tmp.ALS_SGAS_F = out11.ALS_SGAS_F ;
out12_tmp.ALS_AGAS_F = out11.ALS_AGAS_F ;
out12_tmp.ALS_HABI_F = out11.ALS_HABI_F ;
out12_tmp.ALS_LITD_F = out11.ALS_LITD_Val == null || out11.ALS_LITD_Val.isEmpty()
?Var.ND : 
row17.score_value ;
out12_tmp.ALS_MARC_Val = out11.ALS_MARC_Val ;
out12_tmp.ALS_ESCA_Val = out11.ALS_ESCA_Val ;
out12_tmp.ALS_ALS_dyspne_Val = out11.ALS_ALS_dyspne_Val ;
out12_tmp.ALS_ALS_orthopne_Val = out11.ALS_ALS_orthopne_Val ;
out12_tmp.ALS_MARC = out11.ALS_MARC ;
out12_tmp.ALS_ESCA = out11.ALS_ESCA ;
out12_tmp.ALS_ALS_dyspne = out11.ALS_ALS_dyspne ;
out12_tmp.ALS_ALS_orthopne = out11.ALS_ALS_orthopne ;
out12 = out12_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "out12"
if(out12 != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

			//out12
			//out12


			
				if(execStat){
					runStat.updateStatOnConnection("out12"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		row18HashKey.attribute_name_abrev = out12.ALS_MARC ;
                        		    		
                        		    		row18HashKey.attribute_value = out12.ALS_MARC_Val ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.attribute_name_abrev = '" + row18HashKey.attribute_name_abrev + "', row18.attribute_value = '" + row18HashKey.attribute_value + "'");
								} // G 071
							

							row18Struct row18 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out13 = null;


// # Output table : 'out13'
out13_tmp.patient_key = out12.patient_key ;
out13_tmp.date_examination_key = out12.date_examination_key ;
out13_tmp.HEIGHT_Val = out12.HEIGHT_Val ;
out13_tmp.WEIGHT_REF_Val = out12.WEIGHT_REF_Val ;
out13_tmp.WEIGHT_Val = out12.WEIGHT_Val ;
out13_tmp.BMI_Val = out12.BMI_Val ;
out13_tmp.ALS_Val = out12.ALS_Val ;
out13_tmp.ALS_INSR_F = out12.ALS_INSR_F ;
out13_tmp.ALS_PARO_F = out12.ALS_PARO_F ;
out13_tmp.ALS_SALI_F = out12.ALS_SALI_F ;
out13_tmp.ALS_DEGL_F = out12.ALS_DEGL_F ;
out13_tmp.ALS_ERCI_F = out12.ALS_ERCI_F ;
out13_tmp.ALS_SGAS_F = out12.ALS_SGAS_F ;
out13_tmp.ALS_AGAS_F = out12.ALS_AGAS_F ;
out13_tmp.ALS_HABI_F = out12.ALS_HABI_F ;
out13_tmp.ALS_LITD_F = out12.ALS_LITD_F ;
out13_tmp.ALS_MARC_F = out12.ALS_MARC_Val == null || out12.ALS_MARC_Val.isEmpty()
?Var.ND : 
row18.score_value ;
out13_tmp.ALS_ESCA_Val = out12.ALS_ESCA_Val ;
out13_tmp.ALS_ALS_dyspne_Val = out12.ALS_ALS_dyspne_Val ;
out13_tmp.ALS_ALS_orthopne_Val = out12.ALS_ALS_orthopne_Val ;
out13_tmp.ALS_ESCA = out12.ALS_ESCA ;
out13_tmp.ALS_ALS_dyspne = out12.ALS_ALS_dyspne ;
out13_tmp.ALS_ALS_orthopne = out12.ALS_ALS_orthopne ;
out13 = out13_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out13"
if(out13 != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

			//out13
			//out13


			
				if(execStat){
					runStat.updateStatOnConnection("out13"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		row19HashKey.attribute_name_abrev = out13.ALS_ESCA ;
                        		    		
                        		    		row19HashKey.attribute_value = out13.ALS_ESCA_Val ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.attribute_name_abrev = '" + row19HashKey.attribute_name_abrev + "', row19.attribute_value = '" + row19HashKey.attribute_value + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out14 = null;


// # Output table : 'out14'
out14_tmp.patient_key = out13.patient_key ;
out14_tmp.date_examination_key = out13.date_examination_key ;
out14_tmp.HEIGHT_Val = out13.HEIGHT_Val ;
out14_tmp.WEIGHT_REF_Val = out13.WEIGHT_REF_Val ;
out14_tmp.WEIGHT_Val = out13.WEIGHT_Val ;
out14_tmp.BMI_Val = out13.BMI_Val ;
out14_tmp.ALS_Val = out13.ALS_Val ;
out14_tmp.ALS_INSR_F = out13.ALS_INSR_F ;
out14_tmp.ALS_PARO_F = out13.ALS_PARO_F ;
out14_tmp.ALS_SALI_F = out13.ALS_SALI_F ;
out14_tmp.ALS_DEGL_F = out13.ALS_DEGL_F ;
out14_tmp.ALS_ERCI_F = out13.ALS_ERCI_F ;
out14_tmp.ALS_SGAS_F = out13.ALS_SGAS_F ;
out14_tmp.ALS_AGAS_F = out13.ALS_AGAS_F ;
out14_tmp.ALS_HABI_F = out13.ALS_HABI_F ;
out14_tmp.ALS_LITD_F = out13.ALS_LITD_F ;
out14_tmp.ALS_MARC_F = out13.ALS_MARC_F ;
out14_tmp.ALS_ESCA_F = out13.ALS_ESCA == null || out13.ALS_ESCA.isEmpty()
?Var.ND : 
row19.score_value ;
out14_tmp.ALS_ALS_dyspne_Val = out13.ALS_ALS_dyspne_Val ;
out14_tmp.ALS_ALS_orthopne_Val = out13.ALS_ALS_orthopne_Val ;
out14_tmp.ALS_ALS_dyspne = out13.ALS_ALS_dyspne ;
out14_tmp.ALS_ALS_orthopne = out13.ALS_ALS_orthopne ;
out14 = out14_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "out14"
if(out14 != null) { 



	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

			//out14
			//out14


			
				if(execStat){
					runStat.updateStatOnConnection("out14"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		row20HashKey.attribute_name_abrev = out14.ALS_ALS_dyspne  ;
                        		    		
                        		    		row20HashKey.attribute_value = out14.ALS_ALS_dyspne_Val  ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.attribute_name_abrev = '" + row20HashKey.attribute_name_abrev + "', row20.attribute_value = '" + row20HashKey.attribute_value + "'");
								} // G 071
							

							row20Struct row20 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out15 = null;


// # Output table : 'out15'
out15_tmp.patient_key = out14.patient_key ;
out15_tmp.date_examination_key = out14.date_examination_key ;
out15_tmp.HEIGHT_Val = out14.HEIGHT_Val ;
out15_tmp.WEIGHT_REF_Val = out14.WEIGHT_REF_Val ;
out15_tmp.WEIGHT_Val = out14.WEIGHT_Val ;
out15_tmp.BMI_Val = out14.BMI_Val ;
out15_tmp.ALS_Val = out14.ALS_Val ;
out15_tmp.ALS_INSR_F = out14.ALS_INSR_F ;
out15_tmp.ALS_PARO_F = out14.ALS_PARO_F ;
out15_tmp.ALS_SALI_F = out14.ALS_SALI_F ;
out15_tmp.ALS_DEGL_F = out14.ALS_DEGL_F ;
out15_tmp.ALS_ERCI_F = out14.ALS_ERCI_F ;
out15_tmp.ALS_SGAS_F = out14.ALS_SGAS_F ;
out15_tmp.ALS_AGAS_F = out14.ALS_AGAS_F ;
out15_tmp.ALS_HABI_F = out14.ALS_HABI_F ;
out15_tmp.ALS_LITD_F = out14.ALS_LITD_F ;
out15_tmp.ALS_MARC_F = out14.ALS_MARC_F ;
out15_tmp.ALS_ESCA_F = out14.ALS_ESCA_F ;
out15_tmp.ALS_DYSPNE_F = out14.ALS_ALS_dyspne == null || out14.ALS_ALS_dyspne.isEmpty()
?Var.ND : 
row20.score_value ;
out15_tmp.ALS_ALS_orthopne_Val = out14.ALS_ALS_orthopne_Val ;
out15_tmp.ALS_ALS_orthopne = out14.ALS_ALS_orthopne ;
out15 = out15_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "out15"
if(out15 != null) { 



	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

			//out15
			//out15


			
				if(execStat){
					runStat.updateStatOnConnection("out15"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		row21HashKey.attribute_name_abrev = out15.ALS_ALS_orthopne ;
                        		    		
                        		    		row21HashKey.attribute_value = out15.ALS_ALS_orthopne_Val ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.attribute_name_abrev = '" + row21HashKey.attribute_name_abrev + "', row21.attribute_value = '" + row21HashKey.attribute_value + "'");
								} // G 071
							

							row21Struct row21 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;
Var.ND = "ND";// ###############################
        // ###############################
        // # Output tables

out16 = null;


// # Output table : 'out16'
out16_tmp.ALS_PARO_F = out15.ALS_PARO_F ;
out16_tmp.ALS_SALI_F = out15.ALS_SALI_F ;
out16_tmp.ALS_DEGL_F = out15.ALS_DEGL_F ;
out16_tmp.ALS_ERCI_F = out15.ALS_ERCI_F ;
out16_tmp.ALS_SGAS_F = out15.ALS_SGAS_F ;
out16_tmp.ALS_AGAS_F = out15.ALS_AGAS_F ;
out16_tmp.ALS_HABI_F = out15.ALS_HABI_F ;
out16_tmp.ALS_LITD_F = out15.ALS_LITD_F ;
out16_tmp.ALS_MARC_F = out15.ALS_MARC_F ;
out16_tmp.ALS_ESCA_F = out15.ALS_ESCA_F ;
out16_tmp.ALS_DYSPNE_F = out15.ALS_DYSPNE_F ;
out16_tmp.ALS_ORTHOPNE_F = out15.ALS_ALS_orthopne_Val== null || out15.ALS_ALS_orthopne_Val.isEmpty()
?Var.ND : 
row21.score_value ;
out16_tmp.ALS_INSR_F = out15.ALS_INSR_F ;
out16_tmp.patient_key = out15.patient_key ;
out16_tmp.date_examination_key = out15.date_examination_key ;
out16_tmp.HEIGHT_Val = out15.HEIGHT_Val ;
out16_tmp.WEIGHT_REF_Val = out15.WEIGHT_REF_Val ;
out16_tmp.WEIGHT_Val = out15.WEIGHT_Val ;
out16_tmp.BMI_Val = out15.BMI_Val ;
out16_tmp.ALS_Val = out15.ALS_Val ;
out16 = out16_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "out16"
if(out16 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//out16
			//out16


			
				if(execStat){
					runStat.updateStatOnConnection("out16"+iterateId,1, 1);
				} 
			

		
row5 = null;			row4 = null;			
finder_tUniqRow_1.patient_key = out16.patient_key;
finder_tUniqRow_1.date_examination_key = out16.date_examination_key;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.patient_key = out16.patient_key;
new_tUniqRow_1.date_examination_key = out16.date_examination_key;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.ALS_PARO_F = out16.ALS_PARO_F;			row4.ALS_SALI_F = out16.ALS_SALI_F;			row4.ALS_DEGL_F = out16.ALS_DEGL_F;			row4.ALS_ERCI_F = out16.ALS_ERCI_F;			row4.ALS_SGAS_F = out16.ALS_SGAS_F;			row4.ALS_AGAS_F = out16.ALS_AGAS_F;			row4.ALS_HABI_F = out16.ALS_HABI_F;			row4.ALS_LITD_F = out16.ALS_LITD_F;			row4.ALS_MARC_F = out16.ALS_MARC_F;			row4.ALS_ESCA_F = out16.ALS_ESCA_F;			row4.ALS_DYSPNE_F = out16.ALS_DYSPNE_F;			row4.ALS_ORTHOPNE_F = out16.ALS_ORTHOPNE_F;			row4.ALS_INSR_F = out16.ALS_INSR_F;			row4.patient_key = out16.patient_key;			row4.date_examination_key = out16.date_examination_key;			row4.HEIGHT_Val = out16.HEIGHT_Val;			row4.WEIGHT_REF_Val = out16.WEIGHT_REF_Val;			row4.WEIGHT_Val = out16.WEIGHT_Val;			row4.BMI_Val = out16.BMI_Val;			row4.ALS_Val = out16.ALS_Val;					
		nb_uniques_tUniqRow_1++;
	} else {
if(row5 == null){ 
	
	row5 = new row5Struct();
}				row5.ALS_PARO_F = out16.ALS_PARO_F;			row5.ALS_SALI_F = out16.ALS_SALI_F;			row5.ALS_DEGL_F = out16.ALS_DEGL_F;			row5.ALS_ERCI_F = out16.ALS_ERCI_F;			row5.ALS_SGAS_F = out16.ALS_SGAS_F;			row5.ALS_AGAS_F = out16.ALS_AGAS_F;			row5.ALS_HABI_F = out16.ALS_HABI_F;			row5.ALS_LITD_F = out16.ALS_LITD_F;			row5.ALS_MARC_F = out16.ALS_MARC_F;			row5.ALS_ESCA_F = out16.ALS_ESCA_F;			row5.ALS_DYSPNE_F = out16.ALS_DYSPNE_F;			row5.ALS_ORTHOPNE_F = out16.ALS_ORTHOPNE_F;			row5.ALS_INSR_F = out16.ALS_INSR_F;			row5.patient_key = out16.patient_key;			row5.date_examination_key = out16.date_examination_key;			row5.HEIGHT_Val = out16.HEIGHT_Val;			row5.WEIGHT_REF_Val = out16.WEIGHT_REF_Val;			row5.WEIGHT_Val = out16.WEIGHT_Val;			row5.BMI_Val = out16.BMI_Val;			row5.ALS_Val = out16.ALS_Val;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



	Comparablerow4Struct arrayRowtSortRow_2_SortOut = new Comparablerow4Struct();

	arrayRowtSortRow_2_SortOut.ALS_PARO_F = row4.ALS_PARO_F;
	arrayRowtSortRow_2_SortOut.ALS_SALI_F = row4.ALS_SALI_F;
	arrayRowtSortRow_2_SortOut.ALS_DEGL_F = row4.ALS_DEGL_F;
	arrayRowtSortRow_2_SortOut.ALS_ERCI_F = row4.ALS_ERCI_F;
	arrayRowtSortRow_2_SortOut.ALS_SGAS_F = row4.ALS_SGAS_F;
	arrayRowtSortRow_2_SortOut.ALS_AGAS_F = row4.ALS_AGAS_F;
	arrayRowtSortRow_2_SortOut.ALS_HABI_F = row4.ALS_HABI_F;
	arrayRowtSortRow_2_SortOut.ALS_LITD_F = row4.ALS_LITD_F;
	arrayRowtSortRow_2_SortOut.ALS_MARC_F = row4.ALS_MARC_F;
	arrayRowtSortRow_2_SortOut.ALS_ESCA_F = row4.ALS_ESCA_F;
	arrayRowtSortRow_2_SortOut.ALS_DYSPNE_F = row4.ALS_DYSPNE_F;
	arrayRowtSortRow_2_SortOut.ALS_ORTHOPNE_F = row4.ALS_ORTHOPNE_F;
	arrayRowtSortRow_2_SortOut.ALS_INSR_F = row4.ALS_INSR_F;
	arrayRowtSortRow_2_SortOut.patient_key = row4.patient_key;
	arrayRowtSortRow_2_SortOut.date_examination_key = row4.date_examination_key;
	arrayRowtSortRow_2_SortOut.HEIGHT_Val = row4.HEIGHT_Val;
	arrayRowtSortRow_2_SortOut.WEIGHT_REF_Val = row4.WEIGHT_REF_Val;
	arrayRowtSortRow_2_SortOut.WEIGHT_Val = row4.WEIGHT_Val;
	arrayRowtSortRow_2_SortOut.BMI_Val = row4.BMI_Val;
	arrayRowtSortRow_2_SortOut.ALS_Val = row4.ALS_Val;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



	Comparablerow5Struct arrayRowtSortRow_1_SortOut = new Comparablerow5Struct();

	arrayRowtSortRow_1_SortOut.ALS_PARO_F = row5.ALS_PARO_F;
	arrayRowtSortRow_1_SortOut.ALS_SALI_F = row5.ALS_SALI_F;
	arrayRowtSortRow_1_SortOut.ALS_DEGL_F = row5.ALS_DEGL_F;
	arrayRowtSortRow_1_SortOut.ALS_ERCI_F = row5.ALS_ERCI_F;
	arrayRowtSortRow_1_SortOut.ALS_SGAS_F = row5.ALS_SGAS_F;
	arrayRowtSortRow_1_SortOut.ALS_AGAS_F = row5.ALS_AGAS_F;
	arrayRowtSortRow_1_SortOut.ALS_HABI_F = row5.ALS_HABI_F;
	arrayRowtSortRow_1_SortOut.ALS_LITD_F = row5.ALS_LITD_F;
	arrayRowtSortRow_1_SortOut.ALS_MARC_F = row5.ALS_MARC_F;
	arrayRowtSortRow_1_SortOut.ALS_ESCA_F = row5.ALS_ESCA_F;
	arrayRowtSortRow_1_SortOut.ALS_DYSPNE_F = row5.ALS_DYSPNE_F;
	arrayRowtSortRow_1_SortOut.ALS_ORTHOPNE_F = row5.ALS_ORTHOPNE_F;
	arrayRowtSortRow_1_SortOut.ALS_INSR_F = row5.ALS_INSR_F;
	arrayRowtSortRow_1_SortOut.patient_key = row5.patient_key;
	arrayRowtSortRow_1_SortOut.date_examination_key = row5.date_examination_key;
	arrayRowtSortRow_1_SortOut.HEIGHT_Val = row5.HEIGHT_Val;
	arrayRowtSortRow_1_SortOut.WEIGHT_REF_Val = row5.WEIGHT_REF_Val;
	arrayRowtSortRow_1_SortOut.WEIGHT_Val = row5.WEIGHT_Val;
	arrayRowtSortRow_1_SortOut.BMI_Val = row5.BMI_Val;
	arrayRowtSortRow_1_SortOut.ALS_Val = row5.ALS_Val;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out16"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */

} // End of branch "out15"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */

} // End of branch "out14"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "out13"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "out12"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "out11"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "out9"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row22' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "out2"



	
		} // close loop of lookup 'row3' // G_TM_M_043
		
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

row4Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow4Struct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("D:/StageMai2019/Project/data/Out/Uniques_Clin_Measures_1.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("ALS_PARO_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_SALI_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_DEGL_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_ERCI_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_SGAS_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_AGAS_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_HABI_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_LITD_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_MARC_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_ESCA_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_DYSPNE_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_ORTHOPNE_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_INSR_F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("patient_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_examination_key");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HEIGHT_Val");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("WEIGHT_REF_Val");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("WEIGHT_Val");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("BMI_Val");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ALS_Val");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	
		int tos_count_tSortRow_2_SortIn = 0;
		


row4Struct[] array_tSortRow_2_SortIn = (row4Struct[]) globalMap.remove("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

row4Struct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row7.ALS_PARO_F = current_tSortRow_2_SortIn.ALS_PARO_F;
	row7.ALS_SALI_F = current_tSortRow_2_SortIn.ALS_SALI_F;
	row7.ALS_DEGL_F = current_tSortRow_2_SortIn.ALS_DEGL_F;
	row7.ALS_ERCI_F = current_tSortRow_2_SortIn.ALS_ERCI_F;
	row7.ALS_SGAS_F = current_tSortRow_2_SortIn.ALS_SGAS_F;
	row7.ALS_AGAS_F = current_tSortRow_2_SortIn.ALS_AGAS_F;
	row7.ALS_HABI_F = current_tSortRow_2_SortIn.ALS_HABI_F;
	row7.ALS_LITD_F = current_tSortRow_2_SortIn.ALS_LITD_F;
	row7.ALS_MARC_F = current_tSortRow_2_SortIn.ALS_MARC_F;
	row7.ALS_ESCA_F = current_tSortRow_2_SortIn.ALS_ESCA_F;
	row7.ALS_DYSPNE_F = current_tSortRow_2_SortIn.ALS_DYSPNE_F;
	row7.ALS_ORTHOPNE_F = current_tSortRow_2_SortIn.ALS_ORTHOPNE_F;
	row7.ALS_INSR_F = current_tSortRow_2_SortIn.ALS_INSR_F;
	row7.patient_key = current_tSortRow_2_SortIn.patient_key;
	row7.date_examination_key = current_tSortRow_2_SortIn.date_examination_key;
	row7.HEIGHT_Val = current_tSortRow_2_SortIn.HEIGHT_Val;
	row7.WEIGHT_REF_Val = current_tSortRow_2_SortIn.WEIGHT_REF_Val;
	row7.WEIGHT_Val = current_tSortRow_2_SortIn.WEIGHT_Val;
	row7.BMI_Val = current_tSortRow_2_SortIn.BMI_Val;
	row7.ALS_Val = current_tSortRow_2_SortIn.ALS_Val;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row7.ALS_PARO_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_PARO_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_SALI_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_SALI_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_DEGL_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_DEGL_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_ERCI_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_ERCI_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_SGAS_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_SGAS_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_AGAS_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_AGAS_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_HABI_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_HABI_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_LITD_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_LITD_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_MARC_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_MARC_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_ESCA_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_ESCA_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_DYSPNE_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_DYSPNE_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_ORTHOPNE_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_ORTHOPNE_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_INSR_F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_INSR_F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row7.patient_key
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            row7.date_examination_key
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.HEIGHT_Val != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.HEIGHT_Val
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.WEIGHT_REF_Val != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.WEIGHT_REF_Val
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.WEIGHT_Val != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.WEIGHT_Val
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.BMI_Val != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.BMI_Val
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row7.ALS_Val != null) {
                        sb_tFileOutputDelimited_1.append(
                            row7.ALS_Val
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */










	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row5Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow5Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("D:/StageMai2019/Project/data/Out/Duplicates_Clin_Measures_1.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("ALS_PARO_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_SALI_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_DEGL_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_ERCI_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_SGAS_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_AGAS_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_HABI_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_LITD_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_MARC_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_ESCA_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_DYSPNE_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_ORTHOPNE_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_INSR_F");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("patient_key");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("date_examination_key");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HEIGHT_Val");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("WEIGHT_REF_Val");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("WEIGHT_Val");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("BMI_Val");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALS_Val");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


row5Struct[] array_tSortRow_1_SortIn = (row5Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row5Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row6.ALS_PARO_F = current_tSortRow_1_SortIn.ALS_PARO_F;
	row6.ALS_SALI_F = current_tSortRow_1_SortIn.ALS_SALI_F;
	row6.ALS_DEGL_F = current_tSortRow_1_SortIn.ALS_DEGL_F;
	row6.ALS_ERCI_F = current_tSortRow_1_SortIn.ALS_ERCI_F;
	row6.ALS_SGAS_F = current_tSortRow_1_SortIn.ALS_SGAS_F;
	row6.ALS_AGAS_F = current_tSortRow_1_SortIn.ALS_AGAS_F;
	row6.ALS_HABI_F = current_tSortRow_1_SortIn.ALS_HABI_F;
	row6.ALS_LITD_F = current_tSortRow_1_SortIn.ALS_LITD_F;
	row6.ALS_MARC_F = current_tSortRow_1_SortIn.ALS_MARC_F;
	row6.ALS_ESCA_F = current_tSortRow_1_SortIn.ALS_ESCA_F;
	row6.ALS_DYSPNE_F = current_tSortRow_1_SortIn.ALS_DYSPNE_F;
	row6.ALS_ORTHOPNE_F = current_tSortRow_1_SortIn.ALS_ORTHOPNE_F;
	row6.ALS_INSR_F = current_tSortRow_1_SortIn.ALS_INSR_F;
	row6.patient_key = current_tSortRow_1_SortIn.patient_key;
	row6.date_examination_key = current_tSortRow_1_SortIn.date_examination_key;
	row6.HEIGHT_Val = current_tSortRow_1_SortIn.HEIGHT_Val;
	row6.WEIGHT_REF_Val = current_tSortRow_1_SortIn.WEIGHT_REF_Val;
	row6.WEIGHT_Val = current_tSortRow_1_SortIn.WEIGHT_Val;
	row6.BMI_Val = current_tSortRow_1_SortIn.BMI_Val;
	row6.ALS_Val = current_tSortRow_1_SortIn.ALS_Val;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row6.ALS_PARO_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_PARO_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_SALI_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_SALI_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_DEGL_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_DEGL_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_ERCI_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_ERCI_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_SGAS_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_SGAS_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_AGAS_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_AGAS_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_HABI_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_HABI_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_LITD_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_LITD_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_MARC_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_MARC_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_ESCA_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_ESCA_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_DYSPNE_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_DYSPNE_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_ORTHOPNE_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_ORTHOPNE_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_INSR_F != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_INSR_F
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row6.patient_key
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row6.date_examination_key
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.HEIGHT_Val != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.HEIGHT_Val
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.WEIGHT_REF_Val != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.WEIGHT_REF_Val
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.WEIGHT_Val != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.WEIGHT_Val
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.BMI_Val != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.BMI_Val
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row6.ALS_Val != null) {
                        sb_tFileOutputDelimited_2.append(
                            row6.ALS_Val
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_3Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */

























































				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */










	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

























































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public String HEIGHT_Val;

				public String getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public String WEIGHT_REF_Val;

				public String getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public String WEIGHT_Val;

				public String getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public String BMI_Val;

				public String getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Integer ALS_Val;

				public Integer getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.date_examination_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.date_examination_key != other.date_examination_key)
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.patient_key = this.patient_key;
	            other.date_examination_key = this.date_examination_key;
	            other.HEIGHT_Val = this.HEIGHT_Val;
	            other.WEIGHT_REF_Val = this.WEIGHT_REF_Val;
	            other.WEIGHT_Val = this.WEIGHT_Val;
	            other.BMI_Val = this.BMI_Val;
	            other.ALS_Val = this.ALS_Val;
	            other.ALS_PARO = this.ALS_PARO;
	            other.ALS_SALI = this.ALS_SALI;
	            other.ALS_DEGL = this.ALS_DEGL;
	            other.ALS_ERCI = this.ALS_ERCI;
	            other.ALS_SGAS = this.ALS_SGAS;
	            other.ALS_AGAS = this.ALS_AGAS;
	            other.ALS_HABI = this.ALS_HABI;
	            other.ALS_LITD = this.ALS_LITD;
	            other.ALS_MARC = this.ALS_MARC;
	            other.ALS_ESCA = this.ALS_ESCA;
	            other.ALS_ALS_dyspne = this.ALS_ALS_dyspne;
	            other.ALS_ALS_orthopne = this.ALS_ALS_orthopne;
	            other.ALS_INSR = this.ALS_INSR;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.patient_key = this.patient_key;
	            	other.date_examination_key = this.date_examination_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
					this.HEIGHT_Val = readString(dis);
					
					this.WEIGHT_REF_Val = readString(dis);
					
					this.WEIGHT_Val = readString(dis);
					
					this.BMI_Val = readString(dis);
					
						this.ALS_Val = readInteger(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// String
				
						writeString(this.HEIGHT_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_Val,dos);
					
					// String
				
						writeString(this.BMI_Val,dos);
					
					// Integer
				
						writeInteger(this.ALS_Val,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+HEIGHT_Val);
		sb.append(",WEIGHT_REF_Val="+WEIGHT_REF_Val);
		sb.append(",WEIGHT_Val="+WEIGHT_Val);
		sb.append(",BMI_Val="+BMI_Val);
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_INSR="+ALS_INSR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_examination_key, other.date_examination_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];

	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public String HEIGHT_Val;

				public String getHEIGHT_Val () {
					return this.HEIGHT_Val;
				}
				
			    public String WEIGHT_REF_Val;

				public String getWEIGHT_REF_Val () {
					return this.WEIGHT_REF_Val;
				}
				
			    public String WEIGHT_Val;

				public String getWEIGHT_Val () {
					return this.WEIGHT_Val;
				}
				
			    public String BMI_Val;

				public String getBMI_Val () {
					return this.BMI_Val;
				}
				
			    public Float ALS_Val;

				public Float getALS_Val () {
					return this.ALS_Val;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.date_examination_key = dis.readInt();
					
					this.HEIGHT_Val = readString(dis);
					
					this.WEIGHT_REF_Val = readString(dis);
					
					this.WEIGHT_Val = readString(dis);
					
					this.BMI_Val = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ALS_Val = null;
           				} else {
           			    	this.ALS_Val = dis.readFloat();
           				}
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.date_examination_key);
					
					// String
				
						writeString(this.HEIGHT_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_Val,dos);
					
					// String
				
						writeString(this.WEIGHT_Val,dos);
					
					// String
				
						writeString(this.BMI_Val,dos);
					
					// Float
				
						if(this.ALS_Val == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ALS_Val);
		            	}
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",HEIGHT_Val="+HEIGHT_Val);
		sb.append(",WEIGHT_REF_Val="+WEIGHT_REF_Val);
		sb.append(",WEIGHT_Val="+WEIGHT_Val);
		sb.append(",BMI_Val="+BMI_Val);
		sb.append(",ALS_Val="+String.valueOf(ALS_Val));
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_INSR="+ALS_INSR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = "public";
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "fact_clinical_measures_1";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "fact_clinical_measures_1";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+"10.195.25.10"+":"+"54464"+"/"+"db_21807140t_stage_test";
    dbUser_tDBOutput_1 = "21807140t";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"patient_key\",\"date_examination_key\",\"height\",\"weight_ref\",\"weight\",\"bmi\",\"als\",\"als_paro\",\"als_sali_val\",\"als_degl\",\"als_erci\",\"als_sgas\",\"als_agas\",\"als_habi\",\"als_litd\",\"als_marc\",\"als_esca\",\"als_dyspne\",\"als_orthopne\",\"als_insr\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;	
				
				char fieldSeparator_tFileInputDelimited_3[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_3[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_3 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */"D:/StageMai2019/Project/data/Out/Uniques_Clin_Measures_1.csv"/** End field tFileInputDelimited_3:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;
	
				try{
					
						String[] rowtFileInputDelimited_3=null;
						int currentLinetFileInputDelimited_3 = 0;
	        			int outputLinetFileInputDelimited_3 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0;
			if(footer_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_3[0]);
		        			}
					
					
					csvReadertFileInputDelimited_3.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )
	        			csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
	        				csvReadertFileInputDelimited_3.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_3 > 0){
						for(totalLinetFileInputDelimited_3=0;totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++){
							csvReadertFileInputDelimited_3.readNext();
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_3.readNext()) {
							
								rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
								if(!(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_3++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3   < 0? 0 : totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3 ;
	            		if(lastLinetFileInputDelimited_3 > 0){
	                		lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3 : lastLineTemptFileInputDelimited_3; 
	            		}else {
	                		lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
	            		}
	         
			          	csvReadertFileInputDelimited_3.close();
				        if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_3[0]);
						}
						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )	
	        				csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
							csvReadertFileInputDelimited_3.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_3 != 0){
			        	for(currentLinetFileInputDelimited_3=0;currentLinetFileInputDelimited_3 < 1;currentLinetFileInputDelimited_3++){
			        		csvReadertFileInputDelimited_3.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3!=null && csvReadertFileInputDelimited_3.readNext() ) { 
	        		rowstate_tFileInputDelimited_3.reset();
	        
		        	rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
	        	
					
	        			if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_3++;
	            
		            if(lastLinetFileInputDelimited_3 > -1 && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_3++;
	            	if (limittFileInputDelimited_3 > 0 && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
	                	break;
	            	}  
	                                                                      
					
	    							row8 = null;			
								
								boolean whetherReject_tFileInputDelimited_3 = false;
								row8 = new row8Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row8.patient_key = 0;
					
							row8.date_examination_key = 0;
					
							row8.HEIGHT_Val = null;
					
							row8.WEIGHT_REF_Val = null;
					
							row8.WEIGHT_Val = null;
					
							row8.BMI_Val = null;
					
							row8.ALS_Val = null;
					
							row8.ALS_PARO = null;
					
							row8.ALS_SALI = null;
					
							row8.ALS_DEGL = null;
					
							row8.ALS_ERCI = null;
					
							row8.ALS_SGAS = null;
					
							row8.ALS_AGAS = null;
					
							row8.ALS_HABI = null;
					
							row8.ALS_LITD = null;
					
							row8.ALS_MARC = null;
					
							row8.ALS_ESCA = null;
					
							row8.ALS_ALS_dyspne = null;
					
							row8.ALS_ALS_orthopne = null;
					
							row8.ALS_INSR = null;
					
				}else{
					
					for(int i_tFileInputDelimited_3=0;i_tFileInputDelimited_3<rowtFileInputDelimited_3.length;i_tFileInputDelimited_3++){
						rowtFileInputDelimited_3[i_tFileInputDelimited_3]=rowtFileInputDelimited_3[i_tFileInputDelimited_3].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row8.patient_key = ParserUtils.parseTo_int(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"patient_key", "row8", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'patient_key' in 'row8' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
						
							rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'patient_key' in 'row8' connection, value is invalid or this column should be nullable or have a default value."));
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row8.date_examination_key = ParserUtils.parseTo_int(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"date_examination_key", "row8", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'date_examination_key' in 'row8' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
						
							rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'date_examination_key' in 'row8' connection, value is invalid or this column should be nullable or have a default value."));
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.HEIGHT_Val = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.HEIGHT_Val = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.WEIGHT_REF_Val = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.WEIGHT_REF_Val = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.WEIGHT_Val = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.WEIGHT_Val = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.BMI_Val = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.BMI_Val = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row8.ALS_Val = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ALS_Val", "row8", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row8.ALS_Val = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row8.ALS_Val = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_PARO = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_PARO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_SALI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_SALI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_DEGL = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_DEGL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_ERCI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_ERCI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_SGAS = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_SGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_AGAS = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_AGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_HABI = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_HABI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_LITD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_LITD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_MARC = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_MARC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_ESCA = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_ESCA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_ALS_dyspne = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_ALS_dyspne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_ALS_orthopne = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_ALS_orthopne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row8.ALS_INSR = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row8.ALS_INSR = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_3.getException()!=null) {
										throw rowstate_tFileInputDelimited_3.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_3 = true;
        							
                							System.err.println(e.getMessage());
                							row8 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
// # Filter conditions 
if( 

row8.patient_key !=0 && row8.date_examination_key !=0

 ) {
out3_tmp.patient_key = row8.patient_key ;
out3_tmp.date_examination_key = row8.date_examination_key ;
out3_tmp.HEIGHT_Val = row8.HEIGHT_Val ;
out3_tmp.WEIGHT_REF_Val = row8.WEIGHT_REF_Val ;
out3_tmp.WEIGHT_Val = row8.WEIGHT_Val ;
out3_tmp.BMI_Val = row8.BMI_Val ;
out3_tmp.ALS_Val = Math.round(row8.ALS_Val) ;
out3_tmp.ALS_PARO = row8.ALS_PARO ;
out3_tmp.ALS_SALI = row8.ALS_SALI ;
out3_tmp.ALS_DEGL = row8.ALS_DEGL ;
out3_tmp.ALS_ERCI = row8.ALS_ERCI ;
out3_tmp.ALS_SGAS = row8.ALS_SGAS ;
out3_tmp.ALS_AGAS = row8.ALS_AGAS ;
out3_tmp.ALS_HABI = row8.ALS_HABI ;
out3_tmp.ALS_LITD = row8.ALS_LITD ;
out3_tmp.ALS_MARC = row8.ALS_MARC ;
out3_tmp.ALS_ESCA = row8.ALS_ESCA ;
out3_tmp.ALS_ALS_dyspne = row8.ALS_ALS_dyspne ;
out3_tmp.ALS_ALS_orthopne = row8.ALS_ALS_orthopne ;
out3_tmp.ALS_INSR = row8.ALS_INSR ;
out3 = out3_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, out3.patient_key);

                    pstmt_tDBOutput_1.setInt(2, out3.date_examination_key);

                    if(out3.HEIGHT_Val == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out3.HEIGHT_Val);
}

                    if(out3.WEIGHT_REF_Val == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out3.WEIGHT_REF_Val);
}

                    if(out3.WEIGHT_Val == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out3.WEIGHT_Val);
}

                    if(out3.BMI_Val == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out3.BMI_Val);
}

                    if(out3.ALS_Val == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(7, out3.ALS_Val);
}

                    if(out3.ALS_PARO == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, out3.ALS_PARO);
}

                    if(out3.ALS_SALI == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, out3.ALS_SALI);
}

                    if(out3.ALS_DEGL == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, out3.ALS_DEGL);
}

                    if(out3.ALS_ERCI == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, out3.ALS_ERCI);
}

                    if(out3.ALS_SGAS == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, out3.ALS_SGAS);
}

                    if(out3.ALS_AGAS == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, out3.ALS_AGAS);
}

                    if(out3.ALS_HABI == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, out3.ALS_HABI);
}

                    if(out3.ALS_LITD == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, out3.ALS_LITD);
}

                    if(out3.ALS_MARC == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, out3.ALS_MARC);
}

                    if(out3.ALS_ESCA == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, out3.ALS_ESCA);
}

                    if(out3.ALS_ALS_dyspne == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, out3.ALS_ALS_dyspne);
}

                    if(out3.ALS_ALS_orthopne == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, out3.ALS_ALS_orthopne);
}

                    if(out3.ALS_INSR == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, out3.ALS_INSR);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    		if (ne_tDBOutput_1 != null) {
			    			throw(sqle_tDBOutput_1);
			    		}else{
			            	throw(e_tDBOutput_1);
			            }
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	


				nb_line_tFileInputDelimited_3++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_3!=null){
    					csvReadertFileInputDelimited_3.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_3!=null){
    				globalMap.put("tFileInputDelimited_3_NB_LINE",nb_line_tFileInputDelimited_3);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int date_examination_key;

				public int getDate_examination_key () {
					return this.date_examination_key;
				}
				
			    public String date_examination_full;

				public String getDate_examination_full () {
					return this.date_examination_full;
				}
				
			    public String date_examination_full_string;

				public String getDate_examination_full_string () {
					return this.date_examination_full_string;
				}
				
			    public String date_examination_monthyear;

				public String getDate_examination_monthyear () {
					return this.date_examination_monthyear;
				}
				
			    public String date_examination_month_number;

				public String getDate_examination_month_number () {
					return this.date_examination_month_number;
				}
				
			    public String date_examination_month_name;

				public String getDate_examination_month_name () {
					return this.date_examination_month_name;
				}
				
			    public String date_examination_year_number;

				public String getDate_examination_year_number () {
					return this.date_examination_year_number;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date_examination_full == null) ? 0 : this.date_examination_full.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.date_examination_full == null) {
							if (other.date_examination_full != null)
								return false;
						
						} else if (!this.date_examination_full.equals(other.date_examination_full))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.date_examination_key = this.date_examination_key;
	            other.date_examination_full = this.date_examination_full;
	            other.date_examination_full_string = this.date_examination_full_string;
	            other.date_examination_monthyear = this.date_examination_monthyear;
	            other.date_examination_month_number = this.date_examination_month_number;
	            other.date_examination_month_name = this.date_examination_month_name;
	            other.date_examination_year_number = this.date_examination_year_number;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.date_examination_full = this.date_examination_full;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.date_examination_full = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.date_examination_full,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.date_examination_key = dis.readInt();
					
						this.date_examination_full_string = readString(dis,ois);
					
						this.date_examination_monthyear = readString(dis,ois);
					
						this.date_examination_month_number = readString(dis,ois);
					
						this.date_examination_month_name = readString(dis,ois);
					
						this.date_examination_year_number = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.date_examination_key);
					
						writeString(this.date_examination_full_string, dos, oos);
					
						writeString(this.date_examination_monthyear, dos, oos);
					
						writeString(this.date_examination_month_number, dos, oos);
					
						writeString(this.date_examination_month_name, dos, oos);
					
						writeString(this.date_examination_year_number, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date_examination_key="+String.valueOf(date_examination_key));
		sb.append(",date_examination_full="+date_examination_full);
		sb.append(",date_examination_full_string="+date_examination_full_string);
		sb.append(",date_examination_monthyear="+date_examination_monthyear);
		sb.append(",date_examination_month_number="+date_examination_month_number);
		sb.append(",date_examination_month_name="+date_examination_month_name);
		sb.append(",date_examination_year_number="+date_examination_year_number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date_examination_full, other.date_examination_full);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_4 - inputs:(out4,row2,row3) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String url_tDBInput_2 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"dim_date_examination\".\"date_examination_key\", \n  \"db_21807140t_s"
+"tage_test\".\"public\".\"dim_date_examination\".\"date_examination_full\", \n  \"db_21807140t_stage_test\".\"public\".\"d"
+"im_date_examination\".\"date_examination_full_string\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_date_examination"
+"\".\"date_examination_monthyear\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_date_examination\".\"date_examination"
+"_month_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_date_examination\".\"date_examination_month_name\", \n  "
+"\"db_21807140t_stage_test\".\"public\".\"dim_date_examination\".\"date_examination_year_number\"\nFROM \"db_21807140t_sta"
+"ge_test\".\"public\".\"dim_date_examination\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.date_examination_key = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row2.date_examination_key = rs_tDBInput_2.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.date_examination_full = null;
							} else {
	                         		
        	row2.date_examination_full = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.date_examination_full_string = null;
							} else {
	                         		
        	row2.date_examination_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.date_examination_monthyear = null;
							} else {
	                         		
        	row2.date_examination_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.date_examination_month_number = null;
							} else {
	                         		
        	row2.date_examination_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.date_examination_month_name = null;
							} else {
	                         		
        	row2.date_examination_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.date_examination_year_number = null;
							} else {
	                         		
        	row2.date_examination_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.date_examination_key = row2.date_examination_key;
				
				row2_HashRow.date_examination_full = row2.date_examination_full;
				
				row2_HashRow.date_examination_full_string = row2.date_examination_full_string;
				
				row2_HashRow.date_examination_monthyear = row2.date_examination_monthyear;
				
				row2_HashRow.date_examination_month_number = row2.date_examination_month_number;
				
				row2_HashRow.date_examination_month_name = row2.date_examination_month_name;
				
				row2_HashRow.date_examination_year_number = row2.date_examination_year_number;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public String ipp_hash;

				public String getIpp_hash () {
					return this.ipp_hash;
				}
				
			    public String ipp;

				public String getIpp () {
					return this.ipp;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String name_surname;

				public String getName_surname () {
					return this.name_surname;
				}
				
			    public String birthdate;

				public String getBirthdate () {
					return this.birthdate;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public String startplace_fs;

				public String getStartplace_fs () {
					return this.startplace_fs;
				}
				
			    public String date_fs;

				public String getDate_fs () {
					return this.date_fs;
				}
				
			    public String date_fs_full_string;

				public String getDate_fs_full_string () {
					return this.date_fs_full_string;
				}
				
			    public String date_fs_monthyear;

				public String getDate_fs_monthyear () {
					return this.date_fs_monthyear;
				}
				
			    public String date_fs_month_number;

				public String getDate_fs_month_number () {
					return this.date_fs_month_number;
				}
				
			    public String date_fs_month_name;

				public String getDate_fs_month_name () {
					return this.date_fs_month_name;
				}
				
			    public String date_fs_year_number;

				public String getDate_fs_year_number () {
					return this.date_fs_year_number;
				}
				
			    public String date_diagnostic;

				public String getDate_diagnostic () {
					return this.date_diagnostic;
				}
				
			    public String date_diagnostic_full_string;

				public String getDate_diagnostic_full_string () {
					return this.date_diagnostic_full_string;
				}
				
			    public String date_diagnostic_monthyear;

				public String getDate_diagnostic_monthyear () {
					return this.date_diagnostic_monthyear;
				}
				
			    public String date_diagnostic_month_number;

				public String getDate_diagnostic_month_number () {
					return this.date_diagnostic_month_number;
				}
				
			    public String date_diagnostic_month_name;

				public String getDate_diagnostic_month_name () {
					return this.date_diagnostic_month_name;
				}
				
			    public String date_diagnostic_year_number;

				public String getDate_diagnostic_year_number () {
					return this.date_diagnostic_year_number;
				}
				
			    public String diagnostic;

				public String getDiagnostic () {
					return this.diagnostic;
				}
				
			    public String diagnostic_probability;

				public String getDiagnostic_probability () {
					return this.diagnostic_probability;
				}
				
			    public String date_riluz_full;

				public String getDate_riluz_full () {
					return this.date_riluz_full;
				}
				
			    public String date_riluz_full_string;

				public String getDate_riluz_full_string () {
					return this.date_riluz_full_string;
				}
				
			    public String date_riluz_monthyear;

				public String getDate_riluz_monthyear () {
					return this.date_riluz_monthyear;
				}
				
			    public String date_riluz_month_name;

				public String getDate_riluz_month_name () {
					return this.date_riluz_month_name;
				}
				
			    public String date_riluz_month_number;

				public String getDate_riluz_month_number () {
					return this.date_riluz_month_number;
				}
				
			    public String date_riluz_year_number;

				public String getDate_riluz_year_number () {
					return this.date_riluz_year_number;
				}
				
			    public String riluz_on;

				public String getRiluz_on () {
					return this.riluz_on;
				}
				
			    public String date_death_full;

				public String getDate_death_full () {
					return this.date_death_full;
				}
				
			    public String date_death_string;

				public String getDate_death_string () {
					return this.date_death_string;
				}
				
			    public String date_death_monthyear;

				public String getDate_death_monthyear () {
					return this.date_death_monthyear;
				}
				
			    public String date_death_month_name;

				public String getDate_death_month_name () {
					return this.date_death_month_name;
				}
				
			    public String date_death_month_number;

				public String getDate_death_month_number () {
					return this.date_death_month_number;
				}
				
			    public String date_death_year_number;

				public String getDate_death_year_number () {
					return this.date_death_year_number;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ipp_hash == null) ? 0 : this.ipp_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ipp_hash == null) {
							if (other.ipp_hash != null)
								return false;
						
						} else if (!this.ipp_hash.equals(other.ipp_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.patient_key = this.patient_key;
	            other.ipp_hash = this.ipp_hash;
	            other.ipp = this.ipp;
	            other.name = this.name;
	            other.surname = this.surname;
	            other.name_surname = this.name_surname;
	            other.birthdate = this.birthdate;
	            other.sex = this.sex;
	            other.startplace_fs = this.startplace_fs;
	            other.date_fs = this.date_fs;
	            other.date_fs_full_string = this.date_fs_full_string;
	            other.date_fs_monthyear = this.date_fs_monthyear;
	            other.date_fs_month_number = this.date_fs_month_number;
	            other.date_fs_month_name = this.date_fs_month_name;
	            other.date_fs_year_number = this.date_fs_year_number;
	            other.date_diagnostic = this.date_diagnostic;
	            other.date_diagnostic_full_string = this.date_diagnostic_full_string;
	            other.date_diagnostic_monthyear = this.date_diagnostic_monthyear;
	            other.date_diagnostic_month_number = this.date_diagnostic_month_number;
	            other.date_diagnostic_month_name = this.date_diagnostic_month_name;
	            other.date_diagnostic_year_number = this.date_diagnostic_year_number;
	            other.diagnostic = this.diagnostic;
	            other.diagnostic_probability = this.diagnostic_probability;
	            other.date_riluz_full = this.date_riluz_full;
	            other.date_riluz_full_string = this.date_riluz_full_string;
	            other.date_riluz_monthyear = this.date_riluz_monthyear;
	            other.date_riluz_month_name = this.date_riluz_month_name;
	            other.date_riluz_month_number = this.date_riluz_month_number;
	            other.date_riluz_year_number = this.date_riluz_year_number;
	            other.riluz_on = this.riluz_on;
	            other.date_death_full = this.date_death_full;
	            other.date_death_string = this.date_death_string;
	            other.date_death_monthyear = this.date_death_monthyear;
	            other.date_death_month_name = this.date_death_month_name;
	            other.date_death_month_number = this.date_death_month_number;
	            other.date_death_year_number = this.date_death_year_number;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ipp_hash = this.ipp_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.ipp_hash = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ipp_hash,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.patient_key = dis.readInt();
					
						this.ipp = readString(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.surname = readString(dis,ois);
					
						this.name_surname = readString(dis,ois);
					
						this.birthdate = readString(dis,ois);
					
						this.sex = readString(dis,ois);
					
						this.startplace_fs = readString(dis,ois);
					
						this.date_fs = readString(dis,ois);
					
						this.date_fs_full_string = readString(dis,ois);
					
						this.date_fs_monthyear = readString(dis,ois);
					
						this.date_fs_month_number = readString(dis,ois);
					
						this.date_fs_month_name = readString(dis,ois);
					
						this.date_fs_year_number = readString(dis,ois);
					
						this.date_diagnostic = readString(dis,ois);
					
						this.date_diagnostic_full_string = readString(dis,ois);
					
						this.date_diagnostic_monthyear = readString(dis,ois);
					
						this.date_diagnostic_month_number = readString(dis,ois);
					
						this.date_diagnostic_month_name = readString(dis,ois);
					
						this.date_diagnostic_year_number = readString(dis,ois);
					
						this.diagnostic = readString(dis,ois);
					
						this.diagnostic_probability = readString(dis,ois);
					
						this.date_riluz_full = readString(dis,ois);
					
						this.date_riluz_full_string = readString(dis,ois);
					
						this.date_riluz_monthyear = readString(dis,ois);
					
						this.date_riluz_month_name = readString(dis,ois);
					
						this.date_riluz_month_number = readString(dis,ois);
					
						this.date_riluz_year_number = readString(dis,ois);
					
						this.riluz_on = readString(dis,ois);
					
						this.date_death_full = readString(dis,ois);
					
						this.date_death_string = readString(dis,ois);
					
						this.date_death_monthyear = readString(dis,ois);
					
						this.date_death_month_name = readString(dis,ois);
					
						this.date_death_month_number = readString(dis,ois);
					
						this.date_death_year_number = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.patient_key);
					
						writeString(this.ipp, dos, oos);
					
						writeString(this.name, dos, oos);
					
						writeString(this.surname, dos, oos);
					
						writeString(this.name_surname, dos, oos);
					
						writeString(this.birthdate, dos, oos);
					
						writeString(this.sex, dos, oos);
					
						writeString(this.startplace_fs, dos, oos);
					
						writeString(this.date_fs, dos, oos);
					
						writeString(this.date_fs_full_string, dos, oos);
					
						writeString(this.date_fs_monthyear, dos, oos);
					
						writeString(this.date_fs_month_number, dos, oos);
					
						writeString(this.date_fs_month_name, dos, oos);
					
						writeString(this.date_fs_year_number, dos, oos);
					
						writeString(this.date_diagnostic, dos, oos);
					
						writeString(this.date_diagnostic_full_string, dos, oos);
					
						writeString(this.date_diagnostic_monthyear, dos, oos);
					
						writeString(this.date_diagnostic_month_number, dos, oos);
					
						writeString(this.date_diagnostic_month_name, dos, oos);
					
						writeString(this.date_diagnostic_year_number, dos, oos);
					
						writeString(this.diagnostic, dos, oos);
					
						writeString(this.diagnostic_probability, dos, oos);
					
						writeString(this.date_riluz_full, dos, oos);
					
						writeString(this.date_riluz_full_string, dos, oos);
					
						writeString(this.date_riluz_monthyear, dos, oos);
					
						writeString(this.date_riluz_month_name, dos, oos);
					
						writeString(this.date_riluz_month_number, dos, oos);
					
						writeString(this.date_riluz_year_number, dos, oos);
					
						writeString(this.riluz_on, dos, oos);
					
						writeString(this.date_death_full, dos, oos);
					
						writeString(this.date_death_string, dos, oos);
					
						writeString(this.date_death_monthyear, dos, oos);
					
						writeString(this.date_death_month_name, dos, oos);
					
						writeString(this.date_death_month_number, dos, oos);
					
						writeString(this.date_death_year_number, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",ipp_hash="+ipp_hash);
		sb.append(",ipp="+ipp);
		sb.append(",name="+name);
		sb.append(",surname="+surname);
		sb.append(",name_surname="+name_surname);
		sb.append(",birthdate="+birthdate);
		sb.append(",sex="+sex);
		sb.append(",startplace_fs="+startplace_fs);
		sb.append(",date_fs="+date_fs);
		sb.append(",date_fs_full_string="+date_fs_full_string);
		sb.append(",date_fs_monthyear="+date_fs_monthyear);
		sb.append(",date_fs_month_number="+date_fs_month_number);
		sb.append(",date_fs_month_name="+date_fs_month_name);
		sb.append(",date_fs_year_number="+date_fs_year_number);
		sb.append(",date_diagnostic="+date_diagnostic);
		sb.append(",date_diagnostic_full_string="+date_diagnostic_full_string);
		sb.append(",date_diagnostic_monthyear="+date_diagnostic_monthyear);
		sb.append(",date_diagnostic_month_number="+date_diagnostic_month_number);
		sb.append(",date_diagnostic_month_name="+date_diagnostic_month_name);
		sb.append(",date_diagnostic_year_number="+date_diagnostic_year_number);
		sb.append(",diagnostic="+diagnostic);
		sb.append(",diagnostic_probability="+diagnostic_probability);
		sb.append(",date_riluz_full="+date_riluz_full);
		sb.append(",date_riluz_full_string="+date_riluz_full_string);
		sb.append(",date_riluz_monthyear="+date_riluz_monthyear);
		sb.append(",date_riluz_month_name="+date_riluz_month_name);
		sb.append(",date_riluz_month_number="+date_riluz_month_number);
		sb.append(",date_riluz_year_number="+date_riluz_year_number);
		sb.append(",riluz_on="+riluz_on);
		sb.append(",date_death_full="+date_death_full);
		sb.append(",date_death_string="+date_death_string);
		sb.append(",date_death_monthyear="+date_death_monthyear);
		sb.append(",date_death_month_name="+date_death_month_name);
		sb.append(",date_death_month_number="+date_death_month_number);
		sb.append(",date_death_year_number="+date_death_year_number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ipp_hash, other.ipp_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_4 - inputs:(out4,row2,row3) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String url_tDBInput_1 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"patient_key\", \n  \"db_21807140t_stage_test\".\"publ"
+"ic\".\"dim_patient\".\"ipp_hash\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"ipp\", \n  \"db_21807140t_"
+"stage_test\".\"public\".\"dim_patient\".\"name\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"surname\","
+" \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"name_surname\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"dim_patient\".\"birthdate\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"sex\", \n  \"db_21807140t_stag"
+"e_test\".\"public\".\"dim_patient\".\"startplace_fs\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_"
+"fs\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_fs_full_string\", \n  \"db_21807140t_stage_test\"."
+"\"public\".\"dim_patient\".\"date_fs_monthyear\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_fs_mo"
+"nth_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_fs_month_name\", \n  \"db_21807140t_stage_"
+"test\".\"public\".\"dim_patient\".\"date_fs_year_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"d"
+"ate_diagnostic\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_diagnostic_full_string\", \n  \"db_218"
+"07140t_stage_test\".\"public\".\"dim_patient\".\"date_diagnostic_monthyear\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"dim_patient\".\"date_diagnostic_month_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_diagn"
+"ostic_month_name\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_diagnostic_year_number\", \n  \"db_2"
+"1807140t_stage_test\".\"public\".\"dim_patient\".\"diagnostic\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient"
+"\".\"diagnostic_probability\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_riluz_full\", \n  \"db_21"
+"807140t_stage_test\".\"public\".\"dim_patient\".\"date_riluz_full_string\", \n  \"db_21807140t_stage_test\".\"public\".\""
+"dim_patient\".\"date_riluz_monthyear\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_riluz_month_nam"
+"e\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_riluz_month_number\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"dim_patient\".\"date_riluz_year_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"ri"
+"luz_on\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_death_full\", \n  \"db_21807140t_stage_test\"."
+"\"public\".\"dim_patient\".\"date_death_string\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_death"
+"_monthyear\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patient\".\"date_death_month_name\", \n  \"db_21807140t_sta"
+"ge_test\".\"public\".\"dim_patient\".\"date_death_month_number\", \n  \"db_21807140t_stage_test\".\"public\".\"dim_patien"
+"t\".\"date_death_year_number\"\nFROM \"db_21807140t_stage_test\".\"public\".\"dim_patient\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row3.patient_key = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row3.patient_key = rs_tDBInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row3.ipp_hash = null;
							} else {
	                         		
        	row3.ipp_hash = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row3.ipp = null;
							} else {
	                         		
        	row3.ipp = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row3.name = null;
							} else {
	                         		
        	row3.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row3.surname = null;
							} else {
	                         		
        	row3.surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row3.name_surname = null;
							} else {
	                         		
        	row3.name_surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row3.birthdate = null;
							} else {
	                         		
        	row3.birthdate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row3.sex = null;
							} else {
	                         		
        	row3.sex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row3.startplace_fs = null;
							} else {
	                         		
        	row3.startplace_fs = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row3.date_fs = null;
							} else {
	                         		
        	row3.date_fs = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row3.date_fs_full_string = null;
							} else {
	                         		
        	row3.date_fs_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row3.date_fs_monthyear = null;
							} else {
	                         		
        	row3.date_fs_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row3.date_fs_month_number = null;
							} else {
	                         		
        	row3.date_fs_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row3.date_fs_month_name = null;
							} else {
	                         		
        	row3.date_fs_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row3.date_fs_year_number = null;
							} else {
	                         		
        	row3.date_fs_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row3.date_diagnostic = null;
							} else {
	                         		
        	row3.date_diagnostic = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row3.date_diagnostic_full_string = null;
							} else {
	                         		
        	row3.date_diagnostic_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row3.date_diagnostic_monthyear = null;
							} else {
	                         		
        	row3.date_diagnostic_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row3.date_diagnostic_month_number = null;
							} else {
	                         		
        	row3.date_diagnostic_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row3.date_diagnostic_month_name = null;
							} else {
	                         		
        	row3.date_diagnostic_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row3.date_diagnostic_year_number = null;
							} else {
	                         		
        	row3.date_diagnostic_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row3.diagnostic = null;
							} else {
	                         		
        	row3.diagnostic = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row3.diagnostic_probability = null;
							} else {
	                         		
        	row3.diagnostic_probability = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row3.date_riluz_full = null;
							} else {
	                         		
        	row3.date_riluz_full = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row3.date_riluz_full_string = null;
							} else {
	                         		
        	row3.date_riluz_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row3.date_riluz_monthyear = null;
							} else {
	                         		
        	row3.date_riluz_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row3.date_riluz_month_name = null;
							} else {
	                         		
        	row3.date_riluz_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row3.date_riluz_month_number = null;
							} else {
	                         		
        	row3.date_riluz_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row3.date_riluz_year_number = null;
							} else {
	                         		
        	row3.date_riluz_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row3.riluz_on = null;
							} else {
	                         		
        	row3.riluz_on = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row3.date_death_full = null;
							} else {
	                         		
        	row3.date_death_full = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row3.date_death_string = null;
							} else {
	                         		
        	row3.date_death_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row3.date_death_monthyear = null;
							} else {
	                         		
        	row3.date_death_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row3.date_death_month_name = null;
							} else {
	                         		
        	row3.date_death_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row3.date_death_month_number = null;
							} else {
	                         		
        	row3.date_death_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row3.date_death_year_number = null;
							} else {
	                         		
        	row3.date_death_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.patient_key = row3.patient_key;
				
				row3_HashRow.ipp_hash = row3.ipp_hash;
				
				row3_HashRow.ipp = row3.ipp;
				
				row3_HashRow.name = row3.name;
				
				row3_HashRow.surname = row3.surname;
				
				row3_HashRow.name_surname = row3.name_surname;
				
				row3_HashRow.birthdate = row3.birthdate;
				
				row3_HashRow.sex = row3.sex;
				
				row3_HashRow.startplace_fs = row3.startplace_fs;
				
				row3_HashRow.date_fs = row3.date_fs;
				
				row3_HashRow.date_fs_full_string = row3.date_fs_full_string;
				
				row3_HashRow.date_fs_monthyear = row3.date_fs_monthyear;
				
				row3_HashRow.date_fs_month_number = row3.date_fs_month_number;
				
				row3_HashRow.date_fs_month_name = row3.date_fs_month_name;
				
				row3_HashRow.date_fs_year_number = row3.date_fs_year_number;
				
				row3_HashRow.date_diagnostic = row3.date_diagnostic;
				
				row3_HashRow.date_diagnostic_full_string = row3.date_diagnostic_full_string;
				
				row3_HashRow.date_diagnostic_monthyear = row3.date_diagnostic_monthyear;
				
				row3_HashRow.date_diagnostic_month_number = row3.date_diagnostic_month_number;
				
				row3_HashRow.date_diagnostic_month_name = row3.date_diagnostic_month_name;
				
				row3_HashRow.date_diagnostic_year_number = row3.date_diagnostic_year_number;
				
				row3_HashRow.diagnostic = row3.diagnostic;
				
				row3_HashRow.diagnostic_probability = row3.diagnostic_probability;
				
				row3_HashRow.date_riluz_full = row3.date_riluz_full;
				
				row3_HashRow.date_riluz_full_string = row3.date_riluz_full_string;
				
				row3_HashRow.date_riluz_monthyear = row3.date_riluz_monthyear;
				
				row3_HashRow.date_riluz_month_name = row3.date_riluz_month_name;
				
				row3_HashRow.date_riluz_month_number = row3.date_riluz_month_number;
				
				row3_HashRow.date_riluz_year_number = row3.date_riluz_year_number;
				
				row3_HashRow.riluz_on = row3.riluz_on;
				
				row3_HashRow.date_death_full = row3.date_death_full;
				
				row3_HashRow.date_death_string = row3.date_death_string;
				
				row3_HashRow.date_death_monthyear = row3.date_death_monthyear;
				
				row3_HashRow.date_death_month_name = row3.date_death_month_name;
				
				row3_HashRow.date_death_month_number = row3.date_death_month_number;
				
				row3_HashRow.date_death_year_number = row3.date_death_year_number;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tDBInput_15 - inputs:(after_tFileInputDelimited_1) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_1 - inputs:(out2,row22) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_15);
					String dbUser_tDBInput_15 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
			String url_tDBInput_15 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row22.id = 0;
							} else {
		                          
            if(rs_tDBInput_15.getObject(1) != null) {
                row22.id = rs_tDBInput_15.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row22.attribute_name = null;
							} else {
	                         		
        	row22.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_15, 2, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row22.attribute_name_abrev = null;
							} else {
	                         		
        	row22.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_15, 3, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								row22.attribute_value = null;
							} else {
	                         		
        	row22.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_15, 4, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 5) {
								row22.score_value = null;
							} else {
	                         		
        	row22.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_15, 5, false);
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.id = row22.id;
				
				row22_HashRow.attribute_name = row22.attribute_name;
				
				row22_HashRow.attribute_name_abrev = row22.attribute_name_abrev;
				
				row22_HashRow.attribute_value = row22.attribute_value;
				
				row22_HashRow.score_value = row22.score_value;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tDBInput_3 - inputs:(after_tFileInputDelimited_1) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_5 - inputs:(out1,row10) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String url_tDBInput_3 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row10.id = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                row10.id = rs_tDBInput_3.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row10.attribute_name = null;
							} else {
	                         		
        	row10.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row10.attribute_name_abrev = null;
							} else {
	                         		
        	row10.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row10.attribute_value = null;
							} else {
	                         		
        	row10.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row10.score_value = null;
							} else {
	                         		
        	row10.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.id = row10.id;
				
				row10_HashRow.attribute_name = row10.attribute_name;
				
				row10_HashRow.attribute_name_abrev = row10.attribute_name_abrev;
				
				row10_HashRow.attribute_value = row10.attribute_value;
				
				row10_HashRow.score_value = row10.score_value;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tDBInput_4 - inputs:(after_tFileInputDelimited_1) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_6 - inputs:(out5,row11) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
			String url_tDBInput_4 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row11.id = 0;
							} else {
		                          
            if(rs_tDBInput_4.getObject(1) != null) {
                row11.id = rs_tDBInput_4.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row11.attribute_name = null;
							} else {
	                         		
        	row11.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row11.attribute_name_abrev = null;
							} else {
	                         		
        	row11.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row11.attribute_value = null;
							} else {
	                         		
        	row11.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row11.score_value = null;
							} else {
	                         		
        	row11.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.id = row11.id;
				
				row11_HashRow.attribute_name = row11.attribute_name;
				
				row11_HashRow.attribute_name_abrev = row11.attribute_name_abrev;
				
				row11_HashRow.attribute_value = row11.attribute_value;
				
				row11_HashRow.score_value = row11.score_value;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tDBInput_5 - inputs:(after_tFileInputDelimited_1) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_7 - inputs:(out6,row12) outputs:(out7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_5);
					String dbUser_tDBInput_5 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
			String url_tDBInput_5 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row12.id = 0;
							} else {
		                          
            if(rs_tDBInput_5.getObject(1) != null) {
                row12.id = rs_tDBInput_5.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row12.attribute_name = null;
							} else {
	                         		
        	row12.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row12.attribute_name_abrev = null;
							} else {
	                         		
        	row12.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row12.attribute_value = null;
							} else {
	                         		
        	row12.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row12.score_value = null;
							} else {
	                         		
        	row12.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.id = row12.id;
				
				row12_HashRow.attribute_name = row12.attribute_name;
				
				row12_HashRow.attribute_name_abrev = row12.attribute_name_abrev;
				
				row12_HashRow.attribute_value = row12.attribute_value;
				
				row12_HashRow.score_value = row12.score_value;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tDBInput_6 - inputs:(after_tFileInputDelimited_1) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_8 - inputs:(out7,row13) outputs:(out8)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_6);
					String dbUser_tDBInput_6 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
			String url_tDBInput_6 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row13.id = 0;
							} else {
		                          
            if(rs_tDBInput_6.getObject(1) != null) {
                row13.id = rs_tDBInput_6.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row13.attribute_name = null;
							} else {
	                         		
        	row13.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row13.attribute_name_abrev = null;
							} else {
	                         		
        	row13.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row13.attribute_value = null;
							} else {
	                         		
        	row13.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row13.score_value = null;
							} else {
	                         		
        	row13.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.id = row13.id;
				
				row13_HashRow.attribute_name = row13.attribute_name;
				
				row13_HashRow.attribute_name_abrev = row13.attribute_name_abrev;
				
				row13_HashRow.attribute_value = row13.attribute_value;
				
				row13_HashRow.score_value = row13.score_value;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tDBInput_7 - inputs:(after_tFileInputDelimited_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_9 - inputs:(out8,row14) outputs:(out9)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_7);
					String dbUser_tDBInput_7 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
			String url_tDBInput_7 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row14.id = 0;
							} else {
		                          
            if(rs_tDBInput_7.getObject(1) != null) {
                row14.id = rs_tDBInput_7.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row14.attribute_name = null;
							} else {
	                         		
        	row14.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row14.attribute_name_abrev = null;
							} else {
	                         		
        	row14.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row14.attribute_value = null;
							} else {
	                         		
        	row14.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row14.score_value = null;
							} else {
	                         		
        	row14.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.id = row14.id;
				
				row14_HashRow.attribute_name = row14.attribute_name;
				
				row14_HashRow.attribute_name_abrev = row14.attribute_name_abrev;
				
				row14_HashRow.attribute_value = row14.attribute_value;
				
				row14_HashRow.score_value = row14.score_value;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tDBInput_8 - inputs:(after_tFileInputDelimited_1) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_10 - inputs:(out9,row15) outputs:(out10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_8);
					String dbUser_tDBInput_8 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
			String url_tDBInput_8 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row15.id = 0;
							} else {
		                          
            if(rs_tDBInput_8.getObject(1) != null) {
                row15.id = rs_tDBInput_8.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row15.attribute_name = null;
							} else {
	                         		
        	row15.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row15.attribute_name_abrev = null;
							} else {
	                         		
        	row15.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row15.attribute_value = null;
							} else {
	                         		
        	row15.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row15.score_value = null;
							} else {
	                         		
        	row15.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_8, 5, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.id = row15.id;
				
				row15_HashRow.attribute_name = row15.attribute_name;
				
				row15_HashRow.attribute_name_abrev = row15.attribute_name_abrev;
				
				row15_HashRow.attribute_value = row15.attribute_value;
				
				row15_HashRow.score_value = row15.score_value;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tDBInput_9 - inputs:(after_tFileInputDelimited_1) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_11 - inputs:(out10,row16) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_9);
					String dbUser_tDBInput_9 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
			String url_tDBInput_9 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row16.id = 0;
							} else {
		                          
            if(rs_tDBInput_9.getObject(1) != null) {
                row16.id = rs_tDBInput_9.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row16.attribute_name = null;
							} else {
	                         		
        	row16.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row16.attribute_name_abrev = null;
							} else {
	                         		
        	row16.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row16.attribute_value = null;
							} else {
	                         		
        	row16.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row16.score_value = null;
							} else {
	                         		
        	row16.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_9, 5, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.id = row16.id;
				
				row16_HashRow.attribute_name = row16.attribute_name;
				
				row16_HashRow.attribute_name_abrev = row16.attribute_name_abrev;
				
				row16_HashRow.attribute_value = row16.attribute_value;
				
				row16_HashRow.score_value = row16.score_value;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tDBInput_10 - inputs:(after_tFileInputDelimited_1) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_12 - inputs:(out11,row17) outputs:(out12)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_10);
					String dbUser_tDBInput_10 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
			String url_tDBInput_10 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row17.id = 0;
							} else {
		                          
            if(rs_tDBInput_10.getObject(1) != null) {
                row17.id = rs_tDBInput_10.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row17.attribute_name = null;
							} else {
	                         		
        	row17.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row17.attribute_name_abrev = null;
							} else {
	                         		
        	row17.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row17.attribute_value = null;
							} else {
	                         		
        	row17.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_10, 4, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								row17.score_value = null;
							} else {
	                         		
        	row17.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_10, 5, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.id = row17.id;
				
				row17_HashRow.attribute_name = row17.attribute_name;
				
				row17_HashRow.attribute_name_abrev = row17.attribute_name_abrev;
				
				row17_HashRow.attribute_value = row17.attribute_value;
				
				row17_HashRow.score_value = row17.score_value;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

tHash_Lookup_row17.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tDBInput_11 - inputs:(after_tFileInputDelimited_1) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_13 - inputs:(out12,row18) outputs:(out13)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_11);
					String dbUser_tDBInput_11 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
			String url_tDBInput_11 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row18.id = 0;
							} else {
		                          
            if(rs_tDBInput_11.getObject(1) != null) {
                row18.id = rs_tDBInput_11.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row18.attribute_name = null;
							} else {
	                         		
        	row18.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row18.attribute_name_abrev = null;
							} else {
	                         		
        	row18.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row18.attribute_value = null;
							} else {
	                         		
        	row18.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row18.score_value = null;
							} else {
	                         		
        	row18.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.id = row18.id;
				
				row18_HashRow.attribute_name = row18.attribute_name;
				
				row18_HashRow.attribute_name_abrev = row18.attribute_name_abrev;
				
				row18_HashRow.attribute_value = row18.attribute_value;
				
				row18_HashRow.score_value = row18.score_value;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

tHash_Lookup_row18.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tDBInput_12 - inputs:(after_tFileInputDelimited_1) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_14 - inputs:(out13,row19) outputs:(out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_12);
					String dbUser_tDBInput_12 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
			String url_tDBInput_12 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row19.id = 0;
							} else {
		                          
            if(rs_tDBInput_12.getObject(1) != null) {
                row19.id = rs_tDBInput_12.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row19.attribute_name = null;
							} else {
	                         		
        	row19.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row19.attribute_name_abrev = null;
							} else {
	                         		
        	row19.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_12, 3, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row19.attribute_value = null;
							} else {
	                         		
        	row19.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_12, 4, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 5) {
								row19.score_value = null;
							} else {
	                         		
        	row19.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_12, 5, false);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.id = row19.id;
				
				row19_HashRow.attribute_name = row19.attribute_name;
				
				row19_HashRow.attribute_name_abrev = row19.attribute_name_abrev;
				
				row19_HashRow.attribute_value = row19.attribute_value;
				
				row19_HashRow.score_value = row19.score_value;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row20 = 0;
		

			   		// connection name:row20
			   		// source node:tDBInput_13 - inputs:(after_tFileInputDelimited_1) outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_15 - inputs:(out14,row20) outputs:(out15)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_13);
					String dbUser_tDBInput_13 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
			String url_tDBInput_13 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row20.id = 0;
							} else {
		                          
            if(rs_tDBInput_13.getObject(1) != null) {
                row20.id = rs_tDBInput_13.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row20.attribute_name = null;
							} else {
	                         		
        	row20.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row20.attribute_name_abrev = null;
							} else {
	                         		
        	row20.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row20.attribute_value = null;
							} else {
	                         		
        	row20.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row20.score_value = null;
							} else {
	                         		
        	row20.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.id = row20.id;
				
				row20_HashRow.attribute_name = row20.attribute_name;
				
				row20_HashRow.attribute_name_abrev = row20.attribute_name_abrev;
				
				row20_HashRow.attribute_value = row20.attribute_value;
				
				row20_HashRow.score_value = row20.score_value;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

tHash_Lookup_row20.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String attribute_name;

				public String getAttribute_name () {
					return this.attribute_name;
				}
				
			    public String attribute_name_abrev;

				public String getAttribute_name_abrev () {
					return this.attribute_name_abrev;
				}
				
			    public String attribute_value;

				public String getAttribute_value () {
					return this.attribute_value;
				}
				
			    public String score_value;

				public String getScore_value () {
					return this.score_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.attribute_name_abrev == null) ? 0 : this.attribute_name_abrev.hashCode());
					
						result = prime * result + ((this.attribute_value == null) ? 0 : this.attribute_value.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.attribute_name_abrev == null) {
							if (other.attribute_name_abrev != null)
								return false;
						
						} else if (!this.attribute_name_abrev.equals(other.attribute_name_abrev))
						
							return false;
					
						if (this.attribute_value == null) {
							if (other.attribute_value != null)
								return false;
						
						} else if (!this.attribute_value.equals(other.attribute_value))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.id = this.id;
	            other.attribute_name = this.attribute_name;
	            other.attribute_name_abrev = this.attribute_name_abrev;
	            other.attribute_value = this.attribute_value;
	            other.score_value = this.score_value;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.attribute_name_abrev = this.attribute_name_abrev;
	            	other.attribute_value = this.attribute_value;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1.length == 0) {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_CLINICAL_MEASURES1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_CLINICAL_MEASURES1) {

        	try {

        		int length = 0;
		
					this.attribute_name_abrev = readString(dis);
					
					this.attribute_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.attribute_name_abrev,dos);
					
					// String
				
						writeString(this.attribute_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.attribute_name = readString(dis,ois);
					
						this.score_value = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.attribute_name, dos, oos);
					
						writeString(this.score_value, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",attribute_name="+attribute_name);
		sb.append(",attribute_name_abrev="+attribute_name_abrev);
		sb.append(",attribute_value="+attribute_value);
		sb.append(",score_value="+score_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.attribute_name_abrev, other.attribute_name_abrev);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.attribute_value, other.attribute_value);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tDBInput_14 - inputs:(after_tFileInputDelimited_1) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_16 - inputs:(out15,row21) outputs:(out16)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_14);
					String dbUser_tDBInput_14 = "21807140t";
					
					
					 
	final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("93dfa691f12faf29fabfa1e1dca2fd61");
					
					String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
			String url_tDBInput_14 = "jdbc:postgresql://" + "10.195.25.10" + ":" + "54464" + "/" + "db_21807140t_stage_test";
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"id\", \n  \"db_21807140t_stage_test\".\"public\"."
+"\"als_dictionnary\".\"attribute_name\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_name_a"
+"brev\", \n  \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\".\"attribute_value\", \n  \"db_21807140t_stage_test"
+"\".\"public\".\"als_dictionnary\".\"score_value\"\nFROM \"db_21807140t_stage_test\".\"public\".\"als_dictionnary\"";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row21.id = 0;
							} else {
		                          
            if(rs_tDBInput_14.getObject(1) != null) {
                row21.id = rs_tDBInput_14.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row21.attribute_name = null;
							} else {
	                         		
        	row21.attribute_name = routines.system.JDBCUtil.getString(rs_tDBInput_14, 2, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row21.attribute_name_abrev = null;
							} else {
	                         		
        	row21.attribute_name_abrev = routines.system.JDBCUtil.getString(rs_tDBInput_14, 3, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row21.attribute_value = null;
							} else {
	                         		
        	row21.attribute_value = routines.system.JDBCUtil.getString(rs_tDBInput_14, 4, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 5) {
								row21.score_value = null;
							} else {
	                         		
        	row21.score_value = routines.system.JDBCUtil.getString(rs_tDBInput_14, 5, false);
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.id = row21.id;
				
				row21_HashRow.attribute_name = row21.attribute_name;
				
				row21_HashRow.attribute_name_abrev = row21.attribute_name_abrev;
				
				row21_HashRow.attribute_value = row21.attribute_value;
				
				row21_HashRow.score_value = row21.score_value;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

tHash_Lookup_row21.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FT_CLINICAL_MEASURES1 FT_CLINICAL_MEASURES1Class = new FT_CLINICAL_MEASURES1();

        int exitCode = FT_CLINICAL_MEASURES1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FT_CLINICAL_MEASURES1.class.getClassLoader().getResourceAsStream("stagepca/ft_clinical_measures1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FT_CLINICAL_MEASURES1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("EXCEL_CLIN_1_RowSeparator", "id_String");
				
                context.EXCEL_CLIN_1_RowSeparator=(String) context.getProperty("EXCEL_CLIN_1_RowSeparator");
				    context.setContextType("EXCEL_CLIN_1_FieldSeparator", "id_String");
				
                context.EXCEL_CLIN_1_FieldSeparator=(String) context.getProperty("EXCEL_CLIN_1_FieldSeparator");
				    context.setContextType("EXCEL_CLIN_1_File", "id_File");
				
                context.EXCEL_CLIN_1_File=(String) context.getProperty("EXCEL_CLIN_1_File");
				    context.setContextType("EXCEL_CLIN_1_Encoding", "id_String");
				
                context.EXCEL_CLIN_1_Encoding=(String) context.getProperty("EXCEL_CLIN_1_Encoding");
				    context.setContextType("EXCEL_CLIN_1_Header", "id_Integer");
				
             try{
                 context.EXCEL_CLIN_1_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_CLIN_1_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_CLIN_1_Header", e.getMessage()));
                 context.EXCEL_CLIN_1_Header=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EXCEL_CLIN_1_RowSeparator")) {
                context.EXCEL_CLIN_1_RowSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_RowSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_FieldSeparator")) {
                context.EXCEL_CLIN_1_FieldSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_File")) {
                context.EXCEL_CLIN_1_File = (String) parentContextMap.get("EXCEL_CLIN_1_File");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_Encoding")) {
                context.EXCEL_CLIN_1_Encoding = (String) parentContextMap.get("EXCEL_CLIN_1_Encoding");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_Header")) {
                context.EXCEL_CLIN_1_Header = (Integer) parentContextMap.get("EXCEL_CLIN_1_Header");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FT_CLINICAL_MEASURES1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     897302 characters generated by Talend Open Studio for Data Integration 
 *     on the January 20, 2020 7:42:42 AM CET
 ************************************************************************************************/