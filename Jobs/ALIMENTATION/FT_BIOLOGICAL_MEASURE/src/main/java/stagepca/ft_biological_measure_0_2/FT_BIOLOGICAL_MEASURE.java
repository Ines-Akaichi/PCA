// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.ft_biological_measure_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FT_BIOLOGICAL_MEASURE Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class FT_BIOLOGICAL_MEASURE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EXCEL_BIOLOGICAL_TRANS_Encoding != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_TRANS_Encoding", EXCEL_BIOLOGICAL_TRANS_Encoding.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_TRANS_FieldSeparator != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_TRANS_FieldSeparator", EXCEL_BIOLOGICAL_TRANS_FieldSeparator.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_TRANS_File != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_TRANS_File", EXCEL_BIOLOGICAL_TRANS_File.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_TRANS_Header != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_TRANS_Header", EXCEL_BIOLOGICAL_TRANS_Header.toString());
				
			}
			
			if(EXCEL_BIOLOGICAL_TRANS_RowSeparator != null){
				
					this.setProperty("EXCEL_BIOLOGICAL_TRANS_RowSeparator", EXCEL_BIOLOGICAL_TRANS_RowSeparator.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Database != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Database", CNX_POSTGRES_DWH_Database.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Login != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Login", CNX_POSTGRES_DWH_Login.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Password != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Password", CNX_POSTGRES_DWH_Password.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Port != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Port", CNX_POSTGRES_DWH_Port.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Schema != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Schema", CNX_POSTGRES_DWH_Schema.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Server != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Server", CNX_POSTGRES_DWH_Server.toString());
				
			}
			
		}

public String EXCEL_BIOLOGICAL_TRANS_Encoding;
public String getEXCEL_BIOLOGICAL_TRANS_Encoding(){
	return this.EXCEL_BIOLOGICAL_TRANS_Encoding;
}
public String EXCEL_BIOLOGICAL_TRANS_FieldSeparator;
public String getEXCEL_BIOLOGICAL_TRANS_FieldSeparator(){
	return this.EXCEL_BIOLOGICAL_TRANS_FieldSeparator;
}
		public String EXCEL_BIOLOGICAL_TRANS_File;
		public String getEXCEL_BIOLOGICAL_TRANS_File(){
			return this.EXCEL_BIOLOGICAL_TRANS_File;
		}
		
public Integer EXCEL_BIOLOGICAL_TRANS_Header;
public Integer getEXCEL_BIOLOGICAL_TRANS_Header(){
	return this.EXCEL_BIOLOGICAL_TRANS_Header;
}
public String EXCEL_BIOLOGICAL_TRANS_RowSeparator;
public String getEXCEL_BIOLOGICAL_TRANS_RowSeparator(){
	return this.EXCEL_BIOLOGICAL_TRANS_RowSeparator;
}
public String CNX_POSTGRES_DWH_Database;
public String getCNX_POSTGRES_DWH_Database(){
	return this.CNX_POSTGRES_DWH_Database;
}
public String CNX_POSTGRES_DWH_Login;
public String getCNX_POSTGRES_DWH_Login(){
	return this.CNX_POSTGRES_DWH_Login;
}
public java.lang.String CNX_POSTGRES_DWH_Password;
public java.lang.String getCNX_POSTGRES_DWH_Password(){
	return this.CNX_POSTGRES_DWH_Password;
}
public String CNX_POSTGRES_DWH_Port;
public String getCNX_POSTGRES_DWH_Port(){
	return this.CNX_POSTGRES_DWH_Port;
}
public String CNX_POSTGRES_DWH_Schema;
public String getCNX_POSTGRES_DWH_Schema(){
	return this.CNX_POSTGRES_DWH_Schema;
}
public String CNX_POSTGRES_DWH_Server;
public String getCNX_POSTGRES_DWH_Server(){
	return this.CNX_POSTGRES_DWH_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "FT_BIOLOGICAL_MEASURE";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FT_BIOLOGICAL_MEASURE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FT_BIOLOGICAL_MEASURE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int measure_key;

				public int getMeasure_key () {
					return this.measure_key;
				}
				
			    public int date_sampling_key;

				public int getDate_sampling_key () {
					return this.date_sampling_key;
				}
				
			    public int time_sampling_key;

				public int getTime_sampling_key () {
					return this.time_sampling_key;
				}
				
			    public String mesure_value;

				public String getMesure_value () {
					return this.mesure_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.measure_key;
						
							result = prime * result + (int) this.date_sampling_key;
						
							result = prime * result + (int) this.time_sampling_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.measure_key != other.measure_key)
							return false;
					
						if (this.date_sampling_key != other.date_sampling_key)
							return false;
					
						if (this.time_sampling_key != other.time_sampling_key)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.patient_key = this.patient_key;
	            other.measure_key = this.measure_key;
	            other.date_sampling_key = this.date_sampling_key;
	            other.time_sampling_key = this.time_sampling_key;
	            other.mesure_value = this.mesure_value;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.patient_key = this.patient_key;
	            	other.measure_key = this.measure_key;
	            	other.date_sampling_key = this.date_sampling_key;
	            	other.time_sampling_key = this.time_sampling_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.measure_key = dis.readInt();
					
			        this.date_sampling_key = dis.readInt();
					
			        this.time_sampling_key = dis.readInt();
					
					this.mesure_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.measure_key);
					
					// int
				
		            	dos.writeInt(this.date_sampling_key);
					
					// int
				
		            	dos.writeInt(this.time_sampling_key);
					
					// String
				
						writeString(this.mesure_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",measure_key="+String.valueOf(measure_key));
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
		sb.append(",mesure_value="+mesure_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.measure_key, other.measure_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_sampling_key, other.date_sampling_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.time_sampling_key, other.time_sampling_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public int measure_key;

				public int getMeasure_key () {
					return this.measure_key;
				}
				
			    public int date_sampling_key;

				public int getDate_sampling_key () {
					return this.date_sampling_key;
				}
				
			    public int time_sampling_key;

				public int getTime_sampling_key () {
					return this.time_sampling_key;
				}
				
			    public String mesure_value;

				public String getMesure_value () {
					return this.mesure_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_key;
						
							result = prime * result + (int) this.measure_key;
						
							result = prime * result + (int) this.date_sampling_key;
						
							result = prime * result + (int) this.time_sampling_key;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.patient_key != other.patient_key)
							return false;
					
						if (this.measure_key != other.measure_key)
							return false;
					
						if (this.date_sampling_key != other.date_sampling_key)
							return false;
					
						if (this.time_sampling_key != other.time_sampling_key)
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.patient_key = this.patient_key;
	            other.measure_key = this.measure_key;
	            other.date_sampling_key = this.date_sampling_key;
	            other.time_sampling_key = this.time_sampling_key;
	            other.mesure_value = this.mesure_value;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.patient_key = this.patient_key;
	            	other.measure_key = this.measure_key;
	            	other.date_sampling_key = this.date_sampling_key;
	            	other.time_sampling_key = this.time_sampling_key;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
			        this.patient_key = dis.readInt();
					
			        this.measure_key = dis.readInt();
					
			        this.date_sampling_key = dis.readInt();
					
			        this.time_sampling_key = dis.readInt();
					
					this.mesure_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_key);
					
					// int
				
		            	dos.writeInt(this.measure_key);
					
					// int
				
		            	dos.writeInt(this.date_sampling_key);
					
					// int
				
		            	dos.writeInt(this.time_sampling_key);
					
					// String
				
						writeString(this.mesure_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",measure_key="+String.valueOf(measure_key));
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
		sb.append(",mesure_value="+mesure_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_key, other.patient_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.measure_key, other.measure_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.date_sampling_key, other.date_sampling_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.time_sampling_key, other.time_sampling_key);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];

	
			    public String Time;

				public String getTime () {
					return this.Time;
				}
				
			    public String Date_prelevement;

				public String getDate_prelevement () {
					return this.Date_prelevement;
				}
				
			    public String IPP_HASH;

				public String getIPP_HASH () {
					return this.IPP_HASH;
				}
				
			    public String mesure;

				public String getMesure () {
					return this.mesure;
				}
				
			    public String mesure_value;

				public String getMesure_value () {
					return this.mesure_value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.Time = readString(dis);
					
					this.Date_prelevement = readString(dis);
					
					this.IPP_HASH = readString(dis);
					
					this.mesure = readString(dis);
					
					this.mesure_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Time,dos);
					
					// String
				
						writeString(this.Date_prelevement,dos);
					
					// String
				
						writeString(this.IPP_HASH,dos);
					
					// String
				
						writeString(this.mesure,dos);
					
					// String
				
						writeString(this.mesure_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Time="+Time);
		sb.append(",Date_prelevement="+Date_prelevement);
		sb.append(",IPP_HASH="+IPP_HASH);
		sb.append(",mesure="+mesure);
		sb.append(",mesure_value="+mesure_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];

	
			    public String IPP_HASH;

				public String getIPP_HASH () {
					return this.IPP_HASH;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public String mesure;

				public String getMesure () {
					return this.mesure;
				}
				
			    public String mesure_value;

				public String getMesure_value () {
					return this.mesure_value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.IPP_HASH = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_de_naissance = readString(dis);
					
					this.mesure = readString(dis);
					
					this.mesure_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IPP_HASH,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// String
				
						writeString(this.mesure,dos);
					
					// String
				
						writeString(this.mesure_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPP_HASH="+IPP_HASH);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",mesure="+mesure);
		sb.append(",mesure_value="+mesure_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];

	
			    public String IPP_HASH;

				public String getIPP_HASH () {
					return this.IPP_HASH;
				}
				
			    public java.util.Date Date_de_prelevement;

				public java.util.Date getDate_de_prelevement () {
					return this.Date_de_prelevement;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public String Date_de_naissance;

				public String getDate_de_naissance () {
					return this.Date_de_naissance;
				}
				
			    public String mesure;

				public String getMesure () {
					return this.mesure;
				}
				
			    public String mesure_value;

				public String getMesure_value () {
					return this.mesure_value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.IPP_HASH = readString(dis);
					
					this.Date_de_prelevement = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_de_naissance = readString(dis);
					
					this.mesure = readString(dis);
					
					this.mesure_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IPP_HASH,dos);
					
					// java.util.Date
				
						writeDate(this.Date_de_prelevement,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// String
				
						writeString(this.Date_de_naissance,dos);
					
					// String
				
						writeString(this.mesure,dos);
					
					// String
				
						writeString(this.mesure_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IPP_HASH="+IPP_HASH);
		sb.append(",Date_de_prelevement="+String.valueOf(Date_de_prelevement));
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_de_naissance="+Date_de_naissance);
		sb.append(",mesure="+mesure);
		sb.append(",mesure_value="+mesure_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);

		row1Struct row1 = new row1Struct();
out2Struct out2 = new out2Struct();
out1Struct out1 = new out1Struct();
row6Struct row6 = new row6Struct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.CNX_POSTGRES_DWH_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "fact_bilogical_measures";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "fact_bilogical_measures";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_1 = "jdbc:postgresql://"+context.CNX_POSTGRES_DWH_Server+":"+context.CNX_POSTGRES_DWH_Port+"/"+context.CNX_POSTGRES_DWH_Database;
    dbUser_tDBOutput_1 = context.CNX_POSTGRES_DWH_Login;

	final String decryptedPassword_tDBOutput_1 = context.CNX_POSTGRES_DWH_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"patient_key\",\"measure_key\",\"date_sampling_key\",\"time_sampling_key\",\"measure\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					int patient_key;
					int measure_key;
					int date_sampling_key;
					int time_sampling_key;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.patient_key;
									
									result = prime * result + (int) this.measure_key;
									
									result = prime * result + (int) this.date_sampling_key;
									
									result = prime * result + (int) this.time_sampling_key;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.patient_key != other.patient_key) 
										return false;
								
									if (this.measure_key != other.measure_key) 
										return false;
								
									if (this.date_sampling_key != other.date_sampling_key) 
										return false;
								
									if (this.time_sampling_key != other.time_sampling_key) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.EXCEL_BIOLOGICAL_TRANS_File;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.EXCEL_BIOLOGICAL_TRANS_File, "UTF-8",context.EXCEL_BIOLOGICAL_TRANS_FieldSeparator,context.EXCEL_BIOLOGICAL_TRANS_RowSeparator,false,context.EXCEL_BIOLOGICAL_TRANS_Header,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.IPP_HASH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.Date_de_prelevement = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_de_prelevement", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Date_de_prelevement = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Sexe = ParserUtils.parseTo_Character(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Sexe", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Sexe = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Date_de_naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.mesure = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.mesure_value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.Time = TalendDate.formatDate("HH:mm",row1.Date_de_prelevement);
out2_tmp.Date_prelevement = TalendDate.formatDate("dd/MM/yyyy",row1.Date_de_prelevement);
out2_tmp.IPP_HASH = row1.IPP_HASH ;
out2_tmp.mesure = row1.mesure ;
out2_tmp.mesure_value = row1.mesure_value ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row2HashKey.ipp_hash = out2.IPP_HASH ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row3HashKey.time_sampling_full = out2.Time.trim() ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							row3Struct row3 = null;
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row4HashKey.date_sampling_full = out2.Date_prelevement.trim();
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row5HashKey.measure_name = out2.mesure.trim();
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow5 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow5 = true;
			           		  	} // G 21
                    		  	
                    		

							row5Struct row5 = null;
                    		  	 
							

								while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) || forceLooprow5) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row5'
									
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								
								if(!forceLooprow5) { // G 46
								
							
								 
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow5 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.patient_key = row2.patient_key ;
out1_tmp.measure_key = row5.measure_key ;
out1_tmp.date_sampling_key = row4.date_sampling_key ;
out1_tmp.time_sampling_key = row3.time_sampling_key ;
out1_tmp.mesure_value = out2.mesure_value;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		
row6 = null;			
finder_tUniqRow_1.patient_key = out1.patient_key;
finder_tUniqRow_1.measure_key = out1.measure_key;
finder_tUniqRow_1.date_sampling_key = out1.date_sampling_key;
finder_tUniqRow_1.time_sampling_key = out1.time_sampling_key;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.patient_key = out1.patient_key;
new_tUniqRow_1.measure_key = out1.measure_key;
new_tUniqRow_1.date_sampling_key = out1.date_sampling_key;
new_tUniqRow_1.time_sampling_key = out1.time_sampling_key;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row6 == null){ 
	
	row6 = new row6Struct();
}row6.patient_key = out1.patient_key;			row6.measure_key = out1.measure_key;			row6.date_sampling_key = out1.date_sampling_key;			row6.time_sampling_key = out1.time_sampling_key;			row6.mesure_value = out1.mesure_value;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, row6.patient_key);

                    pstmt_tDBOutput_1.setInt(2, row6.measure_key);

                    pstmt_tDBOutput_1.setInt(3, row6.date_sampling_key);

                    pstmt_tDBOutput_1.setInt(4, row6.time_sampling_key);

                    if(row6.mesure_value == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row6.mesure_value);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row5' // G_TM_M_043
		
		} // close loop of lookup 'row4' // G_TM_M_043
		
		} // close loop of lookup 'row3' // G_TM_M_043
		
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.EXCEL_BIOLOGICAL_TRANS_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_key;

				public int getPatient_key () {
					return this.patient_key;
				}
				
			    public String ipp_hash;

				public String getIpp_hash () {
					return this.ipp_hash;
				}
				
			    public String ipp;

				public String getIpp () {
					return this.ipp;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String name_surname;

				public String getName_surname () {
					return this.name_surname;
				}
				
			    public String birthdate;

				public String getBirthdate () {
					return this.birthdate;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public String startplace_fs;

				public String getStartplace_fs () {
					return this.startplace_fs;
				}
				
			    public String date_fs;

				public String getDate_fs () {
					return this.date_fs;
				}
				
			    public String date_fs_full_string;

				public String getDate_fs_full_string () {
					return this.date_fs_full_string;
				}
				
			    public String date_fs_monthyear;

				public String getDate_fs_monthyear () {
					return this.date_fs_monthyear;
				}
				
			    public String date_fs_month_number;

				public String getDate_fs_month_number () {
					return this.date_fs_month_number;
				}
				
			    public String date_fs_month_name;

				public String getDate_fs_month_name () {
					return this.date_fs_month_name;
				}
				
			    public String date_fs_year_number;

				public String getDate_fs_year_number () {
					return this.date_fs_year_number;
				}
				
			    public String date_diagnostic;

				public String getDate_diagnostic () {
					return this.date_diagnostic;
				}
				
			    public String date_diagnostic_full_string;

				public String getDate_diagnostic_full_string () {
					return this.date_diagnostic_full_string;
				}
				
			    public String date_diagnostic_monthyear;

				public String getDate_diagnostic_monthyear () {
					return this.date_diagnostic_monthyear;
				}
				
			    public String date_diagnostic_month_number;

				public String getDate_diagnostic_month_number () {
					return this.date_diagnostic_month_number;
				}
				
			    public String date_diagnostic_month_name;

				public String getDate_diagnostic_month_name () {
					return this.date_diagnostic_month_name;
				}
				
			    public String date_diagnostic_year_number;

				public String getDate_diagnostic_year_number () {
					return this.date_diagnostic_year_number;
				}
				
			    public String diagnostic;

				public String getDiagnostic () {
					return this.diagnostic;
				}
				
			    public String diagnostic_probability;

				public String getDiagnostic_probability () {
					return this.diagnostic_probability;
				}
				
			    public String date_riluz_full;

				public String getDate_riluz_full () {
					return this.date_riluz_full;
				}
				
			    public String date_riluz_full_string;

				public String getDate_riluz_full_string () {
					return this.date_riluz_full_string;
				}
				
			    public String date_riluz_monthyear;

				public String getDate_riluz_monthyear () {
					return this.date_riluz_monthyear;
				}
				
			    public String date_riluz_month_name;

				public String getDate_riluz_month_name () {
					return this.date_riluz_month_name;
				}
				
			    public String date_riluz_month_number;

				public String getDate_riluz_month_number () {
					return this.date_riluz_month_number;
				}
				
			    public String date_riluz_year_number;

				public String getDate_riluz_year_number () {
					return this.date_riluz_year_number;
				}
				
			    public String riluz_on;

				public String getRiluz_on () {
					return this.riluz_on;
				}
				
			    public String date_death_full;

				public String getDate_death_full () {
					return this.date_death_full;
				}
				
			    public String date_death_string;

				public String getDate_death_string () {
					return this.date_death_string;
				}
				
			    public String date_death_monthyear;

				public String getDate_death_monthyear () {
					return this.date_death_monthyear;
				}
				
			    public String date_death_month_name;

				public String getDate_death_month_name () {
					return this.date_death_month_name;
				}
				
			    public String date_death_month_number;

				public String getDate_death_month_number () {
					return this.date_death_month_number;
				}
				
			    public String date_death_year_number;

				public String getDate_death_year_number () {
					return this.date_death_year_number;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ipp_hash == null) ? 0 : this.ipp_hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ipp_hash == null) {
							if (other.ipp_hash != null)
								return false;
						
						} else if (!this.ipp_hash.equals(other.ipp_hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.patient_key = this.patient_key;
	            other.ipp_hash = this.ipp_hash;
	            other.ipp = this.ipp;
	            other.name = this.name;
	            other.surname = this.surname;
	            other.name_surname = this.name_surname;
	            other.birthdate = this.birthdate;
	            other.sex = this.sex;
	            other.startplace_fs = this.startplace_fs;
	            other.date_fs = this.date_fs;
	            other.date_fs_full_string = this.date_fs_full_string;
	            other.date_fs_monthyear = this.date_fs_monthyear;
	            other.date_fs_month_number = this.date_fs_month_number;
	            other.date_fs_month_name = this.date_fs_month_name;
	            other.date_fs_year_number = this.date_fs_year_number;
	            other.date_diagnostic = this.date_diagnostic;
	            other.date_diagnostic_full_string = this.date_diagnostic_full_string;
	            other.date_diagnostic_monthyear = this.date_diagnostic_monthyear;
	            other.date_diagnostic_month_number = this.date_diagnostic_month_number;
	            other.date_diagnostic_month_name = this.date_diagnostic_month_name;
	            other.date_diagnostic_year_number = this.date_diagnostic_year_number;
	            other.diagnostic = this.diagnostic;
	            other.diagnostic_probability = this.diagnostic_probability;
	            other.date_riluz_full = this.date_riluz_full;
	            other.date_riluz_full_string = this.date_riluz_full_string;
	            other.date_riluz_monthyear = this.date_riluz_monthyear;
	            other.date_riluz_month_name = this.date_riluz_month_name;
	            other.date_riluz_month_number = this.date_riluz_month_number;
	            other.date_riluz_year_number = this.date_riluz_year_number;
	            other.riluz_on = this.riluz_on;
	            other.date_death_full = this.date_death_full;
	            other.date_death_string = this.date_death_string;
	            other.date_death_monthyear = this.date_death_monthyear;
	            other.date_death_month_name = this.date_death_month_name;
	            other.date_death_month_number = this.date_death_month_number;
	            other.date_death_year_number = this.date_death_year_number;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ipp_hash = this.ipp_hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.ipp_hash = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ipp_hash,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.patient_key = dis.readInt();
					
						this.ipp = readString(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.surname = readString(dis,ois);
					
						this.name_surname = readString(dis,ois);
					
						this.birthdate = readString(dis,ois);
					
						this.sex = readString(dis,ois);
					
						this.startplace_fs = readString(dis,ois);
					
						this.date_fs = readString(dis,ois);
					
						this.date_fs_full_string = readString(dis,ois);
					
						this.date_fs_monthyear = readString(dis,ois);
					
						this.date_fs_month_number = readString(dis,ois);
					
						this.date_fs_month_name = readString(dis,ois);
					
						this.date_fs_year_number = readString(dis,ois);
					
						this.date_diagnostic = readString(dis,ois);
					
						this.date_diagnostic_full_string = readString(dis,ois);
					
						this.date_diagnostic_monthyear = readString(dis,ois);
					
						this.date_diagnostic_month_number = readString(dis,ois);
					
						this.date_diagnostic_month_name = readString(dis,ois);
					
						this.date_diagnostic_year_number = readString(dis,ois);
					
						this.diagnostic = readString(dis,ois);
					
						this.diagnostic_probability = readString(dis,ois);
					
						this.date_riluz_full = readString(dis,ois);
					
						this.date_riluz_full_string = readString(dis,ois);
					
						this.date_riluz_monthyear = readString(dis,ois);
					
						this.date_riluz_month_name = readString(dis,ois);
					
						this.date_riluz_month_number = readString(dis,ois);
					
						this.date_riluz_year_number = readString(dis,ois);
					
						this.riluz_on = readString(dis,ois);
					
						this.date_death_full = readString(dis,ois);
					
						this.date_death_string = readString(dis,ois);
					
						this.date_death_monthyear = readString(dis,ois);
					
						this.date_death_month_name = readString(dis,ois);
					
						this.date_death_month_number = readString(dis,ois);
					
						this.date_death_year_number = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.patient_key);
					
						writeString(this.ipp, dos, oos);
					
						writeString(this.name, dos, oos);
					
						writeString(this.surname, dos, oos);
					
						writeString(this.name_surname, dos, oos);
					
						writeString(this.birthdate, dos, oos);
					
						writeString(this.sex, dos, oos);
					
						writeString(this.startplace_fs, dos, oos);
					
						writeString(this.date_fs, dos, oos);
					
						writeString(this.date_fs_full_string, dos, oos);
					
						writeString(this.date_fs_monthyear, dos, oos);
					
						writeString(this.date_fs_month_number, dos, oos);
					
						writeString(this.date_fs_month_name, dos, oos);
					
						writeString(this.date_fs_year_number, dos, oos);
					
						writeString(this.date_diagnostic, dos, oos);
					
						writeString(this.date_diagnostic_full_string, dos, oos);
					
						writeString(this.date_diagnostic_monthyear, dos, oos);
					
						writeString(this.date_diagnostic_month_number, dos, oos);
					
						writeString(this.date_diagnostic_month_name, dos, oos);
					
						writeString(this.date_diagnostic_year_number, dos, oos);
					
						writeString(this.diagnostic, dos, oos);
					
						writeString(this.diagnostic_probability, dos, oos);
					
						writeString(this.date_riluz_full, dos, oos);
					
						writeString(this.date_riluz_full_string, dos, oos);
					
						writeString(this.date_riluz_monthyear, dos, oos);
					
						writeString(this.date_riluz_month_name, dos, oos);
					
						writeString(this.date_riluz_month_number, dos, oos);
					
						writeString(this.date_riluz_year_number, dos, oos);
					
						writeString(this.riluz_on, dos, oos);
					
						writeString(this.date_death_full, dos, oos);
					
						writeString(this.date_death_string, dos, oos);
					
						writeString(this.date_death_monthyear, dos, oos);
					
						writeString(this.date_death_month_name, dos, oos);
					
						writeString(this.date_death_month_number, dos, oos);
					
						writeString(this.date_death_year_number, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_key="+String.valueOf(patient_key));
		sb.append(",ipp_hash="+ipp_hash);
		sb.append(",ipp="+ipp);
		sb.append(",name="+name);
		sb.append(",surname="+surname);
		sb.append(",name_surname="+name_surname);
		sb.append(",birthdate="+birthdate);
		sb.append(",sex="+sex);
		sb.append(",startplace_fs="+startplace_fs);
		sb.append(",date_fs="+date_fs);
		sb.append(",date_fs_full_string="+date_fs_full_string);
		sb.append(",date_fs_monthyear="+date_fs_monthyear);
		sb.append(",date_fs_month_number="+date_fs_month_number);
		sb.append(",date_fs_month_name="+date_fs_month_name);
		sb.append(",date_fs_year_number="+date_fs_year_number);
		sb.append(",date_diagnostic="+date_diagnostic);
		sb.append(",date_diagnostic_full_string="+date_diagnostic_full_string);
		sb.append(",date_diagnostic_monthyear="+date_diagnostic_monthyear);
		sb.append(",date_diagnostic_month_number="+date_diagnostic_month_number);
		sb.append(",date_diagnostic_month_name="+date_diagnostic_month_name);
		sb.append(",date_diagnostic_year_number="+date_diagnostic_year_number);
		sb.append(",diagnostic="+diagnostic);
		sb.append(",diagnostic_probability="+diagnostic_probability);
		sb.append(",date_riluz_full="+date_riluz_full);
		sb.append(",date_riluz_full_string="+date_riluz_full_string);
		sb.append(",date_riluz_monthyear="+date_riluz_monthyear);
		sb.append(",date_riluz_month_name="+date_riluz_month_name);
		sb.append(",date_riluz_month_number="+date_riluz_month_number);
		sb.append(",date_riluz_year_number="+date_riluz_year_number);
		sb.append(",riluz_on="+riluz_on);
		sb.append(",date_death_full="+date_death_full);
		sb.append(",date_death_string="+date_death_string);
		sb.append(",date_death_monthyear="+date_death_monthyear);
		sb.append(",date_death_month_name="+date_death_month_name);
		sb.append(",date_death_month_number="+date_death_month_number);
		sb.append(",date_death_year_number="+date_death_year_number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ipp_hash, other.ipp_hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(out2,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.CNX_POSTGRES_DWH_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.CNX_POSTGRES_DWH_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String url_tDBInput_1 = "jdbc:postgresql://" + context.CNX_POSTGRES_DWH_Server + ":" + context.CNX_POSTGRES_DWH_Port + "/" + context.CNX_POSTGRES_DWH_Database;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"patient_key\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"ipp_hash\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"ipp\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"surname\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"name_surname\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"birthdate\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"sex\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"startplace_fs\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs_full_string\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs_monthyear\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs_month_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs_month_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_fs_year_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic_full_string\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic_monthyear\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic_month_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic_month_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_diagnostic_year_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"diagnostic\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"diagnostic_probability\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_full\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_full_string\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_monthyear\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_month_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_month_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_riluz_year_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"riluz_on\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_full\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_string\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_monthyear\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_month_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_month_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\".\"date_death_year_number\"\nFROM \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_patient\"";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.patient_key = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row2.patient_key = rs_tDBInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.ipp_hash = null;
							} else {
	                         		
        	row2.ipp_hash = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.ipp = null;
							} else {
	                         		
        	row2.ipp = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.name = null;
							} else {
	                         		
        	row2.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.surname = null;
							} else {
	                         		
        	row2.surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.name_surname = null;
							} else {
	                         		
        	row2.name_surname = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.birthdate = null;
							} else {
	                         		
        	row2.birthdate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.sex = null;
							} else {
	                         		
        	row2.sex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.startplace_fs = null;
							} else {
	                         		
        	row2.startplace_fs = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.date_fs = null;
							} else {
	                         		
        	row2.date_fs = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.date_fs_full_string = null;
							} else {
	                         		
        	row2.date_fs_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.date_fs_monthyear = null;
							} else {
	                         		
        	row2.date_fs_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.date_fs_month_number = null;
							} else {
	                         		
        	row2.date_fs_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.date_fs_month_name = null;
							} else {
	                         		
        	row2.date_fs_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row2.date_fs_year_number = null;
							} else {
	                         		
        	row2.date_fs_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row2.date_diagnostic = null;
							} else {
	                         		
        	row2.date_diagnostic = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row2.date_diagnostic_full_string = null;
							} else {
	                         		
        	row2.date_diagnostic_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row2.date_diagnostic_monthyear = null;
							} else {
	                         		
        	row2.date_diagnostic_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row2.date_diagnostic_month_number = null;
							} else {
	                         		
        	row2.date_diagnostic_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row2.date_diagnostic_month_name = null;
							} else {
	                         		
        	row2.date_diagnostic_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row2.date_diagnostic_year_number = null;
							} else {
	                         		
        	row2.date_diagnostic_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row2.diagnostic = null;
							} else {
	                         		
        	row2.diagnostic = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row2.diagnostic_probability = null;
							} else {
	                         		
        	row2.diagnostic_probability = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row2.date_riluz_full = null;
							} else {
	                         		
        	row2.date_riluz_full = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row2.date_riluz_full_string = null;
							} else {
	                         		
        	row2.date_riluz_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row2.date_riluz_monthyear = null;
							} else {
	                         		
        	row2.date_riluz_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row2.date_riluz_month_name = null;
							} else {
	                         		
        	row2.date_riluz_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row2.date_riluz_month_number = null;
							} else {
	                         		
        	row2.date_riluz_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row2.date_riluz_year_number = null;
							} else {
	                         		
        	row2.date_riluz_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row2.riluz_on = null;
							} else {
	                         		
        	row2.riluz_on = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row2.date_death_full = null;
							} else {
	                         		
        	row2.date_death_full = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row2.date_death_string = null;
							} else {
	                         		
        	row2.date_death_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row2.date_death_monthyear = null;
							} else {
	                         		
        	row2.date_death_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row2.date_death_month_name = null;
							} else {
	                         		
        	row2.date_death_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row2.date_death_month_number = null;
							} else {
	                         		
        	row2.date_death_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row2.date_death_year_number = null;
							} else {
	                         		
        	row2.date_death_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.patient_key = row2.patient_key;
				
				row2_HashRow.ipp_hash = row2.ipp_hash;
				
				row2_HashRow.ipp = row2.ipp;
				
				row2_HashRow.name = row2.name;
				
				row2_HashRow.surname = row2.surname;
				
				row2_HashRow.name_surname = row2.name_surname;
				
				row2_HashRow.birthdate = row2.birthdate;
				
				row2_HashRow.sex = row2.sex;
				
				row2_HashRow.startplace_fs = row2.startplace_fs;
				
				row2_HashRow.date_fs = row2.date_fs;
				
				row2_HashRow.date_fs_full_string = row2.date_fs_full_string;
				
				row2_HashRow.date_fs_monthyear = row2.date_fs_monthyear;
				
				row2_HashRow.date_fs_month_number = row2.date_fs_month_number;
				
				row2_HashRow.date_fs_month_name = row2.date_fs_month_name;
				
				row2_HashRow.date_fs_year_number = row2.date_fs_year_number;
				
				row2_HashRow.date_diagnostic = row2.date_diagnostic;
				
				row2_HashRow.date_diagnostic_full_string = row2.date_diagnostic_full_string;
				
				row2_HashRow.date_diagnostic_monthyear = row2.date_diagnostic_monthyear;
				
				row2_HashRow.date_diagnostic_month_number = row2.date_diagnostic_month_number;
				
				row2_HashRow.date_diagnostic_month_name = row2.date_diagnostic_month_name;
				
				row2_HashRow.date_diagnostic_year_number = row2.date_diagnostic_year_number;
				
				row2_HashRow.diagnostic = row2.diagnostic;
				
				row2_HashRow.diagnostic_probability = row2.diagnostic_probability;
				
				row2_HashRow.date_riluz_full = row2.date_riluz_full;
				
				row2_HashRow.date_riluz_full_string = row2.date_riluz_full_string;
				
				row2_HashRow.date_riluz_monthyear = row2.date_riluz_monthyear;
				
				row2_HashRow.date_riluz_month_name = row2.date_riluz_month_name;
				
				row2_HashRow.date_riluz_month_number = row2.date_riluz_month_number;
				
				row2_HashRow.date_riluz_year_number = row2.date_riluz_year_number;
				
				row2_HashRow.riluz_on = row2.riluz_on;
				
				row2_HashRow.date_death_full = row2.date_death_full;
				
				row2_HashRow.date_death_string = row2.date_death_string;
				
				row2_HashRow.date_death_monthyear = row2.date_death_monthyear;
				
				row2_HashRow.date_death_month_name = row2.date_death_month_name;
				
				row2_HashRow.date_death_month_number = row2.date_death_month_number;
				
				row2_HashRow.date_death_year_number = row2.date_death_year_number;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String time_sampling_full;

				public String getTime_sampling_full () {
					return this.time_sampling_full;
				}
				
			    public String hour;

				public String getHour () {
					return this.hour;
				}
				
			    public String minutes;

				public String getMinutes () {
					return this.minutes;
				}
				
			    public int time_sampling_key;

				public int getTime_sampling_key () {
					return this.time_sampling_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.time_sampling_full == null) ? 0 : this.time_sampling_full.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.time_sampling_full == null) {
							if (other.time_sampling_full != null)
								return false;
						
						} else if (!this.time_sampling_full.equals(other.time_sampling_full))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.time_sampling_full = this.time_sampling_full;
	            other.hour = this.hour;
	            other.minutes = this.minutes;
	            other.time_sampling_key = this.time_sampling_key;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.time_sampling_full = this.time_sampling_full;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.time_sampling_full = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.time_sampling_full,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.hour = readString(dis,ois);
					
						this.minutes = readString(dis,ois);
					
			            this.time_sampling_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.hour, dos, oos);
					
						writeString(this.minutes, dos, oos);
					
		            	dos.writeInt(this.time_sampling_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time_sampling_full="+time_sampling_full);
		sb.append(",hour="+hour);
		sb.append(",minutes="+minutes);
		sb.append(",time_sampling_key="+String.valueOf(time_sampling_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.time_sampling_full, other.time_sampling_full);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_2 - inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(out2,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = context.CNX_POSTGRES_DWH_Login;
					
					
					
	final String decryptedPassword_tDBInput_2 = context.CNX_POSTGRES_DWH_Password; 
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String url_tDBInput_2 = "jdbc:postgresql://" + context.CNX_POSTGRES_DWH_Server + ":" + context.CNX_POSTGRES_DWH_Port + "/" + context.CNX_POSTGRES_DWH_Database;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_time\".\"time_sampling_full\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_time\".\"hour\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_time\".\"minutes\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_time\".\"time_sampling_key\"\nFROM \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_time\"";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.time_sampling_full = null;
							} else {
	                         		
        	row3.time_sampling_full = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.hour = null;
							} else {
	                         		
        	row3.hour = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row3.minutes = null;
							} else {
	                         		
        	row3.minutes = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row3.time_sampling_key = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(4) != null) {
                row3.time_sampling_key = rs_tDBInput_2.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.time_sampling_full = row3.time_sampling_full;
				
				row3_HashRow.hour = row3.hour;
				
				row3_HashRow.minutes = row3.minutes;
				
				row3_HashRow.time_sampling_key = row3.time_sampling_key;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String date_sampling_full;

				public String getDate_sampling_full () {
					return this.date_sampling_full;
				}
				
			    public String date_sampling_full_string;

				public String getDate_sampling_full_string () {
					return this.date_sampling_full_string;
				}
				
			    public String date_sampling_monthyear;

				public String getDate_sampling_monthyear () {
					return this.date_sampling_monthyear;
				}
				
			    public String date_sampling_month_number;

				public String getDate_sampling_month_number () {
					return this.date_sampling_month_number;
				}
				
			    public String date_sampling_month_name;

				public String getDate_sampling_month_name () {
					return this.date_sampling_month_name;
				}
				
			    public String date_sampling_year_number;

				public String getDate_sampling_year_number () {
					return this.date_sampling_year_number;
				}
				
			    public int date_sampling_key;

				public int getDate_sampling_key () {
					return this.date_sampling_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.date_sampling_full == null) ? 0 : this.date_sampling_full.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.date_sampling_full == null) {
							if (other.date_sampling_full != null)
								return false;
						
						} else if (!this.date_sampling_full.equals(other.date_sampling_full))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.date_sampling_full = this.date_sampling_full;
	            other.date_sampling_full_string = this.date_sampling_full_string;
	            other.date_sampling_monthyear = this.date_sampling_monthyear;
	            other.date_sampling_month_number = this.date_sampling_month_number;
	            other.date_sampling_month_name = this.date_sampling_month_name;
	            other.date_sampling_year_number = this.date_sampling_year_number;
	            other.date_sampling_key = this.date_sampling_key;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.date_sampling_full = this.date_sampling_full;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.date_sampling_full = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.date_sampling_full,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.date_sampling_full_string = readString(dis,ois);
					
						this.date_sampling_monthyear = readString(dis,ois);
					
						this.date_sampling_month_number = readString(dis,ois);
					
						this.date_sampling_month_name = readString(dis,ois);
					
						this.date_sampling_year_number = readString(dis,ois);
					
			            this.date_sampling_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.date_sampling_full_string, dos, oos);
					
						writeString(this.date_sampling_monthyear, dos, oos);
					
						writeString(this.date_sampling_month_number, dos, oos);
					
						writeString(this.date_sampling_month_name, dos, oos);
					
						writeString(this.date_sampling_year_number, dos, oos);
					
		            	dos.writeInt(this.date_sampling_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date_sampling_full="+date_sampling_full);
		sb.append(",date_sampling_full_string="+date_sampling_full_string);
		sb.append(",date_sampling_monthyear="+date_sampling_monthyear);
		sb.append(",date_sampling_month_number="+date_sampling_month_number);
		sb.append(",date_sampling_month_name="+date_sampling_month_name);
		sb.append(",date_sampling_year_number="+date_sampling_year_number);
		sb.append(",date_sampling_key="+String.valueOf(date_sampling_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.date_sampling_full, other.date_sampling_full);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_3 - inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(out2,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = context.CNX_POSTGRES_DWH_Login;
					
					
					
	final String decryptedPassword_tDBInput_3 = context.CNX_POSTGRES_DWH_Password; 
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String url_tDBInput_3 = "jdbc:postgresql://" + context.CNX_POSTGRES_DWH_Server + ":" + context.CNX_POSTGRES_DWH_Port + "/" + context.CNX_POSTGRES_DWH_Database;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_full\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_full_string\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_monthyear\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_month_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_month_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_year_number\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\".\"date_sampling_key\"\nFROM \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_date_sampling\"";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row4.date_sampling_full = null;
							} else {
	                         		
        	row4.date_sampling_full = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row4.date_sampling_full_string = null;
							} else {
	                         		
        	row4.date_sampling_full_string = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row4.date_sampling_monthyear = null;
							} else {
	                         		
        	row4.date_sampling_monthyear = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row4.date_sampling_month_number = null;
							} else {
	                         		
        	row4.date_sampling_month_number = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row4.date_sampling_month_name = null;
							} else {
	                         		
        	row4.date_sampling_month_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row4.date_sampling_year_number = null;
							} else {
	                         		
        	row4.date_sampling_year_number = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row4.date_sampling_key = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(7) != null) {
                row4.date_sampling_key = rs_tDBInput_3.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.date_sampling_full = row4.date_sampling_full;
				
				row4_HashRow.date_sampling_full_string = row4.date_sampling_full_string;
				
				row4_HashRow.date_sampling_monthyear = row4.date_sampling_monthyear;
				
				row4_HashRow.date_sampling_month_number = row4.date_sampling_month_number;
				
				row4_HashRow.date_sampling_month_name = row4.date_sampling_month_name;
				
				row4_HashRow.date_sampling_year_number = row4.date_sampling_year_number;
				
				row4_HashRow.date_sampling_key = row4.date_sampling_key;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
    static byte[] commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String measure_name;

				public String getMeasure_name () {
					return this.measure_name;
				}
				
			    public String measure_unity;

				public String getMeasure_unity () {
					return this.measure_unity;
				}
				
			    public int measure_key;

				public int getMeasure_key () {
					return this.measure_key;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.measure_name == null) ? 0 : this.measure_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.measure_name == null) {
							if (other.measure_name != null)
								return false;
						
						} else if (!this.measure_name.equals(other.measure_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.measure_name = this.measure_name;
	            other.measure_unity = this.measure_unity;
	            other.measure_key = this.measure_key;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.measure_name = this.measure_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE.length == 0) {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_FT_BIOLOGICAL_MEASURE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_FT_BIOLOGICAL_MEASURE) {

        	try {

        		int length = 0;
		
					this.measure_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.measure_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.measure_unity = readString(dis,ois);
					
			            this.measure_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.measure_unity, dos, oos);
					
		            	dos.writeInt(this.measure_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("measure_name="+measure_name);
		sb.append(",measure_unity="+measure_unity);
		sb.append(",measure_key="+String.valueOf(measure_key));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.measure_name, other.measure_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_4 - inputs:(after_tFileInputDelimited_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(out2,row2,row3,row4,row5) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = context.CNX_POSTGRES_DWH_Login;
					
					
					
	final String decryptedPassword_tDBInput_4 = context.CNX_POSTGRES_DWH_Password; 
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
			String url_tDBInput_4 = "jdbc:postgresql://" + context.CNX_POSTGRES_DWH_Server + ":" + context.CNX_POSTGRES_DWH_Port + "/" + context.CNX_POSTGRES_DWH_Database;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_measure\".\"measure_name\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_measure\".\"measure_unity\", \n  \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_measure\".\"measure_key\"\nFROM \""+context.CNX_POSTGRES_DWH_Database+"\".\""+context.CNX_POSTGRES_DWH_Schema+"\".\"dim_measure\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row5.measure_name = null;
							} else {
	                         		
        	row5.measure_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row5.measure_unity = null;
							} else {
	                         		
        	row5.measure_unity = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row5.measure_key = 0;
							} else {
		                          
            if(rs_tDBInput_4.getObject(3) != null) {
                row5.measure_key = rs_tDBInput_4.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.measure_name = row5.measure_name;
				
				row5_HashRow.measure_unity = row5.measure_unity;
				
				row5_HashRow.measure_key = row5.measure_key;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FT_BIOLOGICAL_MEASURE FT_BIOLOGICAL_MEASUREClass = new FT_BIOLOGICAL_MEASURE();

        int exitCode = FT_BIOLOGICAL_MEASUREClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FT_BIOLOGICAL_MEASURE.class.getClassLoader().getResourceAsStream("stagepca/ft_biological_measure_0_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FT_BIOLOGICAL_MEASURE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("EXCEL_BIOLOGICAL_TRANS_Encoding", "id_String");
				
                context.EXCEL_BIOLOGICAL_TRANS_Encoding=(String) context.getProperty("EXCEL_BIOLOGICAL_TRANS_Encoding");
				    context.setContextType("EXCEL_BIOLOGICAL_TRANS_FieldSeparator", "id_String");
				
                context.EXCEL_BIOLOGICAL_TRANS_FieldSeparator=(String) context.getProperty("EXCEL_BIOLOGICAL_TRANS_FieldSeparator");
				    context.setContextType("EXCEL_BIOLOGICAL_TRANS_File", "id_File");
				
                context.EXCEL_BIOLOGICAL_TRANS_File=(String) context.getProperty("EXCEL_BIOLOGICAL_TRANS_File");
				    context.setContextType("EXCEL_BIOLOGICAL_TRANS_Header", "id_Integer");
				
             try{
                 context.EXCEL_BIOLOGICAL_TRANS_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_BIOLOGICAL_TRANS_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_BIOLOGICAL_TRANS_Header", e.getMessage()));
                 context.EXCEL_BIOLOGICAL_TRANS_Header=null;
              }
				    context.setContextType("EXCEL_BIOLOGICAL_TRANS_RowSeparator", "id_String");
				
                context.EXCEL_BIOLOGICAL_TRANS_RowSeparator=(String) context.getProperty("EXCEL_BIOLOGICAL_TRANS_RowSeparator");
				    context.setContextType("CNX_POSTGRES_DWH_Database", "id_String");
				
                context.CNX_POSTGRES_DWH_Database=(String) context.getProperty("CNX_POSTGRES_DWH_Database");
				    context.setContextType("CNX_POSTGRES_DWH_Login", "id_String");
				
                context.CNX_POSTGRES_DWH_Login=(String) context.getProperty("CNX_POSTGRES_DWH_Login");
				    context.setContextType("CNX_POSTGRES_DWH_Password", "id_Password");
				
            		String pwd_CNX_POSTGRES_DWH_Password_value = context.getProperty("CNX_POSTGRES_DWH_Password");
            		context.CNX_POSTGRES_DWH_Password = null;
            		if(pwd_CNX_POSTGRES_DWH_Password_value!=null) {
            			if(context_param.containsKey("CNX_POSTGRES_DWH_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CNX_POSTGRES_DWH_Password = pwd_CNX_POSTGRES_DWH_Password_value;
            			} else if (!pwd_CNX_POSTGRES_DWH_Password_value.isEmpty()) {
            				try {
            					context.CNX_POSTGRES_DWH_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CNX_POSTGRES_DWH_Password_value);
            					context.put("CNX_POSTGRES_DWH_Password",context.CNX_POSTGRES_DWH_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CNX_POSTGRES_DWH_Port", "id_String");
				
                context.CNX_POSTGRES_DWH_Port=(String) context.getProperty("CNX_POSTGRES_DWH_Port");
				    context.setContextType("CNX_POSTGRES_DWH_Schema", "id_String");
				
                context.CNX_POSTGRES_DWH_Schema=(String) context.getProperty("CNX_POSTGRES_DWH_Schema");
				    context.setContextType("CNX_POSTGRES_DWH_Server", "id_String");
				
                context.CNX_POSTGRES_DWH_Server=(String) context.getProperty("CNX_POSTGRES_DWH_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_TRANS_Encoding")) {
                context.EXCEL_BIOLOGICAL_TRANS_Encoding = (String) parentContextMap.get("EXCEL_BIOLOGICAL_TRANS_Encoding");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_TRANS_FieldSeparator")) {
                context.EXCEL_BIOLOGICAL_TRANS_FieldSeparator = (String) parentContextMap.get("EXCEL_BIOLOGICAL_TRANS_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_TRANS_File")) {
                context.EXCEL_BIOLOGICAL_TRANS_File = (String) parentContextMap.get("EXCEL_BIOLOGICAL_TRANS_File");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_TRANS_Header")) {
                context.EXCEL_BIOLOGICAL_TRANS_Header = (Integer) parentContextMap.get("EXCEL_BIOLOGICAL_TRANS_Header");
            }if (parentContextMap.containsKey("EXCEL_BIOLOGICAL_TRANS_RowSeparator")) {
                context.EXCEL_BIOLOGICAL_TRANS_RowSeparator = (String) parentContextMap.get("EXCEL_BIOLOGICAL_TRANS_RowSeparator");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Database")) {
                context.CNX_POSTGRES_DWH_Database = (String) parentContextMap.get("CNX_POSTGRES_DWH_Database");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Login")) {
                context.CNX_POSTGRES_DWH_Login = (String) parentContextMap.get("CNX_POSTGRES_DWH_Login");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Password")) {
                context.CNX_POSTGRES_DWH_Password = (java.lang.String) parentContextMap.get("CNX_POSTGRES_DWH_Password");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Port")) {
                context.CNX_POSTGRES_DWH_Port = (String) parentContextMap.get("CNX_POSTGRES_DWH_Port");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Schema")) {
                context.CNX_POSTGRES_DWH_Schema = (String) parentContextMap.get("CNX_POSTGRES_DWH_Schema");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Server")) {
                context.CNX_POSTGRES_DWH_Server = (String) parentContextMap.get("CNX_POSTGRES_DWH_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("CNX_POSTGRES_DWH_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FT_BIOLOGICAL_MEASURE");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     202727 characters generated by Talend Open Studio for Data Integration 
 *     on the January 20, 2020 7:41:48 AM CET
 ************************************************************************************************/