// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package stagepca.dim_date_exam_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.DateHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DIM_DATE_EXAM Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class DIM_DATE_EXAM implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EXCEL_CLIN_1_Encoding != null){
				
					this.setProperty("EXCEL_CLIN_1_Encoding", EXCEL_CLIN_1_Encoding.toString());
				
			}
			
			if(EXCEL_CLIN_1_FieldSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_FieldSeparator", EXCEL_CLIN_1_FieldSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_1_File != null){
				
					this.setProperty("EXCEL_CLIN_1_File", EXCEL_CLIN_1_File.toString());
				
			}
			
			if(EXCEL_CLIN_1_Header != null){
				
					this.setProperty("EXCEL_CLIN_1_Header", EXCEL_CLIN_1_Header.toString());
				
			}
			
			if(EXCEL_CLIN_1_RowSeparator != null){
				
					this.setProperty("EXCEL_CLIN_1_RowSeparator", EXCEL_CLIN_1_RowSeparator.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Database != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Database", CNX_POSTGRES_DWH_Database.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Login != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Login", CNX_POSTGRES_DWH_Login.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Password != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Password", CNX_POSTGRES_DWH_Password.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Port != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Port", CNX_POSTGRES_DWH_Port.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Schema != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Schema", CNX_POSTGRES_DWH_Schema.toString());
				
			}
			
			if(CNX_POSTGRES_DWH_Server != null){
				
					this.setProperty("CNX_POSTGRES_DWH_Server", CNX_POSTGRES_DWH_Server.toString());
				
			}
			
			if(EXCEL_CLIN_2_RowSeparator != null){
				
					this.setProperty("EXCEL_CLIN_2_RowSeparator", EXCEL_CLIN_2_RowSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_2_Header != null){
				
					this.setProperty("EXCEL_CLIN_2_Header", EXCEL_CLIN_2_Header.toString());
				
			}
			
			if(EXCEL_CLIN_2_Encoding != null){
				
					this.setProperty("EXCEL_CLIN_2_Encoding", EXCEL_CLIN_2_Encoding.toString());
				
			}
			
			if(EXCEL_CLIN_2_FieldSeparator != null){
				
					this.setProperty("EXCEL_CLIN_2_FieldSeparator", EXCEL_CLIN_2_FieldSeparator.toString());
				
			}
			
			if(EXCEL_CLIN_2_File != null){
				
					this.setProperty("EXCEL_CLIN_2_File", EXCEL_CLIN_2_File.toString());
				
			}
			
		}

public String EXCEL_CLIN_1_Encoding;
public String getEXCEL_CLIN_1_Encoding(){
	return this.EXCEL_CLIN_1_Encoding;
}
public String EXCEL_CLIN_1_FieldSeparator;
public String getEXCEL_CLIN_1_FieldSeparator(){
	return this.EXCEL_CLIN_1_FieldSeparator;
}
		public String EXCEL_CLIN_1_File;
		public String getEXCEL_CLIN_1_File(){
			return this.EXCEL_CLIN_1_File;
		}
		
public Integer EXCEL_CLIN_1_Header;
public Integer getEXCEL_CLIN_1_Header(){
	return this.EXCEL_CLIN_1_Header;
}
public String EXCEL_CLIN_1_RowSeparator;
public String getEXCEL_CLIN_1_RowSeparator(){
	return this.EXCEL_CLIN_1_RowSeparator;
}
public String CNX_POSTGRES_DWH_Database;
public String getCNX_POSTGRES_DWH_Database(){
	return this.CNX_POSTGRES_DWH_Database;
}
public String CNX_POSTGRES_DWH_Login;
public String getCNX_POSTGRES_DWH_Login(){
	return this.CNX_POSTGRES_DWH_Login;
}
public java.lang.String CNX_POSTGRES_DWH_Password;
public java.lang.String getCNX_POSTGRES_DWH_Password(){
	return this.CNX_POSTGRES_DWH_Password;
}
public String CNX_POSTGRES_DWH_Port;
public String getCNX_POSTGRES_DWH_Port(){
	return this.CNX_POSTGRES_DWH_Port;
}
public String CNX_POSTGRES_DWH_Schema;
public String getCNX_POSTGRES_DWH_Schema(){
	return this.CNX_POSTGRES_DWH_Schema;
}
public String CNX_POSTGRES_DWH_Server;
public String getCNX_POSTGRES_DWH_Server(){
	return this.CNX_POSTGRES_DWH_Server;
}
public String EXCEL_CLIN_2_RowSeparator;
public String getEXCEL_CLIN_2_RowSeparator(){
	return this.EXCEL_CLIN_2_RowSeparator;
}
public Integer EXCEL_CLIN_2_Header;
public Integer getEXCEL_CLIN_2_Header(){
	return this.EXCEL_CLIN_2_Header;
}
public String EXCEL_CLIN_2_Encoding;
public String getEXCEL_CLIN_2_Encoding(){
	return this.EXCEL_CLIN_2_Encoding;
}
public String EXCEL_CLIN_2_FieldSeparator;
public String getEXCEL_CLIN_2_FieldSeparator(){
	return this.EXCEL_CLIN_2_FieldSeparator;
}
		public String EXCEL_CLIN_2_File;
		public String getEXCEL_CLIN_2_File(){
			return this.EXCEL_CLIN_2_File;
		}
		
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DIM_DATE_EXAM";
	private final String projectName = "STAGEPCA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DIM_DATE_EXAM.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DIM_DATE_EXAM.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String Date_Examination_Full;

				public String getDate_Examination_Full () {
					return this.Date_Examination_Full;
				}
				
			    public String Date_Examination_Full_String;

				public String getDate_Examination_Full_String () {
					return this.Date_Examination_Full_String;
				}
				
			    public String Date_Examination_MonthYear;

				public String getDate_Examination_MonthYear () {
					return this.Date_Examination_MonthYear;
				}
				
			    public String Date_Examination_Month_Number;

				public String getDate_Examination_Month_Number () {
					return this.Date_Examination_Month_Number;
				}
				
			    public String Date_Examination_Month_Name;

				public String getDate_Examination_Month_Name () {
					return this.Date_Examination_Month_Name;
				}
				
			    public String Date_Examination_Year_Number;

				public String getDate_Examination_Year_Number () {
					return this.Date_Examination_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.Date_Examination_Full = readString(dis);
					
					this.Date_Examination_Full_String = readString(dis);
					
					this.Date_Examination_MonthYear = readString(dis);
					
					this.Date_Examination_Month_Number = readString(dis);
					
					this.Date_Examination_Month_Name = readString(dis);
					
					this.Date_Examination_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_Examination_Full,dos);
					
					// String
				
						writeString(this.Date_Examination_Full_String,dos);
					
					// String
				
						writeString(this.Date_Examination_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Examination_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_Examination_Full="+Date_Examination_Full);
		sb.append(",Date_Examination_Full_String="+Date_Examination_Full_String);
		sb.append(",Date_Examination_MonthYear="+Date_Examination_MonthYear);
		sb.append(",Date_Examination_Month_Number="+Date_Examination_Month_Number);
		sb.append(",Date_Examination_Month_Name="+Date_Examination_Month_Name);
		sb.append(",Date_Examination_Year_Number="+Date_Examination_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String Date_Examination_Full;

				public String getDate_Examination_Full () {
					return this.Date_Examination_Full;
				}
				
			    public String Date_Examination_Full_String;

				public String getDate_Examination_Full_String () {
					return this.Date_Examination_Full_String;
				}
				
			    public String Date_Examination_MonthYear;

				public String getDate_Examination_MonthYear () {
					return this.Date_Examination_MonthYear;
				}
				
			    public String Date_Examination_Month_Number;

				public String getDate_Examination_Month_Number () {
					return this.Date_Examination_Month_Number;
				}
				
			    public String Date_Examination_Month_Name;

				public String getDate_Examination_Month_Name () {
					return this.Date_Examination_Month_Name;
				}
				
			    public String Date_Examination_Year_Number;

				public String getDate_Examination_Year_Number () {
					return this.Date_Examination_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.Date_Examination_Full = readString(dis);
					
					this.Date_Examination_Full_String = readString(dis);
					
					this.Date_Examination_MonthYear = readString(dis);
					
					this.Date_Examination_Month_Number = readString(dis);
					
					this.Date_Examination_Month_Name = readString(dis);
					
					this.Date_Examination_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_Examination_Full,dos);
					
					// String
				
						writeString(this.Date_Examination_Full_String,dos);
					
					// String
				
						writeString(this.Date_Examination_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Examination_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_Examination_Full="+Date_Examination_Full);
		sb.append(",Date_Examination_Full_String="+Date_Examination_Full_String);
		sb.append(",Date_Examination_MonthYear="+Date_Examination_MonthYear);
		sb.append(",Date_Examination_Month_Number="+Date_Examination_Month_Number);
		sb.append(",Date_Examination_Month_Name="+Date_Examination_Month_Name);
		sb.append(",Date_Examination_Year_Number="+Date_Examination_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String Date_Examination_Full;

				public String getDate_Examination_Full () {
					return this.Date_Examination_Full;
				}
				
			    public String Date_Examination_Full_String;

				public String getDate_Examination_Full_String () {
					return this.Date_Examination_Full_String;
				}
				
			    public String Date_Examination_MonthYear;

				public String getDate_Examination_MonthYear () {
					return this.Date_Examination_MonthYear;
				}
				
			    public String Date_Examination_Month_Number;

				public String getDate_Examination_Month_Number () {
					return this.Date_Examination_Month_Number;
				}
				
			    public String Date_Examination_Month_Name;

				public String getDate_Examination_Month_Name () {
					return this.Date_Examination_Month_Name;
				}
				
			    public String Date_Examination_Year_Number;

				public String getDate_Examination_Year_Number () {
					return this.Date_Examination_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.Date_Examination_Full = readString(dis);
					
					this.Date_Examination_Full_String = readString(dis);
					
					this.Date_Examination_MonthYear = readString(dis);
					
					this.Date_Examination_Month_Number = readString(dis);
					
					this.Date_Examination_Month_Name = readString(dis);
					
					this.Date_Examination_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_Examination_Full,dos);
					
					// String
				
						writeString(this.Date_Examination_Full_String,dos);
					
					// String
				
						writeString(this.Date_Examination_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Examination_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_Examination_Full="+Date_Examination_Full);
		sb.append(",Date_Examination_Full_String="+Date_Examination_Full_String);
		sb.append(",Date_Examination_MonthYear="+Date_Examination_MonthYear);
		sb.append(",Date_Examination_Month_Number="+Date_Examination_Month_Number);
		sb.append(",Date_Examination_Month_Name="+Date_Examination_Month_Name);
		sb.append(",Date_Examination_Year_Number="+Date_Examination_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String Date_Examination_Full;

				public String getDate_Examination_Full () {
					return this.Date_Examination_Full;
				}
				
			    public String Date_Examination_Full_String;

				public String getDate_Examination_Full_String () {
					return this.Date_Examination_Full_String;
				}
				
			    public String Date_Examination_MonthYear;

				public String getDate_Examination_MonthYear () {
					return this.Date_Examination_MonthYear;
				}
				
			    public String Date_Examination_Month_Number;

				public String getDate_Examination_Month_Number () {
					return this.Date_Examination_Month_Number;
				}
				
			    public String Date_Examination_Month_Name;

				public String getDate_Examination_Month_Name () {
					return this.Date_Examination_Month_Name;
				}
				
			    public String Date_Examination_Year_Number;

				public String getDate_Examination_Year_Number () {
					return this.Date_Examination_Year_Number;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.Date_Examination_Full = readString(dis);
					
					this.Date_Examination_Full_String = readString(dis);
					
					this.Date_Examination_MonthYear = readString(dis);
					
					this.Date_Examination_Month_Number = readString(dis);
					
					this.Date_Examination_Month_Name = readString(dis);
					
					this.Date_Examination_Year_Number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Date_Examination_Full,dos);
					
					// String
				
						writeString(this.Date_Examination_Full_String,dos);
					
					// String
				
						writeString(this.Date_Examination_MonthYear,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Number,dos);
					
					// String
				
						writeString(this.Date_Examination_Month_Name,dos);
					
					// String
				
						writeString(this.Date_Examination_Year_Number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Date_Examination_Full="+Date_Examination_Full);
		sb.append(",Date_Examination_Full_String="+Date_Examination_Full_String);
		sb.append(",Date_Examination_MonthYear="+Date_Examination_MonthYear);
		sb.append(",Date_Examination_Month_Number="+Date_Examination_Month_Number);
		sb.append(",Date_Examination_Month_Name="+Date_Examination_Month_Name);
		sb.append(",Date_Examination_Year_Number="+Date_Examination_Year_Number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String DATEXAM_Val;

				public String getDATEXAM_Val () {
					return this.DATEXAM_Val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.DATEXAM_Val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATEXAM_Val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATEXAM_Val="+DATEXAM_Val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String DATEXAM_Val;

				public String getDATEXAM_Val () {
					return this.DATEXAM_Val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.DATEXAM_Val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATEXAM_Val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATEXAM_Val="+DATEXAM_Val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATEXAM;

				public String getDATEXAM () {
					return this.DATEXAM;
				}
				
			    public String DATEXAM_VALUE;

				public String getDATEXAM_VALUE () {
					return this.DATEXAM_VALUE;
				}
				
			    public String HEIGHT;

				public String getHEIGHT () {
					return this.HEIGHT;
				}
				
			    public String HEIGHT_VALUE;

				public String getHEIGHT_VALUE () {
					return this.HEIGHT_VALUE;
				}
				
			    public String WEIGHT_REF;

				public String getWEIGHT_REF () {
					return this.WEIGHT_REF;
				}
				
			    public String WEIGHT_REF_VALUE;

				public String getWEIGHT_REF_VALUE () {
					return this.WEIGHT_REF_VALUE;
				}
				
			    public String WEIGHT;

				public String getWEIGHT () {
					return this.WEIGHT;
				}
				
			    public String WEIGHT_VALUE;

				public String getWEIGHT_VALUE () {
					return this.WEIGHT_VALUE;
				}
				
			    public String BMI;

				public String getBMI () {
					return this.BMI;
				}
				
			    public String BMI_VALUE;

				public String getBMI_VALUE () {
					return this.BMI_VALUE;
				}
				
			    public String ALS;

				public String getALS () {
					return this.ALS;
				}
				
			    public String ALS_VALUE;

				public String getALS_VALUE () {
					return this.ALS_VALUE;
				}
				
			    public String ALS_PARO;

				public String getALS_PARO () {
					return this.ALS_PARO;
				}
				
			    public String ALS_PARO_VALUE;

				public String getALS_PARO_VALUE () {
					return this.ALS_PARO_VALUE;
				}
				
			    public String ALS_SALI;

				public String getALS_SALI () {
					return this.ALS_SALI;
				}
				
			    public String ALS_SALI_VALUE;

				public String getALS_SALI_VALUE () {
					return this.ALS_SALI_VALUE;
				}
				
			    public String ALS_DEGL;

				public String getALS_DEGL () {
					return this.ALS_DEGL;
				}
				
			    public String ALS_DEGL_VALUE;

				public String getALS_DEGL_VALUE () {
					return this.ALS_DEGL_VALUE;
				}
				
			    public String ALS_ERCI;

				public String getALS_ERCI () {
					return this.ALS_ERCI;
				}
				
			    public String ALS_ERCI_VALUE;

				public String getALS_ERCI_VALUE () {
					return this.ALS_ERCI_VALUE;
				}
				
			    public String ALS_SGAS;

				public String getALS_SGAS () {
					return this.ALS_SGAS;
				}
				
			    public String ALS_SGAS_VALUE;

				public String getALS_SGAS_VALUE () {
					return this.ALS_SGAS_VALUE;
				}
				
			    public String ALS_AGAS;

				public String getALS_AGAS () {
					return this.ALS_AGAS;
				}
				
			    public String ALS_AGAS_VALUE;

				public String getALS_AGAS_VALUE () {
					return this.ALS_AGAS_VALUE;
				}
				
			    public String ALS_HABI;

				public String getALS_HABI () {
					return this.ALS_HABI;
				}
				
			    public String ALS_HABI_VALUE;

				public String getALS_HABI_VALUE () {
					return this.ALS_HABI_VALUE;
				}
				
			    public String ALS_LITD;

				public String getALS_LITD () {
					return this.ALS_LITD;
				}
				
			    public String ALS_LITD_VALUE;

				public String getALS_LITD_VALUE () {
					return this.ALS_LITD_VALUE;
				}
				
			    public String ALS_MARC;

				public String getALS_MARC () {
					return this.ALS_MARC;
				}
				
			    public String ALS_MARC_VALUE;

				public String getALS_MARC_VALUE () {
					return this.ALS_MARC_VALUE;
				}
				
			    public String ALS_ESCA;

				public String getALS_ESCA () {
					return this.ALS_ESCA;
				}
				
			    public String ALS_ESCA_VALUE;

				public String getALS_ESCA_VALUE () {
					return this.ALS_ESCA_VALUE;
				}
				
			    public String ALS_ALS_dyspne;

				public String getALS_ALS_dyspne () {
					return this.ALS_ALS_dyspne;
				}
				
			    public String ALS_ALS_dyspne_VALUE;

				public String getALS_ALS_dyspne_VALUE () {
					return this.ALS_ALS_dyspne_VALUE;
				}
				
			    public String ALS_ALS_orthopne;

				public String getALS_ALS_orthopne () {
					return this.ALS_ALS_orthopne;
				}
				
			    public String ALS_ALS_orthopne_VALUE;

				public String getALS_ALS_orthopne_VALUE () {
					return this.ALS_ALS_orthopne_VALUE;
				}
				
			    public String ALS_INSR;

				public String getALS_INSR () {
					return this.ALS_INSR;
				}
				
			    public String ALS_INSR_VALUE;

				public String getALS_INSR_VALUE () {
					return this.ALS_INSR_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATEXAM = readString(dis);
					
					this.DATEXAM_VALUE = readString(dis);
					
					this.HEIGHT = readString(dis);
					
					this.HEIGHT_VALUE = readString(dis);
					
					this.WEIGHT_REF = readString(dis);
					
					this.WEIGHT_REF_VALUE = readString(dis);
					
					this.WEIGHT = readString(dis);
					
					this.WEIGHT_VALUE = readString(dis);
					
					this.BMI = readString(dis);
					
					this.BMI_VALUE = readString(dis);
					
					this.ALS = readString(dis);
					
					this.ALS_VALUE = readString(dis);
					
					this.ALS_PARO = readString(dis);
					
					this.ALS_PARO_VALUE = readString(dis);
					
					this.ALS_SALI = readString(dis);
					
					this.ALS_SALI_VALUE = readString(dis);
					
					this.ALS_DEGL = readString(dis);
					
					this.ALS_DEGL_VALUE = readString(dis);
					
					this.ALS_ERCI = readString(dis);
					
					this.ALS_ERCI_VALUE = readString(dis);
					
					this.ALS_SGAS = readString(dis);
					
					this.ALS_SGAS_VALUE = readString(dis);
					
					this.ALS_AGAS = readString(dis);
					
					this.ALS_AGAS_VALUE = readString(dis);
					
					this.ALS_HABI = readString(dis);
					
					this.ALS_HABI_VALUE = readString(dis);
					
					this.ALS_LITD = readString(dis);
					
					this.ALS_LITD_VALUE = readString(dis);
					
					this.ALS_MARC = readString(dis);
					
					this.ALS_MARC_VALUE = readString(dis);
					
					this.ALS_ESCA = readString(dis);
					
					this.ALS_ESCA_VALUE = readString(dis);
					
					this.ALS_ALS_dyspne = readString(dis);
					
					this.ALS_ALS_dyspne_VALUE = readString(dis);
					
					this.ALS_ALS_orthopne = readString(dis);
					
					this.ALS_ALS_orthopne_VALUE = readString(dis);
					
					this.ALS_INSR = readString(dis);
					
					this.ALS_INSR_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATEXAM,dos);
					
					// String
				
						writeString(this.DATEXAM_VALUE,dos);
					
					// String
				
						writeString(this.HEIGHT,dos);
					
					// String
				
						writeString(this.HEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT_REF,dos);
					
					// String
				
						writeString(this.WEIGHT_REF_VALUE,dos);
					
					// String
				
						writeString(this.WEIGHT,dos);
					
					// String
				
						writeString(this.WEIGHT_VALUE,dos);
					
					// String
				
						writeString(this.BMI,dos);
					
					// String
				
						writeString(this.BMI_VALUE,dos);
					
					// String
				
						writeString(this.ALS,dos);
					
					// String
				
						writeString(this.ALS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_PARO,dos);
					
					// String
				
						writeString(this.ALS_PARO_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SALI,dos);
					
					// String
				
						writeString(this.ALS_SALI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_DEGL,dos);
					
					// String
				
						writeString(this.ALS_DEGL_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ERCI,dos);
					
					// String
				
						writeString(this.ALS_ERCI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_SGAS,dos);
					
					// String
				
						writeString(this.ALS_SGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_AGAS,dos);
					
					// String
				
						writeString(this.ALS_AGAS_VALUE,dos);
					
					// String
				
						writeString(this.ALS_HABI,dos);
					
					// String
				
						writeString(this.ALS_HABI_VALUE,dos);
					
					// String
				
						writeString(this.ALS_LITD,dos);
					
					// String
				
						writeString(this.ALS_LITD_VALUE,dos);
					
					// String
				
						writeString(this.ALS_MARC,dos);
					
					// String
				
						writeString(this.ALS_MARC_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ESCA,dos);
					
					// String
				
						writeString(this.ALS_ESCA_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne,dos);
					
					// String
				
						writeString(this.ALS_ALS_dyspne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne,dos);
					
					// String
				
						writeString(this.ALS_ALS_orthopne_VALUE,dos);
					
					// String
				
						writeString(this.ALS_INSR,dos);
					
					// String
				
						writeString(this.ALS_INSR_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATEXAM="+DATEXAM);
		sb.append(",DATEXAM_VALUE="+DATEXAM_VALUE);
		sb.append(",HEIGHT="+HEIGHT);
		sb.append(",HEIGHT_VALUE="+HEIGHT_VALUE);
		sb.append(",WEIGHT_REF="+WEIGHT_REF);
		sb.append(",WEIGHT_REF_VALUE="+WEIGHT_REF_VALUE);
		sb.append(",WEIGHT="+WEIGHT);
		sb.append(",WEIGHT_VALUE="+WEIGHT_VALUE);
		sb.append(",BMI="+BMI);
		sb.append(",BMI_VALUE="+BMI_VALUE);
		sb.append(",ALS="+ALS);
		sb.append(",ALS_VALUE="+ALS_VALUE);
		sb.append(",ALS_PARO="+ALS_PARO);
		sb.append(",ALS_PARO_VALUE="+ALS_PARO_VALUE);
		sb.append(",ALS_SALI="+ALS_SALI);
		sb.append(",ALS_SALI_VALUE="+ALS_SALI_VALUE);
		sb.append(",ALS_DEGL="+ALS_DEGL);
		sb.append(",ALS_DEGL_VALUE="+ALS_DEGL_VALUE);
		sb.append(",ALS_ERCI="+ALS_ERCI);
		sb.append(",ALS_ERCI_VALUE="+ALS_ERCI_VALUE);
		sb.append(",ALS_SGAS="+ALS_SGAS);
		sb.append(",ALS_SGAS_VALUE="+ALS_SGAS_VALUE);
		sb.append(",ALS_AGAS="+ALS_AGAS);
		sb.append(",ALS_AGAS_VALUE="+ALS_AGAS_VALUE);
		sb.append(",ALS_HABI="+ALS_HABI);
		sb.append(",ALS_HABI_VALUE="+ALS_HABI_VALUE);
		sb.append(",ALS_LITD="+ALS_LITD);
		sb.append(",ALS_LITD_VALUE="+ALS_LITD_VALUE);
		sb.append(",ALS_MARC="+ALS_MARC);
		sb.append(",ALS_MARC_VALUE="+ALS_MARC_VALUE);
		sb.append(",ALS_ESCA="+ALS_ESCA);
		sb.append(",ALS_ESCA_VALUE="+ALS_ESCA_VALUE);
		sb.append(",ALS_ALS_dyspne="+ALS_ALS_dyspne);
		sb.append(",ALS_ALS_dyspne_VALUE="+ALS_ALS_dyspne_VALUE);
		sb.append(",ALS_ALS_orthopne="+ALS_ALS_orthopne);
		sb.append(",ALS_ALS_orthopne_VALUE="+ALS_ALS_orthopne_VALUE);
		sb.append(",ALS_INSR="+ALS_INSR);
		sb.append(",ALS_INSR_VALUE="+ALS_INSR_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String DATEXAM_Val;

				public String getDATEXAM_Val () {
					return this.DATEXAM_Val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this.DATEXAM_Val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DATEXAM_Val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATEXAM_Val="+DATEXAM_Val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM = new byte[0];
    static byte[] commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[0];

	
			    public String _hash_ipp;

				public String get_hash_ipp () {
					return this._hash_ipp;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DIAGPROBA;

				public String getDIAGPROBA () {
					return this.DIAGPROBA;
				}
				
			    public String DATEDIAG;

				public String getDATEDIAG () {
					return this.DATEDIAG;
				}
				
			    public String FIRSTSYMPTOM;

				public String getFIRSTSYMPTOM () {
					return this.FIRSTSYMPTOM;
				}
				
			    public String LIEUDEB;

				public String getLIEUDEB () {
					return this.LIEUDEB;
				}
				
			    public String AGE_DEBUT;

				public String getAGE_DEBUT () {
					return this.AGE_DEBUT;
				}
				
			    public String DATE_PREVENT_PP;

				public String getDATE_PREVENT_PP () {
					return this.DATE_PREVENT_PP;
				}
				
			    public String DATE_PREVENT_PP_VALUE;

				public String getDATE_PREVENT_PP_VALUE () {
					return this.DATE_PREVENT_PP_VALUE;
				}
				
			    public String CVF_ASSIS_THEO_PP;

				public String getCVF_ASSIS_THEO_PP () {
					return this.CVF_ASSIS_THEO_PP;
				}
				
			    public String CVF_ASSIS_THEO_PP_VALUE;

				public String getCVF_ASSIS_THEO_PP_VALUE () {
					return this.CVF_ASSIS_THEO_PP_VALUE;
				}
				
			    public String CVL_ASSIS_THEO_PP;

				public String getCVL_ASSIS_THEO_PP () {
					return this.CVL_ASSIS_THEO_PP;
				}
				
			    public String CVL_ASSIS_THEO_PP_VALUE;

				public String getCVL_ASSIS_THEO_PP_VALUE () {
					return this.CVL_ASSIS_THEO_PP_VALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_STAGEPCA_DIM_DATE_EXAM.length) {
				if(length < 1024 && commonByteArray_STAGEPCA_DIM_DATE_EXAM.length == 0) {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[1024];
				} else {
   					commonByteArray_STAGEPCA_DIM_DATE_EXAM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length);
			strReturn = new String(commonByteArray_STAGEPCA_DIM_DATE_EXAM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_STAGEPCA_DIM_DATE_EXAM) {

        	try {

        		int length = 0;
		
					this._hash_ipp = readString(dis);
					
					this.SEX = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DIAGPROBA = readString(dis);
					
					this.DATEDIAG = readString(dis);
					
					this.FIRSTSYMPTOM = readString(dis);
					
					this.LIEUDEB = readString(dis);
					
					this.AGE_DEBUT = readString(dis);
					
					this.DATE_PREVENT_PP = readString(dis);
					
					this.DATE_PREVENT_PP_VALUE = readString(dis);
					
					this.CVF_ASSIS_THEO_PP = readString(dis);
					
					this.CVF_ASSIS_THEO_PP_VALUE = readString(dis);
					
					this.CVL_ASSIS_THEO_PP = readString(dis);
					
					this.CVL_ASSIS_THEO_PP_VALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._hash_ipp,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DIAGPROBA,dos);
					
					// String
				
						writeString(this.DATEDIAG,dos);
					
					// String
				
						writeString(this.FIRSTSYMPTOM,dos);
					
					// String
				
						writeString(this.LIEUDEB,dos);
					
					// String
				
						writeString(this.AGE_DEBUT,dos);
					
					// String
				
						writeString(this.DATE_PREVENT_PP,dos);
					
					// String
				
						writeString(this.DATE_PREVENT_PP_VALUE,dos);
					
					// String
				
						writeString(this.CVF_ASSIS_THEO_PP,dos);
					
					// String
				
						writeString(this.CVF_ASSIS_THEO_PP_VALUE,dos);
					
					// String
				
						writeString(this.CVL_ASSIS_THEO_PP,dos);
					
					// String
				
						writeString(this.CVL_ASSIS_THEO_PP_VALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_hash_ipp="+_hash_ipp);
		sb.append(",SEX="+SEX);
		sb.append(",DOB="+DOB);
		sb.append(",DIAGPROBA="+DIAGPROBA);
		sb.append(",DATEDIAG="+DATEDIAG);
		sb.append(",FIRSTSYMPTOM="+FIRSTSYMPTOM);
		sb.append(",LIEUDEB="+LIEUDEB);
		sb.append(",AGE_DEBUT="+AGE_DEBUT);
		sb.append(",DATE_PREVENT_PP="+DATE_PREVENT_PP);
		sb.append(",DATE_PREVENT_PP_VALUE="+DATE_PREVENT_PP_VALUE);
		sb.append(",CVF_ASSIS_THEO_PP="+CVF_ASSIS_THEO_PP);
		sb.append(",CVF_ASSIS_THEO_PP_VALUE="+CVF_ASSIS_THEO_PP_VALUE);
		sb.append(",CVL_ASSIS_THEO_PP="+CVL_ASSIS_THEO_PP);
		sb.append(",CVL_ASSIS_THEO_PP_VALUE="+CVL_ASSIS_THEO_PP_VALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();

		row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();

			row3Struct row3 = new row3Struct();
out3Struct out3 = new out3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow4Struct extends row4Struct implements Comparable<Comparablerow4Struct> {
	
	public int compareTo(Comparablerow4Struct other) {

		if(this.Date_Examination_Full == null && other.Date_Examination_Full != null){
			return -1;
						
		}else if(this.Date_Examination_Full != null && other.Date_Examination_Full == null){
			return 1;
						
		}else if(this.Date_Examination_Full != null && other.Date_Examination_Full != null){
			if(!this.Date_Examination_Full.equals(other.Date_Examination_Full)){
				return this.Date_Examination_Full.compareTo(other.Date_Examination_Full);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow4Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow4Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Date_Examination_Full;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Date_Examination_Full == null) ? 0 : this.Date_Examination_Full.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.Date_Examination_Full == null) {
										if (other.Date_Examination_Full != null) 
											return false;
								
									} else if (!this.Date_Examination_Full.equals(other.Date_Examination_Full))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */

	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)context.EXCEL_CLIN_1_RowSeparator).length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)context.EXCEL_CLIN_1_RowSeparator).toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */context.EXCEL_CLIN_1_File/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_Encoding);
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_Header; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], context.EXCEL_CLIN_1_Encoding);
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),context.EXCEL_CLIN_1_Encoding)), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < context.EXCEL_CLIN_1_Header;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_1_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)context.EXCEL_CLIN_1_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1._hash_ipp = null;
					
							row1.SEX = null;
					
							row1.DOB = null;
					
							row1.DIAGPROBA = null;
					
							row1.DATEDIAG = null;
					
							row1.FIRSTSYMPTOM = null;
					
							row1.LIEUDEB = null;
					
							row1.AGE_DEBUT = null;
					
							row1.DATEXAM = null;
					
							row1.DATEXAM_VALUE = null;
					
							row1.HEIGHT = null;
					
							row1.HEIGHT_VALUE = null;
					
							row1.WEIGHT_REF = null;
					
							row1.WEIGHT_REF_VALUE = null;
					
							row1.WEIGHT = null;
					
							row1.WEIGHT_VALUE = null;
					
							row1.BMI = null;
					
							row1.BMI_VALUE = null;
					
							row1.ALS = null;
					
							row1.ALS_VALUE = null;
					
							row1.ALS_PARO = null;
					
							row1.ALS_PARO_VALUE = null;
					
							row1.ALS_SALI = null;
					
							row1.ALS_SALI_VALUE = null;
					
							row1.ALS_DEGL = null;
					
							row1.ALS_DEGL_VALUE = null;
					
							row1.ALS_ERCI = null;
					
							row1.ALS_ERCI_VALUE = null;
					
							row1.ALS_SGAS = null;
					
							row1.ALS_SGAS_VALUE = null;
					
							row1.ALS_AGAS = null;
					
							row1.ALS_AGAS_VALUE = null;
					
							row1.ALS_HABI = null;
					
							row1.ALS_HABI_VALUE = null;
					
							row1.ALS_LITD = null;
					
							row1.ALS_LITD_VALUE = null;
					
							row1.ALS_MARC = null;
					
							row1.ALS_MARC_VALUE = null;
					
							row1.ALS_ESCA = null;
					
							row1.ALS_ESCA_VALUE = null;
					
							row1.ALS_ALS_dyspne = null;
					
							row1.ALS_ALS_dyspne_VALUE = null;
					
							row1.ALS_ALS_orthopne = null;
					
							row1.ALS_ALS_orthopne_VALUE = null;
					
							row1.ALS_INSR = null;
					
							row1.ALS_INSR_VALUE = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1._hash_ipp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1._hash_ipp = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SEX = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SEX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DIAGPROBA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DIAGPROBA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEDIAG = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEDIAG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FIRSTSYMPTOM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FIRSTSYMPTOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LIEUDEB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LIEUDEB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AGE_DEBUT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AGE_DEBUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEXAM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEXAM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DATEXAM_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DATEXAM_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HEIGHT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HEIGHT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HEIGHT_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HEIGHT_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_REF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_REF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_REF_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_REF_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WEIGHT_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WEIGHT_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.BMI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.BMI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.BMI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.BMI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_PARO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_PARO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_PARO_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_PARO_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SALI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SALI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SALI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SALI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_DEGL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_DEGL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_DEGL_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_DEGL_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ERCI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ERCI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ERCI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ERCI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SGAS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_SGAS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_SGAS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_AGAS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_AGAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_AGAS_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_AGAS_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_HABI = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_HABI = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_HABI_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_HABI_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_LITD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_LITD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_LITD_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_LITD_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_MARC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_MARC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_MARC_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_MARC_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ESCA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ESCA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ESCA_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ESCA_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_dyspne = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_dyspne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_dyspne_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_dyspne_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_orthopne = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_orthopne = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_ALS_orthopne_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_ALS_orthopne_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_INSR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_INSR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ALS_INSR_VALUE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ALS_INSR_VALUE = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.DATEXAM_Val = row1.DATEXAM_VALUE ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		

			//out2
			//out1


			

		
//////////
 

// for output
			row3 = new row3Struct();
								
			row3.DATEXAM_Val = out1.DATEXAM_Val;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.Date_Examination_Full = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?row3.DATEXAM_Val:"ND" ;
out3_tmp.Date_Examination_Full_String = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?
TalendDate.formatDate("ddMMyyyy", TalendDate.parseDate("dd/MM/yyyy", row3.DATEXAM_Val))
:"ND" ;
out3_tmp.Date_Examination_MonthYear = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",row3.DATEXAM_Val)) :"ND" ;
out3_tmp.Date_Examination_Month_Number = DateHandling.returnMonth(row3.DATEXAM_Val,"/") ;
out3_tmp.Date_Examination_Month_Name = DateHandling.CheckMonth(row3.DATEXAM_Val, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(row3.DATEXAM_Val, "/"))):"ND" ;
out3_tmp.Date_Examination_Year_Number = DateHandling.returnYear(row3.DATEXAM_Val, "/") ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		
row4 = null;			
if(out3.Date_Examination_Full == null){
	finder_tUniqRow_1.Date_Examination_Full = null;
}else{
	finder_tUniqRow_1.Date_Examination_Full = out3.Date_Examination_Full.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(out3.Date_Examination_Full == null){
	new_tUniqRow_1.Date_Examination_Full = null;
}else{
	new_tUniqRow_1.Date_Examination_Full = out3.Date_Examination_Full.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.Date_Examination_Full = out3.Date_Examination_Full;			row4.Date_Examination_Full_String = out3.Date_Examination_Full_String;			row4.Date_Examination_MonthYear = out3.Date_Examination_MonthYear;			row4.Date_Examination_Month_Number = out3.Date_Examination_Month_Number;			row4.Date_Examination_Month_Name = out3.Date_Examination_Month_Name;			row4.Date_Examination_Year_Number = out3.Date_Examination_Year_Number;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



	Comparablerow4Struct arrayRowtSortRow_1_SortOut = new Comparablerow4Struct();

	arrayRowtSortRow_1_SortOut.Date_Examination_Full = row4.Date_Examination_Full;
	arrayRowtSortRow_1_SortOut.Date_Examination_Full_String = row4.Date_Examination_Full_String;
	arrayRowtSortRow_1_SortOut.Date_Examination_MonthYear = row4.Date_Examination_MonthYear;
	arrayRowtSortRow_1_SortOut.Date_Examination_Month_Number = row4.Date_Examination_Month_Number;
	arrayRowtSortRow_1_SortOut.Date_Examination_Month_Name = row4.Date_Examination_Month_Name;
	arrayRowtSortRow_1_SortOut.Date_Examination_Year_Number = row4.Date_Examination_Year_Number;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */




	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_2_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)context.EXCEL_CLIN_2_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)context.EXCEL_CLIN_2_RowSeparator).length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)context.EXCEL_CLIN_2_RowSeparator).toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */context.EXCEL_CLIN_2_File/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], context.EXCEL_CLIN_2_Encoding);
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),context.EXCEL_CLIN_2_Encoding)), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < context.EXCEL_CLIN_2_Header; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], context.EXCEL_CLIN_2_Encoding);
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),context.EXCEL_CLIN_2_Encoding)), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < context.EXCEL_CLIN_2_Header;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)context.EXCEL_CLIN_2_FieldSeparator).length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)context.EXCEL_CLIN_2_FieldSeparator).toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2._hash_ipp = null;
					
							row2.SEX = null;
					
							row2.DOB = null;
					
							row2.DIAGPROBA = null;
					
							row2.DATEDIAG = null;
					
							row2.FIRSTSYMPTOM = null;
					
							row2.LIEUDEB = null;
					
							row2.AGE_DEBUT = null;
					
							row2.DATE_PREVENT_PP = null;
					
							row2.DATE_PREVENT_PP_VALUE = null;
					
							row2.CVF_ASSIS_THEO_PP = null;
					
							row2.CVF_ASSIS_THEO_PP_VALUE = null;
					
							row2.CVL_ASSIS_THEO_PP = null;
					
							row2.CVL_ASSIS_THEO_PP_VALUE = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2._hash_ipp = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2._hash_ipp = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.SEX = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.SEX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DOB = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DOB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DIAGPROBA = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DIAGPROBA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DATEDIAG = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DATEDIAG = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.FIRSTSYMPTOM = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.FIRSTSYMPTOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.LIEUDEB = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.LIEUDEB = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.AGE_DEBUT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.AGE_DEBUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DATE_PREVENT_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DATE_PREVENT_PP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DATE_PREVENT_PP_VALUE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DATE_PREVENT_PP_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CVF_ASSIS_THEO_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CVF_ASSIS_THEO_PP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CVF_ASSIS_THEO_PP_VALUE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CVF_ASSIS_THEO_PP_VALUE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CVL_ASSIS_THEO_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CVL_ASSIS_THEO_PP = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CVL_ASSIS_THEO_PP_VALUE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CVL_ASSIS_THEO_PP_VALUE = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.DATEXAM_Val = row2.DATE_PREVENT_PP_VALUE;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

			//out1
			//out2


			

		

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		
//////////
 

// for output
			row3 = new row3Struct();
								
			row3.DATEXAM_Val = out2.DATEXAM_Val;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.Date_Examination_Full = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?row3.DATEXAM_Val:"ND" ;
out3_tmp.Date_Examination_Full_String = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?
TalendDate.formatDate("ddMMyyyy", TalendDate.parseDate("dd/MM/yyyy", row3.DATEXAM_Val))
:"ND" ;
out3_tmp.Date_Examination_MonthYear = TalendDate.isDate(row3.DATEXAM_Val, "dd/MM/yyyy")?
TalendDate.formatDate("MMyyyy",TalendDate.parseDate("dd/MM/yyyy",row3.DATEXAM_Val)) :"ND" ;
out3_tmp.Date_Examination_Month_Number = DateHandling.returnMonth(row3.DATEXAM_Val,"/") ;
out3_tmp.Date_Examination_Month_Name = DateHandling.CheckMonth(row3.DATEXAM_Val, "/")?
TalendDate.formatDate("MMMM", TalendDate.parseDate("MM", DateHandling.returnMonth(row3.DATEXAM_Val, "/"))):"ND" ;
out3_tmp.Date_Examination_Year_Number = DateHandling.returnYear(row3.DATEXAM_Val, "/") ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		
row4 = null;			
if(out3.Date_Examination_Full == null){
	finder_tUniqRow_1.Date_Examination_Full = null;
}else{
	finder_tUniqRow_1.Date_Examination_Full = out3.Date_Examination_Full.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(out3.Date_Examination_Full == null){
	new_tUniqRow_1.Date_Examination_Full = null;
}else{
	new_tUniqRow_1.Date_Examination_Full = out3.Date_Examination_Full.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.Date_Examination_Full = out3.Date_Examination_Full;			row4.Date_Examination_Full_String = out3.Date_Examination_Full_String;			row4.Date_Examination_MonthYear = out3.Date_Examination_MonthYear;			row4.Date_Examination_Month_Number = out3.Date_Examination_Month_Number;			row4.Date_Examination_Month_Name = out3.Date_Examination_Month_Name;			row4.Date_Examination_Year_Number = out3.Date_Examination_Year_Number;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



	Comparablerow4Struct arrayRowtSortRow_1_SortOut = new Comparablerow4Struct();

	arrayRowtSortRow_1_SortOut.Date_Examination_Full = row4.Date_Examination_Full;
	arrayRowtSortRow_1_SortOut.Date_Examination_Full_String = row4.Date_Examination_Full_String;
	arrayRowtSortRow_1_SortOut.Date_Examination_MonthYear = row4.Date_Examination_MonthYear;
	arrayRowtSortRow_1_SortOut.Date_Examination_Month_Number = row4.Date_Examination_Month_Number;
	arrayRowtSortRow_1_SortOut.Date_Examination_Month_Name = row4.Date_Examination_Month_Name;
	arrayRowtSortRow_1_SortOut.Date_Examination_Year_Number = row4.Date_Examination_Year_Number;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */



	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row4Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow4Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.CNX_POSTGRES_DWH_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = "dim_date_examination";
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + "dim_date_examination";
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tDBOutput_2 = "jdbc:postgresql://"+context.CNX_POSTGRES_DWH_Server+":"+context.CNX_POSTGRES_DWH_Port+"/"+context.CNX_POSTGRES_DWH_Database;
    dbUser_tDBOutput_2 = context.CNX_POSTGRES_DWH_Login;

	final String decryptedPassword_tDBOutput_2 = context.CNX_POSTGRES_DWH_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"date_examination_full\",\"date_examination_full_string\",\"date_examination_monthyear\",\"date_examination_month_number\",\"date_examination_month_name\",\"date_examination_year_number\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


row4Struct[] array_tSortRow_1_SortIn = (row4Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row4Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row5.Date_Examination_Full = current_tSortRow_1_SortIn.Date_Examination_Full;
	row5.Date_Examination_Full_String = current_tSortRow_1_SortIn.Date_Examination_Full_String;
	row5.Date_Examination_MonthYear = current_tSortRow_1_SortIn.Date_Examination_MonthYear;
	row5.Date_Examination_Month_Number = current_tSortRow_1_SortIn.Date_Examination_Month_Number;
	row5.Date_Examination_Month_Name = current_tSortRow_1_SortIn.Date_Examination_Month_Name;
	row5.Date_Examination_Year_Number = current_tSortRow_1_SortIn.Date_Examination_Year_Number;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(row5.Date_Examination_Full == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row5.Date_Examination_Full);
}

                    if(row5.Date_Examination_Full_String == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row5.Date_Examination_Full_String);
}

                    if(row5.Date_Examination_MonthYear == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, row5.Date_Examination_MonthYear);
}

                    if(row5.Date_Examination_Month_Number == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, row5.Date_Examination_Month_Number);
}

                    if(row5.Date_Examination_Month_Name == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row5.Date_Examination_Month_Name);
}

                    if(row5.Date_Examination_Year_Number == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row5.Date_Examination_Year_Number);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */



	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DIM_DATE_EXAM DIM_DATE_EXAMClass = new DIM_DATE_EXAM();

        int exitCode = DIM_DATE_EXAMClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DIM_DATE_EXAM.class.getClassLoader().getResourceAsStream("stagepca/dim_date_exam_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DIM_DATE_EXAM.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("EXCEL_CLIN_1_Encoding", "id_String");
				
                context.EXCEL_CLIN_1_Encoding=(String) context.getProperty("EXCEL_CLIN_1_Encoding");
				    context.setContextType("EXCEL_CLIN_1_FieldSeparator", "id_String");
				
                context.EXCEL_CLIN_1_FieldSeparator=(String) context.getProperty("EXCEL_CLIN_1_FieldSeparator");
				    context.setContextType("EXCEL_CLIN_1_File", "id_File");
				
                context.EXCEL_CLIN_1_File=(String) context.getProperty("EXCEL_CLIN_1_File");
				    context.setContextType("EXCEL_CLIN_1_Header", "id_Integer");
				
             try{
                 context.EXCEL_CLIN_1_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_CLIN_1_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_CLIN_1_Header", e.getMessage()));
                 context.EXCEL_CLIN_1_Header=null;
              }
				    context.setContextType("EXCEL_CLIN_1_RowSeparator", "id_String");
				
                context.EXCEL_CLIN_1_RowSeparator=(String) context.getProperty("EXCEL_CLIN_1_RowSeparator");
				    context.setContextType("CNX_POSTGRES_DWH_Database", "id_String");
				
                context.CNX_POSTGRES_DWH_Database=(String) context.getProperty("CNX_POSTGRES_DWH_Database");
				    context.setContextType("CNX_POSTGRES_DWH_Login", "id_String");
				
                context.CNX_POSTGRES_DWH_Login=(String) context.getProperty("CNX_POSTGRES_DWH_Login");
				    context.setContextType("CNX_POSTGRES_DWH_Password", "id_Password");
				
            		String pwd_CNX_POSTGRES_DWH_Password_value = context.getProperty("CNX_POSTGRES_DWH_Password");
            		context.CNX_POSTGRES_DWH_Password = null;
            		if(pwd_CNX_POSTGRES_DWH_Password_value!=null) {
            			if(context_param.containsKey("CNX_POSTGRES_DWH_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.CNX_POSTGRES_DWH_Password = pwd_CNX_POSTGRES_DWH_Password_value;
            			} else if (!pwd_CNX_POSTGRES_DWH_Password_value.isEmpty()) {
            				try {
            					context.CNX_POSTGRES_DWH_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_CNX_POSTGRES_DWH_Password_value);
            					context.put("CNX_POSTGRES_DWH_Password",context.CNX_POSTGRES_DWH_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("CNX_POSTGRES_DWH_Port", "id_String");
				
                context.CNX_POSTGRES_DWH_Port=(String) context.getProperty("CNX_POSTGRES_DWH_Port");
				    context.setContextType("CNX_POSTGRES_DWH_Schema", "id_String");
				
                context.CNX_POSTGRES_DWH_Schema=(String) context.getProperty("CNX_POSTGRES_DWH_Schema");
				    context.setContextType("CNX_POSTGRES_DWH_Server", "id_String");
				
                context.CNX_POSTGRES_DWH_Server=(String) context.getProperty("CNX_POSTGRES_DWH_Server");
				    context.setContextType("EXCEL_CLIN_2_RowSeparator", "id_String");
				
                context.EXCEL_CLIN_2_RowSeparator=(String) context.getProperty("EXCEL_CLIN_2_RowSeparator");
				    context.setContextType("EXCEL_CLIN_2_Header", "id_Integer");
				
             try{
                 context.EXCEL_CLIN_2_Header=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EXCEL_CLIN_2_Header"));
             }catch(NumberFormatException e){
                    System.err.println(String.format("Null value will be used for context parameter %s: %s", "EXCEL_CLIN_2_Header", e.getMessage()));
                 context.EXCEL_CLIN_2_Header=null;
              }
				    context.setContextType("EXCEL_CLIN_2_Encoding", "id_String");
				
                context.EXCEL_CLIN_2_Encoding=(String) context.getProperty("EXCEL_CLIN_2_Encoding");
				    context.setContextType("EXCEL_CLIN_2_FieldSeparator", "id_String");
				
                context.EXCEL_CLIN_2_FieldSeparator=(String) context.getProperty("EXCEL_CLIN_2_FieldSeparator");
				    context.setContextType("EXCEL_CLIN_2_File", "id_File");
				
                context.EXCEL_CLIN_2_File=(String) context.getProperty("EXCEL_CLIN_2_File");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EXCEL_CLIN_1_Encoding")) {
                context.EXCEL_CLIN_1_Encoding = (String) parentContextMap.get("EXCEL_CLIN_1_Encoding");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_FieldSeparator")) {
                context.EXCEL_CLIN_1_FieldSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_File")) {
                context.EXCEL_CLIN_1_File = (String) parentContextMap.get("EXCEL_CLIN_1_File");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_Header")) {
                context.EXCEL_CLIN_1_Header = (Integer) parentContextMap.get("EXCEL_CLIN_1_Header");
            }if (parentContextMap.containsKey("EXCEL_CLIN_1_RowSeparator")) {
                context.EXCEL_CLIN_1_RowSeparator = (String) parentContextMap.get("EXCEL_CLIN_1_RowSeparator");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Database")) {
                context.CNX_POSTGRES_DWH_Database = (String) parentContextMap.get("CNX_POSTGRES_DWH_Database");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Login")) {
                context.CNX_POSTGRES_DWH_Login = (String) parentContextMap.get("CNX_POSTGRES_DWH_Login");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Password")) {
                context.CNX_POSTGRES_DWH_Password = (java.lang.String) parentContextMap.get("CNX_POSTGRES_DWH_Password");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Port")) {
                context.CNX_POSTGRES_DWH_Port = (String) parentContextMap.get("CNX_POSTGRES_DWH_Port");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Schema")) {
                context.CNX_POSTGRES_DWH_Schema = (String) parentContextMap.get("CNX_POSTGRES_DWH_Schema");
            }if (parentContextMap.containsKey("CNX_POSTGRES_DWH_Server")) {
                context.CNX_POSTGRES_DWH_Server = (String) parentContextMap.get("CNX_POSTGRES_DWH_Server");
            }if (parentContextMap.containsKey("EXCEL_CLIN_2_RowSeparator")) {
                context.EXCEL_CLIN_2_RowSeparator = (String) parentContextMap.get("EXCEL_CLIN_2_RowSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_2_Header")) {
                context.EXCEL_CLIN_2_Header = (Integer) parentContextMap.get("EXCEL_CLIN_2_Header");
            }if (parentContextMap.containsKey("EXCEL_CLIN_2_Encoding")) {
                context.EXCEL_CLIN_2_Encoding = (String) parentContextMap.get("EXCEL_CLIN_2_Encoding");
            }if (parentContextMap.containsKey("EXCEL_CLIN_2_FieldSeparator")) {
                context.EXCEL_CLIN_2_FieldSeparator = (String) parentContextMap.get("EXCEL_CLIN_2_FieldSeparator");
            }if (parentContextMap.containsKey("EXCEL_CLIN_2_File")) {
                context.EXCEL_CLIN_2_File = (String) parentContextMap.get("EXCEL_CLIN_2_File");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("CNX_POSTGRES_DWH_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DIM_DATE_EXAM");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     181340 characters generated by Talend Open Studio for Data Integration 
 *     on the September 15, 2019 6:29:18 PM CEST
 ************************************************************************************************/